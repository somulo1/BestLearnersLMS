{"version":3,"file":"nivo-bump.cjs.js","sources":["../src/bump/compute.ts","../src/bump/hooks.ts","../src/bump/Point.tsx","../src/bump/defaults.ts","../src/bump/LineTooltip.tsx","../src/bump/PointTooltip.tsx","../src/bump/Line.tsx","../src/bump/LinesLabels.tsx","../src/bump/Mesh.tsx","../src/bump/Bump.tsx","../src/area-bump/hooks.ts","../src/area-bump/compute.ts","../src/area-bump/Area.tsx","../src/area-bump/AreasLabels.tsx","../src/area-bump/defaults.ts","../src/area-bump/AreaTooltip.tsx","../src/area-bump/AreaBump.tsx","../src/area-bump/ResponsiveAreaBump.tsx","../src/bump/ResponsiveBump.tsx","../src/bump/types.ts"],"sourcesContent":["import { scalePoint } from 'd3-scale'\nimport { castPointScale } from '@nivo/scales'\nimport {\n    BumpDataProps,\n    BumpDatum,\n    BumpComputedSerie,\n    BumpSeriePoint,\n    BumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    width,\n    height,\n    data,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n}) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const yValuesSet = new Set<number>()\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n            if (datum.y !== null) {\n                yValuesSet.add(datum.y)\n            }\n        })\n    })\n\n    const xValues: Datum['x'][] = Array.from(xValuesSet)\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(xValues).range([0, width]).padding(xOuterPadding)\n    )\n\n    const yValues: number[] = Array.from(yValuesSet).sort((a, b) => a - b)\n    const yScale = castPointScale<number>(\n        scalePoint<number>().domain(yValues).range([0, height]).padding(yOuterPadding)\n    )\n\n    const linePointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series: Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>[] =\n        data.map(rawSerie => {\n            const serie: Omit<\n                BumpComputedSerie<Datum, ExtraProps>,\n                'color' | 'opacity' | 'lineWidth'\n            > = {\n                id: rawSerie.id,\n                data: rawSerie,\n                points: [],\n                linePoints: [],\n            }\n\n            rawSerie.data.forEach((datum, i) => {\n                let x = null\n                let y = null\n\n                if (datum.y !== null) {\n                    x = xScale(datum.x)!\n                    y = yScale(datum.y)!\n                }\n\n                const point: BumpSeriePoint<Datum, ExtraProps> = {\n                    id: `${rawSerie.id}.${i}`,\n                    serie: rawSerie,\n                    data: datum,\n                    x: x as number,\n                    y,\n                }\n                serie.points.push(point)\n\n                // only add pre transition point if the datum is not empty\n                if (point.x !== null) {\n                    if (i === 0) {\n                        serie.linePoints.push([0, point.y])\n                    } else {\n                        serie.linePoints.push([point.x - linePointPadding, point.y])\n                    }\n                }\n\n                serie.linePoints.push([point.x, point.y])\n\n                // only add post transition point if the datum is not empty\n                if (x !== null) {\n                    if (i === rawSerie.data.length - 1 && x) {\n                        serie.linePoints.push([width, point.y])\n                    } else {\n                        serie.linePoints.push([point.x + linePointPadding, point.y])\n                    }\n                }\n\n                // remove points having null coordinates\n                serie.points = serie.points.filter(point => point.x !== null)\n            })\n\n            return serie\n        })\n\n    return {\n        series,\n        xScale,\n        yScale,\n    }\n}\n","import { createElement, useMemo, useCallback, useState, MouseEvent } from 'react'\nimport { line as d3Line, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BumpInterpolation,\n    BumpCommonProps,\n    BumpDatum,\n    DefaultBumpDatum,\n    BumpDataProps,\n    BumpComputedSerie,\n    BumpPoint,\n    BumpLabel,\n    BumpLabelData,\n    BumpSerieExtraProps,\n    BumpPointMouseHandler,\n    BumpSerieMouseHandler,\n} from './types'\nimport { computeSeries } from './compute'\n\nconst useLineGenerator = (interpolation: BumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Line<[number, number | null]>()\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n                .defined(d => d[0] !== null && d[1] !== null),\n\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>\n\n    const getLineWidth = useSerieDerivedProp<Serie, number>(lineWidth)\n    const getActiveLineWidth = useSerieDerivedProp<Serie, number>(activeLineWidth)\n    const getInactiveLineWidth = useSerieDerivedProp<Serie, number>(inactiveLineWidth)\n\n    const getOpacity = useSerieDerivedProp<Serie, number>(opacity)\n    const getActiveOpacity = useSerieDerivedProp<Serie, number>(activeOpacity)\n    const getInactiveOpacity = useSerieDerivedProp<Serie, number>(inactiveOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getOpacity(serie),\n            lineWidth: getLineWidth(serie),\n        }),\n        [getLineWidth, getOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getActiveOpacity(serie),\n            lineWidth: getActiveLineWidth(serie),\n        }),\n        [getActiveLineWidth, getActiveOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getInactiveOpacity(serie),\n            lineWidth: getInactiveLineWidth(serie),\n        }),\n        [getInactiveLineWidth, getInactiveOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nconst usePointStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    isInteractive,\n    activePointIds,\n}: {\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activePointIds: string[]\n}) => {\n    type Point = Omit<BumpPoint<Datum, ExtraProps>, 'size' | 'borderWidth'>\n\n    const getSize = useSerieDerivedProp(pointSize)\n    const getActiveSize = useSerieDerivedProp(activePointSize)\n    const getInactiveSize = useSerieDerivedProp(inactivePointSize)\n\n    const getBorderWidth = useSerieDerivedProp(pointBorderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp(activePointBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp(inactivePointBorderWidth)\n\n    const getNormalStyle = useCallback(\n        (point: Point) => ({\n            size: getSize(point),\n            borderWidth: getBorderWidth(point),\n        }),\n        [getSize, getBorderWidth]\n    )\n    const getActiveStyle = useCallback(\n        (point: Point) => ({\n            size: getActiveSize(point),\n            borderWidth: getActiveBorderWidth(point),\n        }),\n        [getActiveSize, getActiveBorderWidth]\n    )\n    const getInactiveStyle = useCallback(\n        (point: Point) => ({\n            size: getInactiveSize(point),\n            borderWidth: getInactiveBorderWidth(point),\n        }),\n        [getInactiveSize, getInactiveBorderWidth]\n    )\n\n    return useCallback(\n        (point: Point) => {\n            if (!isInteractive || activePointIds.length === 0) return getNormalStyle(point)\n            if (activePointIds.includes(point.id)) return getActiveStyle(point)\n            return getInactiveStyle(point)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activePointIds]\n    )\n}\n\nexport const useBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    width,\n    height,\n    data,\n    interpolation,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointColor,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    pointBorderColor,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    interpolation: BumpCommonProps<Datum, ExtraProps>['interpolation']\n    xPadding: BumpCommonProps<Datum, ExtraProps>['xPadding']\n    xOuterPadding: BumpCommonProps<Datum, ExtraProps>['xOuterPadding']\n    yOuterPadding: BumpCommonProps<Datum, ExtraProps>['yOuterPadding']\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    colors: BumpCommonProps<Datum, ExtraProps>['colors']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointColor: BumpCommonProps<Datum, ExtraProps>['pointColor']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    pointBorderColor: BumpCommonProps<Datum, ExtraProps>['pointBorderColor']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n    const [activePointIds, setActivePointIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            computeSeries<Datum, ExtraProps>({\n                width,\n                height,\n                data,\n                xPadding,\n                xOuterPadding,\n                yOuterPadding,\n            }),\n        [width, height, data, xPadding, xOuterPadding, yOuterPadding]\n    )\n\n    const lineGenerator = useLineGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: BumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => ({\n                ...serie,\n                color: getColor(serie.data),\n                ...getSerieStyle(serie),\n            })),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const getPointStyle = usePointStyle<Datum, ExtraProps>({\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        isInteractive,\n        activePointIds,\n    })\n    const points: BumpPoint<Datum, ExtraProps>[] = useMemo(() => {\n        const pts: BumpPoint<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            serie.points.forEach(rawPoint => {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-expect-error\n                const point: BumpPoint<Datum, ExtraProps> = {\n                    ...rawPoint,\n                    serie,\n                    isActive: activeSerieIds.includes(serie.id),\n                    isInactive: activeSerieIds.length > 0 && !activeSerieIds.includes(serie.id),\n                }\n                point.color = getPointColor(point)\n                point.borderColor = getPointBorderColor(point)\n\n                pts.push({\n                    ...point,\n                    ...getPointStyle(point),\n                })\n            })\n        })\n\n        return pts\n    }, [series, activeSerieIds, getPointColor, getPointBorderColor, getPointStyle])\n\n    return {\n        xScale,\n        yScale,\n        series,\n        points,\n        lineGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n        activePointIds,\n        setActivePointIds,\n    }\n}\n\nexport const useBumpSerieHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    lineTooltip: tooltip,\n}: {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n    setActiveSerieIds: (serieIds: string[]) => void\n    lineTooltip: BumpCommonProps<Datum, ExtraProps>['lineTooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useBumpPointHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    point,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActivePointIds,\n    setActiveSerieIds,\n    pointTooltip: tooltip,\n}: {\n    point: BumpPoint<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpPointMouseHandler<Datum, ExtraProps>\n    onClick?: BumpPointMouseHandler<Datum, ExtraProps>\n    setActivePointIds: (pointIds: string[]) => void\n    setActiveSerieIds: (pointIds: string[]) => void\n    pointTooltip: BumpCommonProps<Datum, ExtraProps>['pointTooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { point }), event)\n            setActivePointIds([point.id])\n            setActiveSerieIds([point.serie.id])\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [showTooltipFromEvent, tooltip, point, setActivePointIds, setActiveSerieIds, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { point }), event)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [showTooltipFromEvent, tooltip, point, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActivePointIds([])\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setActivePointIds, setActiveSerieIds, onMouseLeave, point]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick && onClick(point, event)\n        },\n        [point, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useBumpSeriesLabels = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n}) => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        const labels: BumpLabelData<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start'\n                    ? serie.linePoints[0]\n                    : serie.linePoints[serie.linePoints.length - 1]\n\n            // exclude labels for series having missing data at the beginning/end\n            if (point?.[0] === null || point?.[1] === null) {\n                return\n            }\n\n            labels.push({\n                id: serie.id,\n                label,\n                x: point[0] + signedPadding,\n                y: point[1],\n                color: getColor(serie) as string,\n                opacity: serie.opacity,\n                serie,\n                textAnchor,\n            })\n        })\n\n        return labels\n    }, [series, position, padding, getColor, getLabel])\n}\n","import { SVGAttributes } from 'react'\nimport { useSpring, animated, to } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\nconst pointStyle: SVGAttributes<SVGCircleElement>['style'] = {\n    pointerEvents: 'none',\n}\n\nexport interface PointProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nexport const Point = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring<{\n        x: number\n        y: number\n        radius: number\n        color: string\n        borderWidth: number\n    }>({\n        x: point.x,\n        y: point.y,\n        radius: point.size / 2,\n        color: point.color,\n        borderWidth: point.borderWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`point.${point.serie.id}.${point.data.x}`}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={to(animatedProps.radius, v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            strokeWidth={animatedProps.borderWidth}\n            stroke={point.borderColor}\n            style={pointStyle}\n        />\n    )\n}\n","import { MotionProps } from '@nivo/core'\nimport { LineTooltip } from './LineTooltip'\nimport { Point } from './Point'\nimport { BumpCommonProps, BumpPointComponent, DefaultBumpDatum } from './types'\nimport PointTooltip from './PointTooltip'\n\nconst commonDefaultProps: Omit<\n    BumpCommonProps<DefaultBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onClick'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'margin'\n    | 'theme'\n    | 'axisRight'\n    | 'renderWrapper'\n> = {\n    layers: ['grid', 'axes', 'labels', 'lines', 'points', 'mesh'],\n\n    interpolation: 'smooth',\n    xPadding: 0.6,\n    xOuterPadding: 0.5,\n    yOuterPadding: 0.5,\n\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    activeLineWidth: 4,\n    inactiveLineWidth: 1,\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.3,\n\n    startLabel: false,\n    startLabelPadding: 16,\n    startLabelTextColor: { from: 'color' },\n    endLabel: true,\n    endLabelPadding: 16,\n    endLabelTextColor: { from: 'color' },\n\n    pointSize: 6,\n    activePointSize: 8,\n    inactivePointSize: 4,\n    pointColor: { from: 'serie.color' },\n    pointBorderWidth: 0,\n    activePointBorderWidth: 0,\n    inactivePointBorderWidth: 0,\n    pointBorderColor: { from: 'serie.color', modifiers: [['darker', 1.4]] },\n\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisBottom: {},\n    axisLeft: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    lineTooltip: LineTooltip,\n    pointTooltip: PointTooltip,\n    useMesh: false,\n    debugMesh: false,\n    role: 'img',\n}\n\nexport const bumpSvgDefaultProps: typeof commonDefaultProps & {\n    pointComponent: BumpPointComponent<DefaultBumpDatum, Record<string, unknown>>\n    animate: boolean\n    motionConfig: MotionProps['motionConfig']\n} = {\n    ...commonDefaultProps,\n    pointComponent: Point,\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\n\ninterface LineTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const LineTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n}: LineTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip\n        data-testid={`tooltip.${serie.data.id}`}\n        id={serie.data.id}\n        enableChip={true}\n        color={serie.color}\n    />\n)\n","import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\ninterface PointTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nconst LinePointTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointTooltipProps<Datum, ExtraProps>) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.x}</strong>, y: <strong>{point.data.y}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serie.color}\n        />\n    )\n}\n\nexport default memo(LinePointTooltip)\n","import { useSpring, animated } from '@react-spring/web'\nimport { Line as D3Line } from 'd3-shape'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport {\n    BumpCommonProps,\n    BumpComputedSerie,\n    BumpDatum,\n    BumpSerieExtraProps,\n    BumpSerieMouseHandler,\n} from './types'\nimport { useBumpSerieHandlers } from './hooks'\n\ninterface LineProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    lineGenerator: D3Line<[number, number | null]>\n    yStep: number\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n    setActiveSerieIds: (serieIds: string[]) => void\n    lineTooltip: BumpCommonProps<Datum, ExtraProps>['lineTooltip']\n    useMesh: BumpCommonProps<Datum, ExtraProps>['useMesh']\n}\n\nexport const Line = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n    lineGenerator,\n    yStep,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    lineTooltip,\n    useMesh,\n}: LineProps<Datum, ExtraProps>) => {\n    const handlers = useBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        lineTooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const linePath = lineGenerator(serie.linePoints) || ''\n\n    const animatedPath = useAnimatedPath(linePath)\n    const animatedProps = useSpring<{\n        color: string\n        opacity: number\n        lineWidth: number\n    }>({\n        color: serie.color,\n        opacity: serie.opacity,\n        lineWidth: serie.lineWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            <animated.path\n                data-testid={`line.${serie.id}`}\n                fill=\"none\"\n                d={animatedPath}\n                stroke={animatedProps.color}\n                strokeWidth={animatedProps.lineWidth}\n                strokeLinecap=\"round\"\n                strokeOpacity={animatedProps.opacity}\n                style={{ pointerEvents: 'none' }}\n            />\n            {isInteractive && !useMesh && (\n                <path\n                    data-testid={`line.${serie.id}.interactive`}\n                    fill=\"none\"\n                    stroke=\"red\"\n                    strokeOpacity={0}\n                    strokeWidth={yStep}\n                    d={linePath}\n                    strokeLinecap=\"butt\"\n                    onMouseEnter={handlers.onMouseEnter}\n                    onMouseMove={handlers.onMouseMove}\n                    onMouseLeave={handlers.onMouseLeave}\n                    onClick={handlers.onClick}\n                />\n            )}\n        </>\n    )\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { BumpComputedSerie, BumpDatum, BumpLabel, BumpSerieExtraProps } from './types'\nimport { useBumpSeriesLabels } from './hooks'\n\ninterface LineLabelsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const LinesLabels = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    series,\n    getLabel,\n    position,\n    padding,\n    color,\n}: LineLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useBumpSeriesLabels<Datum, ExtraProps>({\n        series,\n        getLabel,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { MouseEvent } from 'react'\nimport { createElement, memo, useCallback } from 'react'\nimport { Margin } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport {\n    BumpCommonProps,\n    BumpDatum,\n    BumpPoint,\n    BumpPointMouseHandler,\n    BumpSerieExtraProps,\n} from './types'\n\ninterface MeshProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    points: BumpPoint<Datum, ExtraProps>[]\n    width: number\n    height: number\n    margin: Margin\n    setActivePointIds: (ids: string[]) => void\n    setActiveSerieIds: (ids: string[]) => void\n    onMouseEnter?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpPointMouseHandler<Datum, ExtraProps>\n    onClick?: BumpPointMouseHandler<Datum, ExtraProps>\n    tooltip: BumpCommonProps<Datum, ExtraProps>['pointTooltip']\n    debug: boolean\n}\n\nconst InnerMesh = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    points,\n    width,\n    height,\n    margin,\n    setActivePointIds,\n    setActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<Datum, ExtraProps>) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y ?? 0 + margin.top],\n                'top'\n            )\n            setActivePointIds([point.id])\n            setActiveSerieIds([point.serie.id])\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [\n            showTooltipAt,\n            tooltip,\n            margin.left,\n            margin.top,\n            setActivePointIds,\n            setActiveSerieIds,\n            onMouseEnter,\n        ]\n    )\n\n    const handleMouseMove = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y ?? 0 + margin.top],\n                'top'\n            )\n            setActivePointIds([point.id])\n            setActiveSerieIds([point.serie.id])\n            onMouseMove && onMouseMove(point, event)\n        },\n        [\n            showTooltipAt,\n            tooltip,\n            margin.left,\n            margin.top,\n            setActivePointIds,\n            setActiveSerieIds,\n            onMouseMove,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            hideTooltip()\n            setActivePointIds([])\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, onMouseLeave, setActivePointIds, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nexport const Mesh = memo(InnerMesh) as typeof InnerMesh\n","import { createElement, useMemo, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport {\n    BumpCustomLayerProps,\n    BumpDatum,\n    BumpLayerId,\n    BumpPointMouseHandler,\n    BumpSerieExtraProps,\n    BumpSerieMouseHandler,\n    BumpSvgProps,\n    DefaultBumpDatum,\n} from './types'\nimport { useBump } from './hooks'\nimport { bumpSvgDefaultProps } from './defaults'\nimport { Line } from './Line'\nimport { LinesLabels } from './LinesLabels'\nimport { Mesh } from './Mesh'\n\ntype InnerBumpProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = Omit<\n    BumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBump = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    data,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = bumpSvgDefaultProps.layers as NonNullable<BumpSvgProps<Datum, ExtraProps>['layers']>,\n\n    interpolation = bumpSvgDefaultProps.interpolation,\n    xPadding = bumpSvgDefaultProps.xPadding,\n    xOuterPadding = bumpSvgDefaultProps.xOuterPadding,\n    yOuterPadding = bumpSvgDefaultProps.yOuterPadding,\n\n    colors = bumpSvgDefaultProps.colors as NonNullable<BumpSvgProps<Datum, ExtraProps>['colors']>,\n    lineWidth = bumpSvgDefaultProps.lineWidth,\n    activeLineWidth = bumpSvgDefaultProps.activeLineWidth,\n    inactiveLineWidth = bumpSvgDefaultProps.inactiveLineWidth,\n    opacity = bumpSvgDefaultProps.opacity,\n    activeOpacity = bumpSvgDefaultProps.activeOpacity,\n    inactiveOpacity = bumpSvgDefaultProps.inactiveOpacity,\n\n    startLabel = bumpSvgDefaultProps.startLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = bumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = bumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = bumpSvgDefaultProps.endLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = bumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = bumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    pointComponent = bumpSvgDefaultProps.pointComponent as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointComponent']\n    >,\n    pointSize = bumpSvgDefaultProps.pointSize,\n    activePointSize = bumpSvgDefaultProps.activePointSize,\n    inactivePointSize = bumpSvgDefaultProps.inactivePointSize,\n    pointColor = bumpSvgDefaultProps.pointColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointColor']\n    >,\n    pointBorderWidth = bumpSvgDefaultProps.pointBorderWidth,\n    activePointBorderWidth = bumpSvgDefaultProps.activePointBorderWidth,\n    inactivePointBorderWidth = bumpSvgDefaultProps.inactivePointBorderWidth,\n    pointBorderColor = bumpSvgDefaultProps.pointBorderColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointBorderColor']\n    >,\n\n    enableGridX = bumpSvgDefaultProps.enableGridX,\n    enableGridY = bumpSvgDefaultProps.enableGridY,\n    axisTop = bumpSvgDefaultProps.axisTop,\n    axisRight,\n    axisBottom = bumpSvgDefaultProps.axisBottom,\n    axisLeft = bumpSvgDefaultProps.axisLeft,\n\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = bumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    useMesh = bumpSvgDefaultProps.useMesh,\n    debugMesh = bumpSvgDefaultProps.debugMesh,\n    lineTooltip = bumpSvgDefaultProps.lineTooltip as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['lineTooltip']\n    >,\n    pointTooltip = bumpSvgDefaultProps.pointTooltip as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointTooltip']\n    >,\n    role = bumpSvgDefaultProps.role,\n}: InnerBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        series,\n        points,\n        xScale,\n        yScale,\n        lineGenerator,\n        activePointIds,\n        activeSerieIds,\n        setActiveSerieIds,\n        setActivePointIds,\n    } = useBump<Datum, ExtraProps>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        interpolation,\n        xPadding,\n        xOuterPadding,\n        yOuterPadding,\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        colors,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointColor,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        pointBorderColor,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const layerById: Record<BumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        lines: null,\n        points: null,\n        mesh: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('lines')) {\n        layerById.lines = (\n            <Fragment key=\"lines\">\n                {series.map(serie => (\n                    <Line<Datum, ExtraProps>\n                        key={serie.id}\n                        serie={serie}\n                        setActiveSerieIds={setActiveSerieIds}\n                        lineGenerator={lineGenerator}\n                        yStep={yScale.step()}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onMouseMove={onMouseMove as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onMouseLeave={onMouseLeave as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        onClick={onClick as BumpSerieMouseHandler<Datum, ExtraProps>}\n                        lineTooltip={lineTooltip}\n                        useMesh={useMesh}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (isInteractive && useMesh && layers.includes('mesh')) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                setActivePointIds={setActivePointIds}\n                setActiveSerieIds={setActiveSerieIds}\n                onMouseEnter={onMouseEnter as BumpPointMouseHandler<Datum, ExtraProps>}\n                onMouseMove={onMouseMove as BumpPointMouseHandler<Datum, ExtraProps>}\n                onMouseLeave={onMouseLeave as BumpPointMouseHandler<Datum, ExtraProps>}\n                onClick={onClick as BumpPointMouseHandler<Datum, ExtraProps>}\n                tooltip={pointTooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('points')) {\n        layerById.points = points.map(point =>\n            createElement(pointComponent, {\n                key: point.id,\n                point,\n            })\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"legends\">\n                {startLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={startLabel}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={endLabel}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: BumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n            activeSerieIds,\n            activePointIds,\n            setActiveSerieIds,\n            setActivePointIds,\n        }),\n        [\n            activePointIds,\n            activeSerieIds,\n            setActivePointIds,\n            setActiveSerieIds,\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    animate = bumpSvgDefaultProps.animate,\n    motionConfig = bumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, useMemo, useCallback, useState, MouseEvent } from 'react'\nimport { area as d3Area, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { computeSeries } from './compute'\nimport {\n    AreaBumpAreaPoint,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpInterpolation,\n    AreaBumpLabel,\n    AreaBumpLabelData,\n    AreaBumpSerieExtraProps,\n    DefaultAreaBumpDatum,\n} from './types'\n\nconst useAreaBumpSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}) =>\n    useMemo(\n        () => computeSeries<Datum, ExtraProps>({ data, width, height, align, spacing, xPadding }),\n        [data, width, height, align, spacing, xPadding]\n    )\n\nconst useAreaGenerator = (interpolation: AreaBumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Area<AreaBumpAreaPoint>()\n                .x(d => d.x)\n                .y0(d => d.y0)\n                .y1(d => d.y1)\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >\n\n    const getFillOpacity = useSerieDerivedProp<Serie, number>(fillOpacity)\n    const getActiveFillOpacity = useSerieDerivedProp<Serie, number>(activeFillOpacity)\n    const getInactiveFillOpacity = useSerieDerivedProp<Serie, number>(inactiveFillOpacity)\n\n    const getBorderWidth = useSerieDerivedProp<Serie, number>(borderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp<Serie, number>(activeBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp<Serie, number>(inactiveBorderWidth)\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const getBorderOpacity = useSerieDerivedProp<Serie, number>(borderOpacity)\n    const getActiveBorderOpacity = useSerieDerivedProp<Serie, number>(activeBorderOpacity)\n    const getInactiveBorderOpacity = useSerieDerivedProp<Serie, number>(inactiveBorderOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getFillOpacity(serie),\n            borderWidth: getBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getBorderOpacity(serie),\n        }),\n        [getFillOpacity, getBorderWidth, getBorderColor, getBorderOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getActiveFillOpacity(serie),\n            borderWidth: getActiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getActiveBorderOpacity(serie),\n        }),\n        [getActiveFillOpacity, getActiveBorderWidth, getBorderColor, getActiveBorderOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getInactiveFillOpacity(serie),\n            borderWidth: getInactiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getInactiveBorderOpacity(serie),\n        }),\n        [getInactiveFillOpacity, getInactiveBorderWidth, getBorderColor, getInactiveBorderOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n    interpolation,\n    colors,\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n    interpolation: AreaBumpCommonProps<Datum, ExtraProps>['interpolation']\n    colors: AreaBumpCommonProps<Datum, ExtraProps>['colors']\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        heightScale,\n    } = useAreaBumpSeries<Datum, ExtraProps>({\n        data,\n        width,\n        height,\n        align,\n        spacing,\n        xPadding,\n    })\n\n    const areaGenerator = useAreaGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: AreaBumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => {\n                const serieWithColor = {\n                    ...serie,\n                    color: getColor(serie.data),\n                }\n\n                return {\n                    ...serieWithColor,\n                    ...getSerieStyle(serieWithColor),\n                }\n            }),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    return {\n        series,\n        xScale,\n        heightScale,\n        areaGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useAreaBumpSerieHandlers = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useAreaBumpSeriesLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n}): AreaBumpLabelData<Datum, ExtraProps>[] => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        return series.map(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start' ? serie.points[0] : serie.points[serie.points.length - 1]\n\n            return {\n                id: serie.id,\n                label,\n                x: point.x + signedPadding,\n                y: point.y,\n                color: getColor(serie),\n                opacity: serie.fillOpacity,\n                serie,\n                textAnchor,\n            }\n        })\n    }, [getLabel, series, position, padding, getColor])\n}\n","import { scalePoint, scaleLinear } from 'd3-scale'\nimport { castPointScale, castLinearScale, ScalePoint, ScaleLinear } from '@nivo/scales'\nimport {\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}): {\n    series: Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >[]\n    xScale: ScalePoint<Datum['x']>\n    heightScale: ScaleLinear<number>\n} => {\n    const slices = new Map<\n        Datum['x'],\n        {\n            id: Datum['x']\n            total: number\n            x: number\n            values: Map<\n                string,\n                {\n                    serieId: string\n                    value: number\n                    position: number\n                    height: number\n                    beforeHeight: number\n                }\n            >\n        }\n    >()\n\n    let maxSum: number\n    let maxValues: number\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            if (!slices.has(datum.x)) {\n                slices.set(datum.x, {\n                    id: datum.x,\n                    total: 0,\n                    values: new Map(),\n                    x: 0,\n                })\n            }\n\n            const slice = slices.get(datum.x)!\n\n            const total = slice.total + datum.y\n            slice.total = total\n\n            slice.values.set(serie.id, {\n                serieId: serie.id,\n                value: datum.y,\n                position: 0,\n                height: 0,\n                beforeHeight: 0,\n            })\n\n            if (maxSum === undefined || total > maxSum) {\n                maxSum = total\n            }\n            if (maxValues === undefined || slice.values.size > maxValues) {\n                maxValues = slice.values.size\n            }\n        })\n    })\n\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(Array.from(slices.keys())).range([0, width])\n    )\n\n    const heightScale = castLinearScale<number, number>(\n        scaleLinear<number, number>()\n            .domain([0, maxSum!])\n            .range([0, height - maxValues! * spacing])\n    )\n\n    slices.forEach((slice, x) => {\n        slice.x = xScale(x)!\n        const sliceHeight = heightScale(slice.total) + slice.values.size * spacing\n\n        let offset = 0\n        if (align === 'middle') {\n            offset = (height - sliceHeight) / 2\n        } else if (align === 'end') {\n            offset = height - sliceHeight\n        }\n\n        Array.from(slice.values.values())\n            .sort((a, b) => b.value - a.value)\n            .forEach((value, position, all) => {\n                const previousValues = all.filter((_i, pos) => pos < position)\n                const beforeValue = previousValues.reduce((t, v) => t + v.value, 0)\n\n                const sliceValue = slice.values.get(value.serieId)!\n                sliceValue.position = position\n                sliceValue.height = heightScale(value.value)\n                sliceValue.beforeHeight =\n                    heightScale(beforeValue) + offset + spacing * (previousValues.length + 0.5)\n            })\n    })\n\n    const areaPointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series = data.map(serie => {\n        const computedSerie: Omit<\n            AreaBumpComputedSerie<Datum, ExtraProps>,\n            'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n        > = {\n            id: serie.id,\n            data: serie,\n            points: [],\n            areaPoints: [],\n        }\n\n        serie.data.forEach((datum, i) => {\n            const slice = slices.get(datum.x)!\n            const position = slice.values.get(serie.id)!\n\n            const x = slice.x\n            const { beforeHeight, height } = position\n            const y = beforeHeight + height / 2\n            const y0 = beforeHeight\n            const y1 = beforeHeight + height\n\n            computedSerie.points.push({\n                x,\n                y,\n                height,\n                data: { ...datum },\n            })\n            if (i > 0) {\n                computedSerie.areaPoints.push({ x: x - areaPointPadding, y0, y1 })\n            }\n            computedSerie.areaPoints.push({ x, y0, y1 })\n            if (i < serie.data.length - 1) {\n                computedSerie.areaPoints.push({ x: x + areaPointPadding, y0, y1 })\n            }\n        })\n\n        return computedSerie\n    })\n\n    return {\n        series,\n        xScale,\n        heightScale,\n    }\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useAreaBumpSerieHandlers } from './hooks'\nimport {\n    AreaBumpAreaGenerator,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\ninterface AreaProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    areaGenerator: AreaBumpAreaGenerator\n    blendMode: AreaBumpCommonProps<Datum, ExtraProps>['blendMode']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Area = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    serie,\n    areaGenerator,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: AreaProps<Datum, ExtraProps>) => {\n    const handlers = useAreaBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(areaGenerator(serie.areaPoints) || '')\n    const animatedProps = useSpring<{\n        color: string\n        fillOpacity: number\n        stroke: string\n        strokeOpacity: number\n    }>({\n        color: serie.color,\n        fillOpacity: serie.fillOpacity,\n        stroke: serie.borderColor,\n        strokeOpacity: serie.borderOpacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            data-testid={`area.${serie.id}`}\n            d={animatedPath}\n            fill={serie.fill ? serie.fill : animatedProps.color}\n            fillOpacity={animatedProps.fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={serie.borderWidth}\n            strokeOpacity={animatedProps.strokeOpacity}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport {\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpLabel,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { useAreaBumpSeriesLabels } from './hooks'\n\ninterface AreaLabelsProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const AreasLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    getLabel,\n    series,\n    position,\n    padding,\n    color,\n}: AreaLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useAreaBumpSeriesLabels<Datum, ExtraProps>({\n        getLabel,\n        series,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { MotionProps, SvgDefsAndFill } from '@nivo/core'\nimport { AreaBumpCommonProps, AreaBumpComputedSerie, DefaultAreaBumpDatum } from './types'\nimport { AreaTooltip } from './AreaTooltip'\n\nconst commonDefaultProps: Omit<\n    AreaBumpCommonProps<DefaultAreaBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'renderWrapper'\n> = {\n    align: 'middle',\n\n    layers: ['grid', 'axes', 'labels', 'areas'],\n\n    interpolation: 'smooth',\n    spacing: 0,\n    xPadding: 0.6,\n\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n    fillOpacity: 0.8,\n    activeFillOpacity: 1,\n    inactiveFillOpacity: 0.15,\n    borderWidth: 1,\n    activeBorderWidth: 1,\n    inactiveBorderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.4]] },\n    borderOpacity: 1,\n    activeBorderOpacity: 1,\n    inactiveBorderOpacity: 0,\n\n    startLabel: false,\n    startLabelPadding: 12,\n    startLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    endLabel: true,\n    endLabelPadding: 12,\n    endLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    enableGridX: true,\n    axisTop: {},\n    axisBottom: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: AreaTooltip,\n\n    role: 'img',\n}\n\nexport const areaBumpSvgDefaultProps: typeof commonDefaultProps &\n    SvgDefsAndFill<AreaBumpComputedSerie<DefaultAreaBumpDatum, Record<string, unknown>>> & {\n        animate: boolean\n        motionConfig: MotionProps['motionConfig']\n    } = {\n    ...commonDefaultProps,\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { AreaBumpDatum, AreaBumpComputedSerie, AreaBumpSerieExtraProps } from './types'\n\ninterface AreaTooltipProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const AreaTooltip = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n}: AreaTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n)\n","import { Fragment, useMemo, ReactNode, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    SvgWrapper,\n    Container,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { useAreaBump } from './hooks'\nimport { Area } from './Area'\nimport { AreasLabels } from './AreasLabels'\nimport {\n    AreaBumpSvgProps,\n    AreaBumpDatum,\n    DefaultAreaBumpDatum,\n    AreaBumpLayerId,\n    AreaBumpCustomLayerProps,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { areaBumpSvgDefaultProps } from './defaults'\n\ntype InnerAreaBumpProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> = Omit<\n    AreaBumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerAreaBump = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    data,\n    align = areaBumpSvgDefaultProps.align,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = areaBumpSvgDefaultProps.layers as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['layers']\n    >,\n\n    interpolation = areaBumpSvgDefaultProps.interpolation,\n    spacing = areaBumpSvgDefaultProps.spacing,\n    xPadding = areaBumpSvgDefaultProps.xPadding,\n\n    colors = areaBumpSvgDefaultProps.colors as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['colors']\n    >,\n    blendMode = areaBumpSvgDefaultProps.blendMode,\n    fillOpacity = areaBumpSvgDefaultProps.fillOpacity,\n    activeFillOpacity = areaBumpSvgDefaultProps.activeFillOpacity,\n    inactiveFillOpacity = areaBumpSvgDefaultProps.inactiveFillOpacity,\n    defs = areaBumpSvgDefaultProps.defs,\n    fill = areaBumpSvgDefaultProps.fill as NonNullable<AreaBumpSvgProps<Datum, ExtraProps>['fill']>,\n    borderWidth = areaBumpSvgDefaultProps.borderWidth,\n    activeBorderWidth = areaBumpSvgDefaultProps.activeBorderWidth,\n    inactiveBorderWidth = areaBumpSvgDefaultProps.inactiveBorderWidth,\n    borderColor = areaBumpSvgDefaultProps.borderColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['borderColor']\n    >,\n    borderOpacity = areaBumpSvgDefaultProps.borderOpacity,\n    activeBorderOpacity = areaBumpSvgDefaultProps.activeBorderOpacity,\n    inactiveBorderOpacity = areaBumpSvgDefaultProps.inactiveBorderOpacity,\n\n    startLabel = areaBumpSvgDefaultProps.startLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = areaBumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = areaBumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = areaBumpSvgDefaultProps.endLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = areaBumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = areaBumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    enableGridX = areaBumpSvgDefaultProps.enableGridX,\n    axisTop = areaBumpSvgDefaultProps.axisTop,\n    axisBottom = areaBumpSvgDefaultProps.axisBottom,\n\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = areaBumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = areaBumpSvgDefaultProps.tooltip as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = areaBumpSvgDefaultProps.role,\n}: InnerAreaBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, xScale, heightScale, areaGenerator, setActiveSerieIds } = useAreaBump<\n        Datum,\n        ExtraProps\n    >({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        align,\n        spacing,\n        xPadding,\n        interpolation,\n        colors,\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, series, fill, { targetKey: 'fill' }),\n        [defs, series, fill]\n    )\n\n    const layerById: Record<AreaBumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        areas: null,\n    }\n\n    if (layers.includes('grid') && enableGridX) {\n        layerById.grid = <Grid key=\"grid\" width={innerWidth} height={innerHeight} xScale={xScale} />\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={heightScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                bottom={axisBottom}\n            />\n        )\n    }\n\n    if (layers.includes('areas')) {\n        layerById.areas = (\n            <Fragment key=\"areas\">\n                {series.map(serie => (\n                    <Area<Datum, ExtraProps>\n                        key={serie.id}\n                        areaGenerator={areaGenerator}\n                        serie={serie}\n                        blendMode={blendMode}\n                        isInteractive={isInteractive}\n                        setActiveSerieIds={setActiveSerieIds}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"labels\">\n                {startLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={startLabel}\n                        series={series}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={endLabel}\n                        series={series}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: AreaBumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            series,\n            xScale,\n            areaGenerator,\n        }),\n        [innerWidth, innerHeight, outerWidth, outerHeight, series, xScale, areaGenerator]\n    )\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const AreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    animate = areaBumpSvgDefaultProps.animate,\n    motionConfig = areaBumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: AreaBumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerAreaBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport {\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n    AreaBumpSvgProps,\n    DefaultAreaBumpDatum,\n} from './types'\nimport { AreaBump } from './AreaBump'\n\nexport const ResponsiveAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>(\n    props: Omit<AreaBumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <AreaBump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { BumpDatum, BumpResponsiveProps, BumpSerieExtraProps, DefaultBumpDatum } from './types'\nimport { Bump } from './Bump'\n\nexport const ResponsiveBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>(\n    props: BumpResponsiveProps<Datum, ExtraProps>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <Bump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { FunctionComponent, MouseEvent } from 'react'\nimport { Line as D3Line } from 'd3-shape'\nimport { Theme, Box, Dimensions, MotionProps } from '@nivo/core'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { AxisProps } from '@nivo/axes'\nimport { ScalePoint } from '@nivo/scales'\nimport { PointProps } from './Point'\n\nexport interface BumpDatum {\n    x: number | string\n    y: number | null\n}\n\nexport interface DefaultBumpDatum {\n    x: string\n    y: number\n}\n\nexport type BumpSerieExtraProps = Record<string, unknown>\n\nexport type BumpSerie<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = ExtraProps & {\n    id: string\n    data: Datum[]\n}\n\nexport interface BumpSeriePoint<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    id: string\n    serie: BumpSerie<Datum, ExtraProps>\n    data: Datum\n    x: number\n    y: number | null\n}\n\nexport interface BumpPoint<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    id: string\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    data: Datum\n    x: number\n    y: number | null\n    isActive: boolean\n    isInactive: boolean\n    size: number\n    color: string\n    borderWidth: number\n    borderColor: string\n}\nexport type BumpPointComponent<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = FunctionComponent<PointProps<Datum, ExtraProps>>\n\nexport interface BumpComputedSerie<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> {\n    id: string\n    data: BumpSerie<Datum, ExtraProps>\n    points: BumpSeriePoint<Datum, ExtraProps>[]\n    linePoints: [number, number | null][]\n    color: string\n    opacity: number\n    lineWidth: number\n}\n\nexport type BumpDataProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = {\n    data: BumpSerie<Datum, ExtraProps>[]\n}\n\nexport type BumpInterpolation = 'smooth' | 'linear'\n\nexport type BumpLabel<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> =\n    | ((serie: BumpSerie<Datum, ExtraProps>) => string)\n    | boolean\nexport interface BumpLabelData<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    id: string\n    label: string\n    x: number\n    y: number\n    color: string\n    opacity: number\n    textAnchor: 'start' | 'end'\n}\n\nexport type BumpSerieMouseHandler<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = (serie: BumpComputedSerie<Datum, ExtraProps>, event: MouseEvent<SVGPathElement>) => void\nexport type BumpPointMouseHandler<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = (point: BumpPoint<Datum, ExtraProps>, event: MouseEvent) => void\n\nexport type BumpLayerId = 'grid' | 'axes' | 'labels' | 'lines' | 'points' | 'mesh'\nexport interface BumpCustomLayerProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> {\n    innerHeight: number\n    innerWidth: number\n    lineGenerator: D3Line<[number, number | null]>\n    points: BumpPoint<Datum, ExtraProps>[]\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    xScale: ScalePoint<Datum['x']>\n    yScale: ScalePoint<number>\n    activeSerieIds: string[]\n    activePointIds: string[]\n    setActiveSerieIds: (serieIds: string[]) => void\n    setActivePointIds: (pointIds: string[]) => void\n}\nexport type BumpCustomLayer<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = FunctionComponent<BumpCustomLayerProps<Datum, ExtraProps>>\nexport type BumpLayer<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> =\n    | BumpLayerId\n    | BumpCustomLayer<Datum, ExtraProps>\n\nexport type BumpLineTooltip<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = FunctionComponent<{\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}>\n\nexport type BumpPointTooltip<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = FunctionComponent<{\n    point: BumpPoint<Datum, ExtraProps>\n}>\n\nexport interface BumpBaseCommonProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> {\n    margin: Box\n\n    interpolation: BumpInterpolation\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n\n    theme: Theme\n    colors: OrdinalColorScaleConfig<BumpSerie<Datum, ExtraProps>>\n    lineWidth: number\n    activeLineWidth: number\n    inactiveLineWidth: number\n    opacity: number\n    activeOpacity: number\n    inactiveOpacity: number\n\n    startLabel: BumpLabel<Datum, ExtraProps>\n    startLabelPadding: number\n    startLabelTextColor: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    endLabel: BumpLabel<Datum, ExtraProps>\n    endLabelPadding: number\n    endLabelTextColor: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n\n    pointSize: number\n    activePointSize: number\n    inactivePointSize: number\n    pointColor: InheritedColorConfig<Omit<BumpPoint<Datum, ExtraProps>, 'color' | 'borderColor'>>\n    pointBorderWidth: number\n    activePointBorderWidth: number\n    inactivePointBorderWidth: number\n    pointBorderColor: InheritedColorConfig<Omit<BumpPoint<Datum, ExtraProps>, 'borderColor'>>\n\n    enableGridX: boolean\n    enableGridY: boolean\n    axisBottom: AxisProps | null\n    axisLeft: AxisProps | null\n    axisRight: AxisProps | null\n    axisTop: AxisProps | null\n\n    isInteractive: boolean\n    defaultActiveSerieIds: string[]\n    lineTooltip: BumpLineTooltip<Datum, ExtraProps>\n    pointTooltip: BumpPointTooltip<Datum, ExtraProps>\n    role: string\n    layers: BumpLayer<Datum, ExtraProps>[]\n    renderWrapper: boolean\n    useMesh: boolean\n    debugMesh: boolean\n}\n\nexport const isBumpPoint = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>(\n    point: BumpComputedSerie<Datum, ExtraProps> | BumpPoint<Datum, ExtraProps>\n): point is BumpPoint<Datum, ExtraProps> => {\n    return 'serie' in point\n}\n\nexport const isComputedBumpSerie = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>(\n    serie: BumpComputedSerie<Datum, ExtraProps> | BumpPoint<Datum, ExtraProps>\n): serie is BumpComputedSerie<Datum, ExtraProps> => {\n    return 'points' in serie\n}\n\ninterface BumpMeshCommonProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>\n    extends BumpBaseCommonProps<Datum, ExtraProps> {\n    useMesh: true\n    onMouseEnter?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpPointMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpPointMouseHandler<Datum, ExtraProps>\n    onClick?: BumpPointMouseHandler<Datum, ExtraProps>\n}\n\ninterface BumpSerieCommonProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>\n    extends BumpBaseCommonProps<Datum, ExtraProps> {\n    useMesh: false\n    onMouseEnter?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseMove?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onMouseLeave?: BumpSerieMouseHandler<Datum, ExtraProps>\n    onClick?: BumpSerieMouseHandler<Datum, ExtraProps>\n}\n\nexport type BumpCommonProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> =\n    | BumpMeshCommonProps<Datum, ExtraProps>\n    | BumpSerieCommonProps<Datum, ExtraProps>\n\nexport type BumpResponsiveProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = BumpCommonProps<Datum, ExtraProps> &\n    BumpDataProps<Datum, ExtraProps> & {\n        pointComponent?: BumpPointComponent<Datum, ExtraProps>\n    } & MotionProps\n\nexport type BumpSvgProps<\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n> = BumpResponsiveProps<Datum, ExtraProps> & Dimensions\n"],"names":["useSerieDerivedProp","instruction","useMemo","useBump","_ref3","width","height","data","interpolation","xPadding","xOuterPadding","yOuterPadding","lineWidth","activeLineWidth","inactiveLineWidth","colors","opacity","activeOpacity","inactiveOpacity","pointSize","activePointSize","inactivePointSize","pointColor","pointBorderWidth","activePointBorderWidth","inactivePointBorderWidth","pointBorderColor","isInteractive","defaultActiveSerieIds","_useState","useState","activeSerieIds","setActiveSerieIds","_useState2","activePointIds","setActivePointIds","_useMemo","_ref","xValuesSet","Set","yValuesSet","forEach","serie","datum","add","x","y","xValues","Array","from","xScale","castPointScale","scalePoint","domain","range","padding","yValues","sort","a","b","yScale","linePointPadding","step","Math","min","series","map","rawSerie","id","points","linePoints","i","point","push","length","filter","computeSeries","rawSeries","lineGenerator","d3Line","line","curve","curveBasis","curveLinear","defined","d","useLineGenerator","getColor","useOrdinalColorScale","getSerieStyle","getLineWidth","getActiveLineWidth","getInactiveLineWidth","getOpacity","getActiveOpacity","getInactiveOpacity","getNormalStyle","useCallback","getActiveStyle","getInactiveStyle","includes","useSerieStyle","_extends","color","theme","useTheme","getPointColor","useInheritedColor","getPointBorderColor","getPointStyle","_ref2","getSize","getActiveSize","getInactiveSize","getBorderWidth","getActiveBorderWidth","getInactiveBorderWidth","size","borderWidth","usePointStyle","pts","rawPoint","isActive","isInactive","borderColor","useBumpSerieHandlers","_ref4","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","lineTooltip","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","undefined","useBumpSeriesLabels","_ref6","position","getLabel","textAnchor","signedPadding","labels","label","pointStyle","pointerEvents","bumpSvgDefaultProps","layers","scheme","startLabel","startLabelPadding","startLabelTextColor","endLabel","endLabelPadding","endLabelTextColor","modifiers","enableGridX","enableGridY","axisTop","axisBottom","axisLeft","_jsx","BasicTooltip","enableChip","pointTooltip","memo","_jsxs","jsxs","children","jsx","useMesh","debugMesh","role","pointComponent","_useMotionConfig","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","radius","immediate","animated","circle","cx","cy","r","to","v","max","fill","strokeWidth","stroke","style","motionConfig","Line","yStep","handlers","linePath","animatedPath","useAnimatedPath","_Fragment","path","strokeLinecap","strokeOpacity","LinesLabels","springs","useSprings","index","text","dominantBaseline","Mesh","margin","debug","showTooltipAt","_point$y","left","top","_point$y2","BaseMesh","nodes","InnerBump","partialMargin","_ref$layers","_ref$interpolation","_ref$xPadding","_ref$xOuterPadding","_ref$yOuterPadding","_ref$colors","_ref$lineWidth","_ref$activeLineWidth","_ref$inactiveLineWidt","_ref$opacity","_ref$activeOpacity","_ref$inactiveOpacity","_ref$startLabel","_ref$startLabelPaddin","_ref$startLabelTextCo","_ref$endLabel","_ref$endLabelPadding","_ref$endLabelTextColo","_ref$pointComponent","_ref$pointSize","_ref$activePointSize","_ref$inactivePointSiz","_ref$pointColor","_ref$pointBorderWidth","_ref$activePointBorde","_ref$inactivePointBor","_ref$pointBorderColor","_ref$enableGridX","_ref$enableGridY","_ref$axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$isInteractive","_ref$defaultActiveSer","_ref$useMesh","_ref$debugMesh","_ref$lineTooltip","_ref$pointTooltip","_ref$role","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useBump","layerById","grid","axes","lines","mesh","Grid","Axes","right","bottom","Fragment","key","customLayerProps","SvgWrapper","layer","_layerById$layer","Bump","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","useAreaBumpSeries","align","spacing","maxSum","maxValues","slices","Map","has","set","total","values","slice","get","serieId","value","beforeHeight","keys","heightScale","castLinearScale","scaleLinear","sliceHeight","offset","all","previousValues","_i","pos","beforeValue","reduce","t","sliceValue","areaPointPadding","computedSerie","areaPoints","y0","y1","useAreaBump","fillOpacity","activeFillOpacity","inactiveFillOpacity","activeBorderWidth","inactiveBorderWidth","borderOpacity","activeBorderOpacity","inactiveBorderOpacity","_useAreaBumpSeries","areaGenerator","d3Area","useAreaGenerator","getFillOpacity","getActiveFillOpacity","getInactiveFillOpacity","getBorderColor","getBorderOpacity","getActiveBorderOpacity","getInactiveBorderOpacity","serieWithColor","useAreaBumpSerieHandlers","useAreaBumpSeriesLabels","_ref5","Area","blendMode","mixBlendMode","AreasLabels","areaBumpSvgDefaultProps","defs","InnerAreaBump","_ref$align","_ref$spacing","_ref$blendMode","_ref$fillOpacity","_ref$activeFillOpacit","_ref$inactiveFillOpac","_ref$defs","_ref$fill","_ref$borderWidth","_ref$activeBorderWidt","_ref$inactiveBorderWi","_ref$borderColor","_ref$borderOpacity","_ref$activeBorderOpac","_ref$inactiveBorderOp","_ref$tooltip","_useAreaBump","boundDefs","bindDefs","targetKey","areas","AreaBump","props","ResponsiveWrapper","_useTooltip2"],"mappings":"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"}