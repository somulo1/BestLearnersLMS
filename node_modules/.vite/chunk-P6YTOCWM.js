import {
  require_isNumber
} from "./chunk-6YWBRFZ4.js";
import {
  require_baseEach,
  require_baseIteratee
} from "./chunk-DZU3R4ZD.js";
import {
  require_omit
} from "./chunk-3T4KNB5M.js";
import {
  Fr,
  Ht,
  Jt,
  Kt,
  Qt,
  Ur,
  require_jsx_runtime,
  zt
} from "./chunk-CIEVK6OE.js";
import {
  AnimatedObject,
  FluidValue,
  addFluidObserver,
  callFluidObservers,
  colors2,
  createHost,
  createStringInterpolator2,
  each,
  eachProp,
  getFluidValue,
  globals_exports,
  hasFluidValue,
  is,
  removeFluidObserver,
  toArray,
  useSpring
} from "./chunk-UROOLUEL.js";
import {
  require_arrayFilter,
  require_isArray
} from "./chunk-B7PIYN4Z.js";
import {
  require_react_dom
} from "./chunk-2J4CPGJC.js";
import {
  require_react
} from "./chunk-3HGGCXHU.js";
import {
  __commonJS,
  __objRest,
  __toModule
} from "./chunk-AXQKKFRM.js";

// node_modules/lodash/_baseFilter.js
var require_baseFilter = __commonJS({
  "node_modules/lodash/_baseFilter.js"(exports, module) {
    var baseEach = require_baseEach();
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection2) {
        if (predicate(value, index, collection2)) {
          result.push(value);
        }
      });
      return result;
    }
    module.exports = baseFilter;
  }
});

// node_modules/lodash/filter.js
var require_filter = __commonJS({
  "node_modules/lodash/filter.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var baseFilter = require_baseFilter();
    var baseIteratee = require_baseIteratee();
    var isArray = require_isArray();
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, baseIteratee(predicate, 3));
    }
    module.exports = filter;
  }
});

// node_modules/@nivo/annotations/dist/nivo-annotations.es.js
var import_react = __toModule(require_react());
var import_filter = __toModule(require_filter());
var import_isNumber = __toModule(require_isNumber());
var import_omit = __toModule(require_omit());

// node_modules/@nivo/annotations/node_modules/@react-spring/web/dist/react-spring_web.legacy-esm.js
var import_react_dom = __toModule(require_react_dom());
var isCustomPropRE = /^--/;
function dangerousStyleValue(name, value) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const _a = props, {
    className,
    style,
    children,
    scrollTop,
    scrollLeft,
    viewBox
  } = _a, attributes = __objRest(_a, [
    "className",
    "style",
    "children",
    "scrollTop",
    "scrollLeft",
    "viewBox"
  ]);
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, (n2) => "-" + n2.toLowerCase())));
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (const name in style) {
    if (style.hasOwnProperty(name)) {
      const value = dangerousStyleValue(name, style[name]);
      if (isCustomPropRE.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }
  names.forEach((name, i2) => {
    instance.setAttribute(name, values[i2]);
  });
  if (className !== void 0) {
    instance.className = className;
  }
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
  if (viewBox !== void 0) {
    instance.setAttribute("viewBox", viewBox);
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix, key) => prefix + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes.forEach((prefix) => acc[prefixKey(prefix, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value;
var isValueIdentity = (value, id) => is.arr(value) ? value.every((v2) => isValueIdentity(v2, id)) : is.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor(_a) {
    var _b = _a, { x: x2, y, z: z2 } = _b, style = __objRest(_b, ["x", "y", "z"]);
    const inputs = [];
    const transforms = [];
    if (x2 || y || z2) {
      inputs.push([x2 || 0, y || 0, z2 || 0]);
      transforms.push((xyz) => [
        `translate3d(${xyz.map((v2) => addUnit(v2, "px")).join(",")})`,
        isValueIdentity(xyz, 0)
      ]);
    }
    eachProp(style, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms.test(key)) {
        delete style[key];
        if (is.und(value))
          return;
        const unit = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
        inputs.push(toArray(value));
        transforms.push(key === "rotate3d" ? ([x22, y2, z22, deg]) => [
          `rotate3d(${x22},${y2},${z22},${addUnit(deg, unit)})`,
          isValueIdentity(deg, 0)
        ] : (input) => [
          `${key}(${input.map((v2) => addUnit(v2, unit)).join(",")})`,
          isValueIdentity(input, key.startsWith("scale") ? 1 : 0)
        ]);
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this.inputs = inputs;
    this.transforms = transforms;
    this._value = null;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity = true;
    each(this.inputs, (input, i2) => {
      const arg1 = getFluidValue(input[0]);
      const [t2, id] = this.transforms[i2](is.arr(arg1) ? arg1 : input.map(getFluidValue));
      transform += " " + t2;
      identity = identity && id;
    });
    return identity ? "none" : transform;
  }
  observerAdded(count) {
    if (count == 1)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && addFluidObserver(value, this)));
  }
  observerRemoved(count) {
    if (count == 0)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && removeFluidObserver(value, this)));
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
globals_exports.assign({
  batchedUpdates: import_react_dom.unstable_batchedUpdates,
  createStringInterpolator: createStringInterpolator2,
  colors: colors2
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  getComponentProps: (_a) => {
    var _b = _a, { scrollTop, scrollLeft } = _b, props = __objRest(_b, ["scrollTop", "scrollLeft"]);
    return props;
  }
});
var animated = host.animated;

// node_modules/@nivo/annotations/dist/nivo-annotations.es.js
var import_jsx_runtime = __toModule(require_jsx_runtime());
function g() {
  return g = Object.assign ? Object.assign.bind() : function(t2) {
    for (var n2 = 1; n2 < arguments.length; n2++) {
      var i2 = arguments[n2];
      for (var o2 in i2)
        Object.prototype.hasOwnProperty.call(i2, o2) && (t2[o2] = i2[o2]);
    }
    return t2;
  }, g.apply(this, arguments);
}
var k = { dotSize: 4, noteWidth: 120, noteTextOffset: 8, animate: true };
var W = function(n2) {
  var i2 = typeof n2;
  return (0, import_react.isValidElement)(n2) || i2 === "string" || i2 === "function" || i2 === "object";
};
var v = function(t2) {
  var n2 = typeof t2;
  return n2 === "string" || n2 === "function";
};
var b = function(t2) {
  return t2.type === "circle";
};
var w = function(t2) {
  return t2.type === "dot";
};
var z = function(t2) {
  return t2.type === "rect";
};
var P = function(t2) {
  var n2 = t2.data, i2 = t2.annotations, e2 = t2.getPosition, r = t2.getDimensions;
  return i2.reduce(function(t3, i3) {
    var s = i3.offset || 0;
    return [].concat(t3, (0, import_filter.default)(n2, i3.match).map(function(t4) {
      var n3 = e2(t4), o2 = r(t4);
      return (b(i3) || z(i3)) && (o2.size = o2.size + 2 * s, o2.width = o2.width + 2 * s, o2.height = o2.height + 2 * s), g({}, (0, import_omit.default)(i3, ["match", "offset"]), n3, o2, { size: i3.size || o2.size, datum: t4 });
    }));
  }, []);
};
var C = function(t2, n2, i2, o2) {
  var e2 = Math.atan2(o2 - n2, i2 - t2);
  return Qt(Kt(e2));
};
var O = function(t2) {
  var n2, i2, o2 = t2.x, a2 = t2.y, r = t2.noteX, s = t2.noteY, h = t2.noteWidth, d = h === void 0 ? k.noteWidth : h, c = t2.noteTextOffset, f = c === void 0 ? k.noteTextOffset : c;
  if ((0, import_isNumber.default)(r))
    n2 = o2 + r;
  else {
    if (r.abs === void 0)
      throw new Error("noteX should be either a number or an object containing an 'abs' property");
    n2 = r.abs;
  }
  if ((0, import_isNumber.default)(s))
    i2 = a2 + s;
  else {
    if (s.abs === void 0)
      throw new Error("noteY should be either a number or an object containing an 'abs' property");
    i2 = s.abs;
  }
  var y = o2, x2 = a2, m2 = C(o2, a2, n2, i2);
  if (b(t2)) {
    var p2 = Jt(Ht(m2), t2.size / 2);
    y += p2.x, x2 += p2.y;
  }
  if (z(t2)) {
    var g2 = Math.round((m2 + 90) / 45) % 8;
    g2 === 0 && (x2 -= t2.height / 2), g2 === 1 && (y += t2.width / 2, x2 -= t2.height / 2), g2 === 2 && (y += t2.width / 2), g2 === 3 && (y += t2.width / 2, x2 += t2.height / 2), g2 === 4 && (x2 += t2.height / 2), g2 === 5 && (y -= t2.width / 2, x2 += t2.height / 2), g2 === 6 && (y -= t2.width / 2), g2 === 7 && (y -= t2.width / 2, x2 -= t2.height / 2);
  }
  var W2 = n2, v2 = n2;
  return (m2 + 90) % 360 > 180 ? (W2 -= d, v2 -= d) : v2 += d, { points: [[y, x2], [n2, i2], [v2, i2]], text: [W2, i2 - f], angle: m2 + 90 };
};
var S = function(t2) {
  var i2 = t2.data, o2 = t2.annotations, e2 = t2.getPosition, a2 = t2.getDimensions;
  return (0, import_react.useMemo)(function() {
    return P({ data: i2, annotations: o2, getPosition: e2, getDimensions: a2 });
  }, [i2, o2, e2, a2]);
};
var j = function(t2) {
  var i2 = t2.annotations;
  return (0, import_react.useMemo)(function() {
    return i2.map(function(t3) {
      return g({}, t3, { computed: O(g({}, t3)) });
    });
  }, [i2]);
};
var M = function(t2) {
  return (0, import_react.useMemo)(function() {
    return O(t2);
  }, [t2]);
};
var T = function(t2) {
  var n2 = t2.datum, o2 = t2.x, e2 = t2.y, r = t2.note, s = zt(), l = Ur(), u = l.animate, c = l.config, k2 = useSpring({ x: o2, y: e2, config: c, immediate: !u });
  return typeof r == "function" ? (0, import_react.createElement)(r, { x: o2, y: e2, datum: n2 }) : (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [s.annotations.text.outlineWidth > 0 && (0, import_jsx_runtime.jsx)(animated.text, { x: k2.x, y: k2.y, style: g({}, s.annotations.text, { strokeLinejoin: "round", strokeWidth: 2 * s.annotations.text.outlineWidth, stroke: s.annotations.text.outlineColor }), children: r }), (0, import_jsx_runtime.jsx)(animated.text, { x: k2.x, y: k2.y, style: (0, import_omit.default)(s.annotations.text, ["outlineWidth", "outlineColor"]), children: r })] });
};
var E = function(t2) {
  var i2 = t2.points, o2 = t2.isOutline, e2 = o2 !== void 0 && o2, a2 = zt(), r = (0, import_react.useMemo)(function() {
    var t3 = i2[0];
    return i2.slice(1).reduce(function(t4, n2) {
      return t4 + " L" + n2[0] + "," + n2[1];
    }, "M" + t3[0] + "," + t3[1]);
  }, [i2]), s = Fr(r);
  if (e2 && a2.annotations.link.outlineWidth <= 0)
    return null;
  var l = g({}, a2.annotations.link);
  return e2 && (l.strokeLinecap = "square", l.strokeWidth = a2.annotations.link.strokeWidth + 2 * a2.annotations.link.outlineWidth, l.stroke = a2.annotations.link.outlineColor, l.opacity = a2.annotations.link.outlineOpacity), (0, import_jsx_runtime.jsx)(animated.path, { fill: "none", d: s, style: l });
};
var I = function(t2) {
  var n2 = t2.x, i2 = t2.y, o2 = t2.size, e2 = zt(), a2 = Ur(), r = a2.animate, s = a2.config, l = useSpring({ x: n2, y: i2, radius: o2 / 2, config: s, immediate: !r });
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [e2.annotations.outline.outlineWidth > 0 && (0, import_jsx_runtime.jsx)(animated.circle, { cx: l.x, cy: l.y, r: l.radius, style: g({}, e2.annotations.outline, { fill: "none", strokeWidth: e2.annotations.outline.strokeWidth + 2 * e2.annotations.outline.outlineWidth, stroke: e2.annotations.outline.outlineColor, opacity: e2.annotations.outline.outlineOpacity }) }), (0, import_jsx_runtime.jsx)(animated.circle, { cx: l.x, cy: l.y, r: l.radius, style: e2.annotations.outline })] });
};
var D = function(t2) {
  var n2 = t2.x, i2 = t2.y, o2 = t2.size, e2 = o2 === void 0 ? k.dotSize : o2, a2 = zt(), r = Ur(), s = r.animate, l = r.config, u = useSpring({ x: n2, y: i2, radius: e2 / 2, config: l, immediate: !s });
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [a2.annotations.outline.outlineWidth > 0 && (0, import_jsx_runtime.jsx)(animated.circle, { cx: u.x, cy: u.y, r: u.radius, style: g({}, a2.annotations.outline, { fill: "none", strokeWidth: 2 * a2.annotations.outline.outlineWidth, stroke: a2.annotations.outline.outlineColor, opacity: a2.annotations.outline.outlineOpacity }) }), (0, import_jsx_runtime.jsx)(animated.circle, { cx: u.x, cy: u.y, r: u.radius, style: a2.annotations.symbol })] });
};
var L = function(t2) {
  var n2 = t2.x, i2 = t2.y, o2 = t2.width, e2 = t2.height, a2 = t2.borderRadius, r = a2 === void 0 ? 6 : a2, s = zt(), l = Ur(), u = l.animate, c = l.config, k2 = useSpring({ x: n2 - o2 / 2, y: i2 - e2 / 2, width: o2, height: e2, config: c, immediate: !u });
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [s.annotations.outline.outlineWidth > 0 && (0, import_jsx_runtime.jsx)(animated.rect, { x: k2.x, y: k2.y, rx: r, ry: r, width: k2.width, height: k2.height, style: g({}, s.annotations.outline, { fill: "none", strokeWidth: s.annotations.outline.strokeWidth + 2 * s.annotations.outline.outlineWidth, stroke: s.annotations.outline.outlineColor, opacity: s.annotations.outline.outlineOpacity }) }), (0, import_jsx_runtime.jsx)(animated.rect, { x: k2.x, y: k2.y, rx: r, ry: r, width: k2.width, height: k2.height, style: s.annotations.outline })] });
};
var R = function(t2) {
  var n2 = t2.datum, i2 = t2.x, o2 = t2.y, e2 = t2.note, a2 = M(t2);
  if (!W(e2))
    throw new Error("note should be a valid react element");
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)(E, { points: a2.points, isOutline: true }), b(t2) && (0, import_jsx_runtime.jsx)(I, { x: i2, y: o2, size: t2.size }), w(t2) && (0, import_jsx_runtime.jsx)(D, { x: i2, y: o2, size: t2.size }), z(t2) && (0, import_jsx_runtime.jsx)(L, { x: i2, y: o2, width: t2.width, height: t2.height, borderRadius: t2.borderRadius }), (0, import_jsx_runtime.jsx)(E, { points: a2.points }), (0, import_jsx_runtime.jsx)(T, { datum: n2, x: a2.text[0], y: a2.text[1], note: e2 })] });
};
var q = function(t2, n2) {
  n2.forEach(function(n3, i2) {
    var o2 = n3[0], e2 = n3[1];
    i2 === 0 ? t2.moveTo(o2, e2) : t2.lineTo(o2, e2);
  });
};
var J = function(t2, n2) {
  var i2 = n2.annotations, o2 = n2.theme;
  i2.length !== 0 && (t2.save(), i2.forEach(function(n3) {
    if (!v(n3.note))
      throw new Error("note is invalid for canvas implementation");
    o2.annotations.link.outlineWidth > 0 && (t2.lineCap = "square", t2.strokeStyle = o2.annotations.link.outlineColor, t2.lineWidth = o2.annotations.link.strokeWidth + 2 * o2.annotations.link.outlineWidth, t2.beginPath(), q(t2, n3.computed.points), t2.stroke(), t2.lineCap = "butt"), b(n3) && o2.annotations.outline.outlineWidth > 0 && (t2.strokeStyle = o2.annotations.outline.outlineColor, t2.lineWidth = o2.annotations.outline.strokeWidth + 2 * o2.annotations.outline.outlineWidth, t2.beginPath(), t2.arc(n3.x, n3.y, n3.size / 2, 0, 2 * Math.PI), t2.stroke()), w(n3) && o2.annotations.symbol.outlineWidth > 0 && (t2.strokeStyle = o2.annotations.symbol.outlineColor, t2.lineWidth = 2 * o2.annotations.symbol.outlineWidth, t2.beginPath(), t2.arc(n3.x, n3.y, n3.size / 2, 0, 2 * Math.PI), t2.stroke()), z(n3) && o2.annotations.outline.outlineWidth > 0 && (t2.strokeStyle = o2.annotations.outline.outlineColor, t2.lineWidth = o2.annotations.outline.strokeWidth + 2 * o2.annotations.outline.outlineWidth, t2.beginPath(), t2.rect(n3.x - n3.width / 2, n3.y - n3.height / 2, n3.width, n3.height), t2.stroke()), t2.strokeStyle = o2.annotations.link.stroke, t2.lineWidth = o2.annotations.link.strokeWidth, t2.beginPath(), q(t2, n3.computed.points), t2.stroke(), b(n3) && (t2.strokeStyle = o2.annotations.outline.stroke, t2.lineWidth = o2.annotations.outline.strokeWidth, t2.beginPath(), t2.arc(n3.x, n3.y, n3.size / 2, 0, 2 * Math.PI), t2.stroke()), w(n3) && (t2.fillStyle = o2.annotations.symbol.fill, t2.beginPath(), t2.arc(n3.x, n3.y, n3.size / 2, 0, 2 * Math.PI), t2.fill()), z(n3) && (t2.strokeStyle = o2.annotations.outline.stroke, t2.lineWidth = o2.annotations.outline.strokeWidth, t2.beginPath(), t2.rect(n3.x - n3.width / 2, n3.y - n3.height / 2, n3.width, n3.height), t2.stroke()), typeof n3.note == "function" ? n3.note(t2, { datum: n3.datum, x: n3.computed.text[0], y: n3.computed.text[1], theme: o2 }) : (t2.font = o2.annotations.text.fontSize + "px " + o2.annotations.text.fontFamily, t2.textAlign = "left", t2.textBaseline = "alphabetic", t2.fillStyle = o2.annotations.text.fill, t2.strokeStyle = o2.annotations.text.outlineColor, t2.lineWidth = 2 * o2.annotations.text.outlineWidth, o2.annotations.text.outlineWidth > 0 && (t2.lineJoin = "round", t2.strokeText(n3.note, n3.computed.text[0], n3.computed.text[1]), t2.lineJoin = "miter"), t2.fillText(n3.note, n3.computed.text[0], n3.computed.text[1]));
  }), t2.restore());
};

export {
  S,
  j,
  R,
  J
};
//# sourceMappingURL=chunk-P6YTOCWM.js.map
