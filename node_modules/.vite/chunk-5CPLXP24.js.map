{
  "version": 3,
  "sources": ["../@nivo/legends/src/svg/symbols/SymbolCircle.tsx", "../@nivo/legends/src/svg/symbols/SymbolDiamond.tsx", "../@nivo/legends/src/svg/symbols/SymbolSquare.tsx", "../@nivo/legends/src/svg/symbols/SymbolTriangle.tsx", "../@nivo/legends/src/defaults.ts", "../@nivo/legends/src/compute.ts", "../@nivo/legends/src/svg/ContinuousColorsLegendSvg.tsx", "../@nivo/legends/src/svg/AnchoredContinuousColorsLegendSvg.tsx", "../@nivo/legends/src/svg/LegendSvgItem.tsx", "../@nivo/legends/src/svg/LegendSvg.tsx", "../@nivo/legends/src/svg/BoxLegendSvg.tsx", "../@nivo/legends/src/canvas.ts", "../@nivo/legends/src/hooks.ts"],
  "sourcesContent": ["import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n", "import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n", "import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n", "import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n", "import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n", "import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n", "import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n", "import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n", "import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme, sanitizeSvgTextStyle } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...sanitizeSvgTextStyle(theme.legends.text),\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n", "import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n", "import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n", "import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n", "import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n"],
  "mappings": "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",
  "names": []
}
