{
  "version": 3,
  "sources": ["../@nivo/circle-packing/node_modules/@react-spring/web/src/index.ts", "../@nivo/circle-packing/node_modules/@react-spring/web/src/applyAnimatedValues.ts", "../@nivo/circle-packing/node_modules/@react-spring/web/src/AnimatedStyle.ts", "../@nivo/circle-packing/node_modules/@react-spring/web/src/primitives.ts", "../@nivo/circle-packing/src/hooks.ts", "../@nivo/circle-packing/src/props.ts", "../@nivo/circle-packing/src/CirclePackingTooltip.tsx", "../@nivo/circle-packing/src/Circles.tsx", "../@nivo/circle-packing/src/CircleSvg.tsx", "../@nivo/circle-packing/src/Labels.tsx", "../@nivo/circle-packing/src/LabelSvg.tsx", "../@nivo/circle-packing/src/CirclePacking.tsx", "../@nivo/circle-packing/src/ResponsiveCirclePacking.tsx", "../@nivo/circle-packing/src/CircleHtml.tsx", "../@nivo/circle-packing/src/LabelHtml.tsx", "../@nivo/circle-packing/src/CirclePackingHtml.tsx", "../@nivo/circle-packing/src/ResponsiveCirclePackingHtml.tsx", "../@nivo/circle-packing/src/CirclePackingCanvas.tsx", "../@nivo/circle-packing/src/ResponsiveCirclePackingCanvas.tsx"],
  "sourcesContent": ["import { Globals } from '@react-spring/core'\nimport { unstable_batchedUpdates } from 'react-dom'\nimport { createStringInterpolator, colors } from '@react-spring/shared'\nimport { createHost } from '@react-spring/animated'\nimport { applyAnimatedValues } from './applyAnimatedValues'\nimport { AnimatedStyle } from './AnimatedStyle'\nimport { WithAnimated } from './animated'\nimport { primitives } from './primitives'\n\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors,\n})\n\nconst host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: style => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props,\n})\n\nexport const animated = host.animated as WithAnimated\nexport { animated as a }\n\nexport * from './animated'\nexport * from '@react-spring/core'\n", "import { Lookup } from '@react-spring/types'\n\nconst isCustomPropRE = /^--/\n\ntype Value = string | number | boolean | null\n\nfunction dangerousStyleValue(name: string, value: Value) {\n  if (value == null || typeof value === 'boolean' || value === '') return ''\n  if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isCustomPropRE.test(name) &&\n    !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])\n  )\n    return value + 'px'\n  // Presumes implicit 'px' suffix for unitless numbers\n  return ('' + value).trim()\n}\n\nconst attributeCache: Lookup<string> = {}\n\ntype Instance = HTMLDivElement & { style?: Lookup }\n\nexport function applyAnimatedValues(instance: Instance, props: Lookup) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false\n  }\n\n  const isFilterElement =\n    instance.nodeName === 'filter' ||\n    (instance.parentNode && instance.parentNode.nodeName === 'filter')\n\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props!\n\n  const values = Object.values(attributes)\n  const names = Object.keys(attributes).map(name =>\n    isFilterElement || instance.hasAttribute(name)\n      ? name\n      : attributeCache[name] ||\n        (attributeCache[name] = name.replace(\n          /([A-Z])/g,\n          // Attributes are written in dash case\n          n => '-' + n.toLowerCase()\n        ))\n  )\n\n  if (children !== void 0) {\n    instance.textContent = children\n  }\n\n  // Apply CSS styles\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name])\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value)\n      } else {\n        instance.style[name] = value\n      }\n    }\n  }\n\n  // Apply DOM attributes\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i])\n  })\n\n  if (className !== void 0) {\n    instance.className = className\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute('viewBox', viewBox)\n  }\n}\n\nlet isUnitlessNumber: { [key: string]: true } = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true,\n}\n\nconst prefixKey = (prefix: string, key: string) =>\n  prefix + key.charAt(0).toUpperCase() + key.substring(1)\nconst prefixes = ['Webkit', 'Ms', 'Moz', 'O']\n\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach(prefix => (acc[prefixKey(prefix, prop)] = acc[prop]))\n  return acc\n}, isUnitlessNumber)\n", "import { AnimatedObject } from '@react-spring/animated'\nimport { Lookup, OneOrMore } from '@react-spring/types'\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  FluidEvent,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n} from '@react-spring/shared'\n\n/** The transform-functions\n * (https://developer.mozilla.org/fr/docs/Web/CSS/transform-function)\n * that you can pass as keys to your animated component style and that will be\n * animated. Perspective has been left out as it would conflict with the\n * non-transform perspective style.\n */\nconst domTransforms = /^(matrix|translate|scale|rotate|skew)/\n\n// These keys have \"px\" units by default\nconst pxTransforms = /^(translate)/\n\n// These keys have \"deg\" units by default\nconst degTransforms = /^(rotate|skew)/\n\ntype Value = number | string\n\n/** Add a unit to the value when the value is unit-less (eg: a number) */\nconst addUnit = (value: Value, unit: string): string | 0 =>\n  is.num(value) && value !== 0 ? value + unit : value\n\n/**\n * Checks if the input value matches the identity value.\n *\n *     isValueIdentity(0, 0)              // => true\n *     isValueIdentity('0px', 0)          // => true\n *     isValueIdentity([0, '0px', 0], 0)  // => true\n */\nconst isValueIdentity = (value: OneOrMore<Value>, id: number): boolean =>\n  is.arr(value)\n    ? value.every(v => isValueIdentity(v, id))\n    : is.num(value)\n      ? value === id\n      : parseFloat(value) === id\n\ntype Inputs = ReadonlyArray<Value | FluidValue<Value>>[]\ntype Transforms = ((value: any) => [string, boolean])[]\n\n/**\n * This AnimatedStyle will simplify animated components transforms by\n * interpolating all transform function passed as keys in the style object\n * including shortcuts such as x, y and z for translateX/Y/Z\n */\nexport class AnimatedStyle extends AnimatedObject {\n  constructor({ x, y, z, ...style }: Lookup) {\n    /**\n     * An array of arrays that contains the values (static or fluid)\n     * used by each transform function.\n     */\n    const inputs: Inputs = []\n    /**\n     * An array of functions that take a list of values (static or fluid)\n     * and returns (1) a CSS transform string and (2) a boolean that's true\n     * when the transform has no effect (eg: an identity transform).\n     */\n    const transforms: Transforms = []\n\n    // Combine x/y/z into translate3d\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0])\n      transforms.push((xyz: Value[]) => [\n        `translate3d(${xyz.map(v => addUnit(v, 'px')).join(',')})`, // prettier-ignore\n        isValueIdentity(xyz, 0),\n      ])\n    }\n\n    // Pluck any other transform-related props\n    eachProp(style, (value, key) => {\n      if (key === 'transform') {\n        inputs.push([value || ''])\n        transforms.push((transform: string) => [transform, transform === ''])\n      } else if (domTransforms.test(key)) {\n        delete style[key]\n        if (is.und(value)) return\n\n        const unit = pxTransforms.test(key)\n          ? 'px'\n          : degTransforms.test(key)\n            ? 'deg'\n            : ''\n\n        inputs.push(toArray(value))\n        transforms.push(\n          key === 'rotate3d'\n            ? ([x, y, z, deg]: [number, number, number, Value]) => [\n                `rotate3d(${x},${y},${z},${addUnit(deg, unit)})`,\n                isValueIdentity(deg, 0),\n              ]\n            : (input: Value[]) => [\n                `${key}(${input.map(v => addUnit(v, unit)).join(',')})`,\n                isValueIdentity(input, key.startsWith('scale') ? 1 : 0),\n              ]\n        )\n      }\n    })\n\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms)\n    }\n\n    super(style)\n  }\n}\n\n/** @internal */\nclass FluidTransform extends FluidValue<string> {\n  protected _value: string | null = null\n\n  constructor(\n    readonly inputs: Inputs,\n    readonly transforms: Transforms\n  ) {\n    super()\n  }\n\n  get() {\n    return this._value || (this._value = this._get())\n  }\n\n  protected _get() {\n    let transform = ''\n    let identity = true\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0])\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      )\n      transform += ' ' + t\n      identity = identity && id\n    })\n    return identity ? 'none' : transform\n  }\n\n  // Start observing our inputs once we have an observer.\n  protected observerAdded(count: number) {\n    if (count == 1)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      )\n  }\n\n  // Stop observing our inputs once we have no observers.\n  protected observerRemoved(count: number) {\n    if (count == 0)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      )\n  }\n\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      this._value = null\n    }\n    callFluidObservers(this, event)\n  }\n}\n", "export type Primitives = keyof JSX.IntrinsicElements\nexport const primitives: Primitives[] = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'big',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'section',\n  'select',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n  // SVG\n  'circle',\n  'clipPath',\n  'defs',\n  'ellipse',\n  'foreignObject',\n  'g',\n  'image',\n  'line',\n  'linearGradient',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'svg',\n  'text',\n  'tspan',\n]\n", "import { useMemo, MouseEvent, MutableRefObject, useCallback } from 'react'\nimport { pack as d3Pack, hierarchy as d3Hierarchy } from 'd3-hierarchy'\nimport cloneDeep from 'lodash/cloneDeep'\nimport sortBy from 'lodash/sortBy'\nimport {\n    usePropertyAccessor,\n    useValueFormatter,\n    useTheme,\n    getRelativeCursor,\n    getDistance,\n} from '@nivo/core'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    CirclePackingCommonProps,\n    CirclePackingCustomLayerProps,\n    ComputedDatum,\n    MouseHandlers,\n} from './types'\n\nexport const useCirclePacking = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    width,\n    height,\n    padding,\n    leavesOnly,\n    colors,\n    colorBy,\n    inheritColorFromParent,\n    childColor,\n}: {\n    data: CirclePackingCommonProps<RawDatum>['data']\n    id: CirclePackingCommonProps<RawDatum>['id']\n    value: CirclePackingCommonProps<RawDatum>['value']\n    valueFormat?: CirclePackingCommonProps<RawDatum>['valueFormat']\n    width: number\n    height: number\n    padding: CirclePackingCommonProps<RawDatum>['padding']\n    leavesOnly: CirclePackingCommonProps<RawDatum>['leavesOnly']\n    colors: CirclePackingCommonProps<RawDatum>['colors']\n    colorBy: CirclePackingCommonProps<RawDatum>['colorBy']\n    inheritColorFromParent: CirclePackingCommonProps<RawDatum>['inheritColorFromParent']\n    childColor: CirclePackingCommonProps<RawDatum>['childColor']\n}): ComputedDatum<RawDatum>[] => {\n    const getId = usePropertyAccessor<RawDatum, string>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>>(\n        colors,\n        colorBy\n    )\n    const theme = useTheme()\n    const getChildColor = useInheritedColor<ComputedDatum<RawDatum>>(childColor, theme)\n\n    // d3 mutates the data for performance reasons,\n    // however it does not work well with reactive programming,\n    // this ensures that we don't mutate the input data\n    const clonedData = cloneDeep(data)\n\n    const hierarchy = d3Hierarchy<RawDatum>(clonedData).sum(getValue)\n\n    const pack = d3Pack<RawDatum>().size([width, height]).padding(padding)\n    const packedData = pack(hierarchy)\n\n    const nodes = leavesOnly ? packedData.leaves() : packedData.descendants()\n\n    // It's important to sort node by depth,\n    // it ensures that we assign a parent node\n    // which has already been computed, because parent nodes\n    // are gonna be computed first\n    const sortedNodes = sortBy(nodes, 'depth')\n\n    const total = hierarchy.value ?? 0\n\n    const computedNodes = sortedNodes.reduce<ComputedDatum<RawDatum>[]>((acc, descendant) => {\n        const id = getId(descendant.data)\n        const value = descendant.value!\n        const percentage = (100 * value) / total\n        const path = descendant.ancestors().map(ancestor => getId(ancestor.data))\n\n        let parent: ComputedDatum<RawDatum> | undefined\n        if (descendant.parent) {\n            parent = acc.find(node => node.id === getId(descendant.parent!.data))\n        }\n\n        const normalizedNode: ComputedDatum<RawDatum> = {\n            id,\n            path,\n            value,\n            percentage,\n            formattedValue: valueFormat ? formatValue(value) : `${percentage.toFixed(2)}%`,\n            x: descendant.x,\n            y: descendant.y,\n            radius: descendant.r,\n            color: '',\n            data: descendant.data,\n            depth: descendant.depth,\n            height: descendant.height,\n        }\n\n        if (inheritColorFromParent && parent && normalizedNode.depth > 1) {\n            normalizedNode.color = getChildColor(parent)\n        } else {\n            normalizedNode.color = getColor(normalizedNode)\n        }\n\n        return [...acc, normalizedNode]\n    }, [])\n\n    return computedNodes\n}\n\nexport const useCirclePackingZoom = <RawDatum>(\n    nodes: ComputedDatum<RawDatum>[],\n    zoomedId: CirclePackingCommonProps<RawDatum>['zoomedId'],\n    width: number,\n    height: number\n) =>\n    useMemo(() => {\n        if (!zoomedId) return nodes\n\n        const zoomedNode = nodes.find(({ id }) => id === zoomedId)\n        if (!zoomedNode) return nodes\n\n        const ratio = Math.min(width, height) / (zoomedNode.radius * 2)\n        const offsetX = width / 2 - zoomedNode.x * ratio\n        const offsetY = height / 2 - zoomedNode.y * ratio\n\n        return nodes.map(node => ({\n            ...node,\n            x: node.x * ratio + offsetX,\n            y: node.y * ratio + offsetY,\n            radius: node.radius * ratio,\n        }))\n    }, [nodes, zoomedId, width, height])\n\nexport const useCirclePackingLabels = <RawDatum>({\n    nodes,\n    label,\n    filter,\n    skipRadius,\n    textColor,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    label: CirclePackingCommonProps<RawDatum>['label']\n    filter: CirclePackingCommonProps<RawDatum>['labelsFilter']\n    skipRadius: CirclePackingCommonProps<RawDatum>['labelsSkipRadius']\n    textColor: CirclePackingCommonProps<RawDatum>['labelTextColor']\n}) => {\n    const getLabel = usePropertyAccessor<ComputedDatum<RawDatum>, string | number>(label)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<ComputedDatum<RawDatum>>(textColor, theme)\n\n    // computing the labels\n    const labels = useMemo(\n        () =>\n            nodes\n                .filter(node => node.radius >= skipRadius)\n                .map(node => ({\n                    label: getLabel(node),\n                    textColor: getTextColor(node),\n                    node,\n                })),\n        [nodes, skipRadius, getLabel, getTextColor]\n    )\n\n    // apply extra filtering if provided\n    return useMemo(() => {\n        if (!filter) return labels\n\n        return labels.filter(filter)\n    }, [labels, filter])\n}\n\nexport const useNodeMouseHandlers = <RawDatum>(\n    node: ComputedDatum<RawDatum>,\n    { onMouseEnter, onMouseMove, onMouseLeave, onClick }: MouseHandlers<RawDatum>\n): Partial<\n    Record<'onMouseEnter' | 'onMouseMove' | 'onMouseLeave' | 'onClick', (event: MouseEvent) => void>\n> =>\n    useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter\n                ? (event: MouseEvent) => {\n                      onMouseEnter(node, event)\n                  }\n                : undefined,\n            onMouseMove: onMouseMove\n                ? (event: MouseEvent) => {\n                      onMouseMove(node, event)\n                  }\n                : undefined,\n            onMouseLeave: onMouseLeave\n                ? (event: MouseEvent) => {\n                      onMouseLeave(node, event)\n                  }\n                : undefined,\n            onClick: onClick\n                ? (event: MouseEvent) => {\n                      onClick(node, event)\n                  }\n                : undefined,\n        }),\n        [node, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\nexport const useMouseCircleDetection = <RawDatum>({\n    nodes,\n    canvasEl,\n    margin,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    canvasEl: MutableRefObject<HTMLCanvasElement | null>\n    margin: {\n        top: number\n        left: number\n    }\n}) => {\n    // we need to sort in order to detect higher nodes first\n    const sortedNodes = useMemo(() => sortBy(nodes, 'height'), [nodes])\n\n    return useCallback(\n        (event: MouseEvent) => {\n            if (!canvasEl.current) return null\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            return sortedNodes.find(node => {\n                const distanceFromNode = getDistance(\n                    node.x,\n                    node.y,\n                    x - margin.left,\n                    y - margin.top\n                )\n                return distanceFromNode <= node.radius\n            })\n        },\n        [canvasEl, margin, sortedNodes]\n    )\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useCirclePackingLayerContext = <RawDatum>({\n    nodes,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n}): CirclePackingCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            nodes,\n        }),\n        [nodes]\n    )\n", "import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { CirclePackingLayerId } from './types'\nimport { CirclePackingTooltip } from './CirclePackingTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    padding: 0,\n    leavesOnly: false,\n    layers: ['circles', 'labels'] as CirclePackingLayerId[],\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n    colorBy: 'depth' as const,\n    inheritColorFromParent: false,\n    childColor: {\n        from: 'color',\n        modifiers: [['darker', 0.3]],\n    },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.3]],\n    },\n    defs: [],\n    fill: [],\n    enableLabels: false,\n    label: 'id',\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1.6]],\n    },\n    labelsSkipRadius: 8,\n    isInteractive: true,\n    tooltip: CirclePackingTooltip,\n    animate: true,\n    motionConfig: 'gentle',\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const CirclePackingTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n", "import { createElement, useMemo, MouseEvent } from 'react'\nimport * as React from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CircleComponent, MouseHandlers, CirclePackingCommonProps } from './types'\n\n/**\n * A negative radius value is invalid for an SVG circle,\n * this custom interpolation makes sure it's either\n * positive or zero.\n */\nexport const interpolateRadius = (radiusValue: SpringValue<number>) =>\n    to([radiusValue], radius => Math.max(0, radius))\n\ntype CirclesProps<RawDatum> = {\n    nodes: ComputedDatum<RawDatum>[]\n    borderWidth: CirclePackingCommonProps<RawDatum>['borderWidth']\n    borderColor: CirclePackingCommonProps<RawDatum>['borderColor']\n    component: CircleComponent<RawDatum>\n    isInteractive: CirclePackingCommonProps<RawDatum>['isInteractive']\n    tooltip: CirclePackingCommonProps<RawDatum>['tooltip']\n} & MouseHandlers<RawDatum>\n\nconst getTransitionPhases = <RawDatum,>(\n    getBorderColor: (node: ComputedDatum<RawDatum>) => string\n) => ({\n    enter: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n    update: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: node.radius,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 1,\n    }),\n    leave: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n})\n\nexport const Circles = <RawDatum,>({\n    nodes,\n    borderWidth,\n    borderColor,\n    component,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: CirclesProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseEnter?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseMove?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        }\n    }, [isInteractive, onClick])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const transitionPhases = useMemo(\n        () => getTransitionPhases<RawDatum>(getBorderColor),\n        [getBorderColor]\n    )\n\n    const transition = useTransition<\n        ComputedDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            borderColor: string\n            opacity: number\n        }\n    >(nodes, {\n        keys: node => node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, node) => {\n                return React.createElement(component, {\n                    key: node.id,\n                    node,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                        borderWidth,\n                    },\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            })}\n        </>\n    )\n}\n", "import { animated } from '@react-spring/web'\nimport { CircleProps } from './types'\nimport { useNodeMouseHandlers } from './hooks'\n\nexport const CircleSvg = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    const handlers = useNodeMouseHandlers<RawDatum>(node, {\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    })\n\n    return (\n        <animated.circle\n            key={node.id}\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={node.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            opacity={style.opacity}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n", "import { createElement, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { CirclePackingCommonProps, ComputedDatum, LabelComponent, ComputedLabel } from './types'\nimport { useCirclePackingLabels } from './hooks'\nimport { interpolateRadius } from './Circles'\n\ninterface CirclesProps<RawDatum> {\n    nodes: ComputedDatum<RawDatum>[]\n    label: CirclePackingCommonProps<RawDatum>['label']\n    filter?: CirclePackingCommonProps<RawDatum>['labelsFilter']\n    skipRadius: CirclePackingCommonProps<RawDatum>['labelsSkipRadius']\n    textColor: CirclePackingCommonProps<RawDatum>['labelTextColor']\n    component: LabelComponent<RawDatum>\n}\n\nconst getTransitionPhases = <RawDatum,>() => ({\n    enter: (label: ComputedLabel<RawDatum>) => ({\n        x: label.node.x,\n        y: label.node.y,\n        radius: label.node.radius,\n        textColor: label.textColor,\n        opacity: 0,\n    }),\n    update: (label: ComputedLabel<RawDatum>) => ({\n        x: label.node.x,\n        y: label.node.y,\n        radius: label.node.radius,\n        textColor: label.textColor,\n        opacity: 1,\n    }),\n    leave: (label: ComputedLabel<RawDatum>) => ({\n        x: label.node.x,\n        y: label.node.y,\n        radius: label.node.radius,\n        textColor: label.textColor,\n        opacity: 0,\n    }),\n})\n\nexport const Labels = <RawDatum,>({\n    nodes,\n    label,\n    filter,\n    skipRadius,\n    textColor,\n    component,\n}: CirclesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useCirclePackingLabels({\n        nodes,\n        label,\n        filter,\n        skipRadius,\n        textColor,\n    })\n\n    const transitionPhases = useMemo(() => getTransitionPhases<RawDatum>(), [])\n\n    const transition = useTransition<\n        ComputedLabel<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            textColor: string\n            opacity: number\n        }\n    >(labels, {\n        keys: label => label.node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, label) => {\n                return createElement(component, {\n                    key: label.node.id,\n                    label: label.label,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                    },\n                    node: label.node,\n                })\n            })}\n        </>\n    )\n}\n", "import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { LabelProps } from './types'\n\nexport const LabelSvg = <RawDatum,>({ node, label, style }: LabelProps<RawDatum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.text\n            key={node.id}\n            x={style.x}\n            y={style.y}\n            textAnchor=\"middle\"\n            dominantBaseline=\"central\"\n            style={{\n                ...theme.labels.text,\n                fill: style.textColor,\n                opacity: style.opacity,\n                pointerEvents: 'none',\n            }}\n        >\n            {label}\n        </animated.text>\n    )\n}\n", "import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { CirclePackingLayerId, CirclePackingSvgProps, ComputedDatum } from './types'\nimport { useCirclePacking, useCirclePackingZoom, useCirclePackingLayerContext } from './hooks'\nimport { defaultProps } from './props'\nimport { Circles } from './Circles'\nimport { CircleSvg } from './CircleSvg'\nimport { Labels } from './Labels'\nimport { LabelSvg } from './LabelSvg'\n\ntype InnerCirclePackingProps<RawDatum> = Partial<\n    Omit<\n        CirclePackingSvgProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerCirclePacking = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    padding = defaultProps.padding,\n    leavesOnly = defaultProps.leavesOnly,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>\n    >,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    circleComponent = CircleSvg,\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n    enableLabels = defaultProps.enableLabels,\n    label = defaultProps.label,\n    labelsFilter,\n    labelsSkipRadius = defaultProps.labelsSkipRadius,\n    labelTextColor = defaultProps.labelTextColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    labelComponent = LabelSvg,\n    layers = defaultProps.layers,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    zoomedId,\n    role = defaultProps.role,\n}: InnerCirclePackingProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const nodes = useCirclePacking<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        leavesOnly,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const zoomedNodes = useCirclePackingZoom<RawDatum>(nodes, zoomedId, innerWidth, innerHeight)\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, zoomedNodes, fill, { targetKey: 'fill' }),\n        [defs, zoomedNodes, fill]\n    )\n\n    const layerById: Record<CirclePackingLayerId, ReactNode> = {\n        circles: null,\n        labels: null,\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={zoomedNodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                component={circleComponent}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    if (enableLabels && layers.includes('labels')) {\n        layerById.labels = (\n            <Labels<RawDatum>\n                key=\"labels\"\n                nodes={zoomedNodes}\n                label={label}\n                filter={labelsFilter}\n                skipRadius={labelsSkipRadius}\n                textColor={labelTextColor}\n                component={labelComponent}\n            />\n        )\n    }\n\n    const layerContext = useCirclePackingLayerContext<RawDatum>({\n        nodes,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as CirclePackingLayerId] !== undefined) {\n                    return layerById[layer as CirclePackingLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const CirclePacking = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n        renderWrapper={renderWrapper}\n        theme={theme}\n    >\n        <InnerCirclePacking<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { CirclePackingSvgProps } from './types'\nimport { CirclePacking } from './CirclePacking'\n\ntype ResponsiveCirclePackingProps<RawDatum> = Partial<\n    Omit<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<CirclePackingSvgProps<RawDatum>, 'data'>\n\nexport const ResponsiveCirclePacking = <RawDatum,>(\n    props: ResponsiveCirclePackingProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <CirclePacking<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { animated, to, SpringValue, Interpolation } from '@react-spring/web'\nimport { CircleProps } from './types'\nimport { useNodeMouseHandlers } from './hooks'\n\nexport const interpolatePosition = (\n    positionValue: SpringValue<number>,\n    radiusValue: Interpolation<number>\n) => to([positionValue, radiusValue], (position, radius) => position - radius)\n\nexport const interpolateSize = (radiusValue: Interpolation<number>) =>\n    to([radiusValue], radius => radius * 2)\n\nexport const interpolateBorderWidth = (borderWidth: number, radiusValue: Interpolation<number>) =>\n    to([radiusValue], radius => Math.min(borderWidth, radius))\n\nexport const CircleHtml = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    const size = interpolateSize(style.radius)\n\n    const handlers = useNodeMouseHandlers<RawDatum>(node, {\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    })\n\n    return (\n        <animated.div\n            style={{\n                position: 'absolute',\n                top: interpolatePosition(style.y, style.radius),\n                left: interpolatePosition(style.x, style.radius),\n                height: size,\n                width: size,\n                borderRadius: style.radius,\n                backgroundColor: style.color,\n                borderWidth: interpolateBorderWidth(style.borderWidth, style.radius),\n                borderStyle: 'solid',\n                borderColor: style.borderColor,\n                boxSizing: 'border-box',\n            }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n", "import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { LabelProps } from './types'\nimport { interpolatePosition, interpolateSize } from './CircleHtml'\n\nexport const LabelHtml = <RawDatum,>({ node, label, style }: LabelProps<RawDatum>) => {\n    const theme = useTheme()\n    const size = interpolateSize(style.radius)\n\n    return (\n        <animated.div\n            key={node.id}\n            style={{\n                ...theme.labels.text,\n                position: 'absolute',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                top: interpolatePosition(style.y, style.radius),\n                left: interpolatePosition(style.x, style.radius),\n                width: size,\n                height: size,\n                color: style.textColor,\n                opacity: style.opacity,\n                pointerEvents: 'none',\n            }}\n        >\n            {label}\n        </animated.div>\n    )\n}\n", "import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { CirclePackingHtmlProps, CirclePackingLayerId, ComputedDatum } from './types'\nimport { useCirclePacking, useCirclePackingLayerContext, useCirclePackingZoom } from './hooks'\nimport { Circles } from './Circles'\nimport { CircleHtml } from './CircleHtml'\nimport { defaultProps } from './props'\nimport { Labels } from './Labels'\nimport { LabelHtml } from './LabelHtml'\n\ntype InnerCirclePackingHtmlProps<RawDatum> = Partial<\n    Omit<\n        CirclePackingHtmlProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nexport const InnerCirclePackingHtml = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    padding = defaultProps.padding,\n    leavesOnly = defaultProps.leavesOnly,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>\n    >,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    circleComponent = CircleHtml,\n    enableLabels = defaultProps.enableLabels,\n    label = defaultProps.label,\n    labelsFilter,\n    labelsSkipRadius = defaultProps.labelsSkipRadius,\n    labelTextColor = defaultProps.labelTextColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    labelComponent = LabelHtml,\n    layers = defaultProps.layers,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    zoomedId,\n    role = defaultProps.role,\n}: InnerCirclePackingHtmlProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const nodes = useCirclePacking<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        leavesOnly,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const zoomedNodes = useCirclePackingZoom<RawDatum>(nodes, zoomedId, innerWidth, innerHeight)\n\n    const layerById: Record<CirclePackingLayerId, ReactNode> = {\n        circles: null,\n        labels: null,\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={zoomedNodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                component={circleComponent}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    if (enableLabels && layers.includes('labels')) {\n        layerById.labels = (\n            <Labels<RawDatum>\n                key=\"labels\"\n                nodes={zoomedNodes}\n                label={label}\n                filter={labelsFilter}\n                skipRadius={labelsSkipRadius}\n                textColor={labelTextColor}\n                component={labelComponent}\n            />\n        )\n    }\n\n    const layerContext = useCirclePackingLayerContext<RawDatum>({\n        nodes,\n    })\n\n    return (\n        <div\n            role={role}\n            style={{\n                position: 'relative',\n                overflow: 'hidden',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div\n                style={{\n                    position: 'absolute',\n                    top: margin.top,\n                    left: margin.left,\n                }}\n            >\n                {layers.map((layer, i) => {\n                    if (layerById[layer as CirclePackingLayerId] !== undefined) {\n                        return layerById[layer as CirclePackingLayerId]\n                    }\n\n                    if (typeof layer === 'function') {\n                        return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                    }\n\n                    return null\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport const CirclePackingHtml = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: Partial<Omit<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n        theme={theme}\n    >\n        <InnerCirclePackingHtml<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { CirclePackingHtmlProps } from './types'\nimport { CirclePackingHtml } from './CirclePackingHtml'\n\ntype ResponsiveCirclePackingHtmlProps<RawDatum> = Partial<\n    Omit<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<CirclePackingHtmlProps<RawDatum>, 'data'>\n\nexport const ResponsiveCirclePackingHtml = <RawDatum,>(\n    props: ResponsiveCirclePackingHtmlProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <CirclePackingHtml<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { useCallback, useEffect, useRef, createElement } from 'react'\nimport * as React from 'react'\nimport { useDimensions, useTheme, Container } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { CirclePackingCanvasProps, ComputedDatum } from './types'\nimport { defaultProps } from './props'\nimport {\n    useCirclePacking,\n    useCirclePackingZoom,\n    useCirclePackingLabels,\n    useMouseCircleDetection,\n} from './hooks'\n\ntype InnerCirclePackingCanvasProps<RawDatum> = Partial<\n    Omit<\n        CirclePackingCanvasProps<RawDatum>,\n        'data' | 'width' | 'height' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>\n\nconst InnerCirclePackingCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    padding = defaultProps.padding,\n    leavesOnly = defaultProps.leavesOnly,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>\n    >,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    enableLabels = defaultProps.enableLabels,\n    label = defaultProps.label,\n    labelsFilter,\n    labelsSkipRadius = defaultProps.labelsSkipRadius,\n    labelTextColor = defaultProps.labelTextColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    zoomedId,\n    role = defaultProps.role,\n    pixelRatio = defaultProps.pixelRatio,\n}: InnerCirclePackingCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const nodes = useCirclePacking<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        leavesOnly,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const zoomedNodes = useCirclePackingZoom<RawDatum>(nodes, zoomedId, innerWidth, innerHeight)\n\n    const labels = useCirclePackingLabels({\n        nodes: zoomedNodes,\n        label,\n        filter: labelsFilter,\n        skipRadius: labelsSkipRadius,\n        textColor: labelTextColor,\n    })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n\n        zoomedNodes.forEach(node => {\n            if (borderWidth > 0) {\n                ctx.strokeStyle = getBorderColor(node)\n                ctx.lineWidth = borderWidth\n            }\n\n            ctx.beginPath()\n            ctx.arc(node.x, node.y, node.radius, 0, 2 * Math.PI)\n            ctx.fillStyle = node.color\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableLabels) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            labels.forEach(label => {\n                ctx.fillStyle = label.textColor\n                ctx.fillText(`${label.label}`, label.node.x, label.node.y)\n            })\n        }\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        theme,\n        pixelRatio,\n        zoomedNodes,\n        enableLabels,\n        labels,\n        borderWidth,\n        getBorderColor,\n    ])\n\n    const getNodeFromMouseEvent = useMouseCircleDetection<RawDatum>({\n        nodes: zoomedNodes,\n        canvasEl,\n        margin,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onMouseMove?.(node, event)\n                showTooltipFromEvent(createElement(tooltip, node), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, showTooltipFromEvent, tooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!onClick) return\n\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            role={role}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const CirclePackingCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    ...otherProps\n}: Partial<Omit<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={isInteractive} theme={theme}>\n        <InnerCirclePackingCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { CirclePackingCanvasProps } from './types'\nimport { CirclePackingCanvas } from './CirclePackingCanvas'\n\ntype ResponsiveCirclePackingCanvasProps<RawDatum> = Partial<\n    Omit<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<CirclePackingCanvasProps<RawDatum>, 'data'>\n\nexport const ResponsiveCirclePackingCanvas = <RawDatum,>(\n    props: ResponsiveCirclePackingCanvasProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <CirclePackingCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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EACtC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AH9HF,gBAAQ,OAAO;EACb,gBAAgB;EAChB;EACA;;AAGF,IAAM,OAAO,WAAW,YAAY;EAClC;EACA,qBAAqB,CAAA,UAAS,IAAI,cAAc;EAEhD,mBAAmB,CAAC,OAAkC;AAAlC,iBAAE,aAAW,eAAb,IAA4B,kBAA5B,IAA4B,CAA1B,aAAW;AAA2B;;;AAGvD,IAAM,WAAW,KAAK;;;;;;;;;;;;;;;;;;;;;;IIHhB,IAAmB,SAAH,IAAA;AA0BI,MAAA,IAzB7B,KAAI,GAAJ,MACA,KAAE,GAAF,IACA,KAAK,GAAL,OACA,KAAW,GAAX,aACA,KAAK,GAAL,OACA,IAAM,GAAN,QACA,IAAO,GAAP,SACA,IAAU,GAAV,YACA,IAAM,GAAN,QACA,IAAO,GAAP,SACA,IAAsB,GAAtB,wBACA,IAAU,GAAV,YAeM,IAAQ,GAAsC,KAC9C,KAAW,GAAsC,KACjD,IAAc,GAAkB,KAEhC,KAAW,GACb,GACA,IAEE,KAAQ,MACR,IAAgB,GAA2C,GAAY,KAKvE,IAAa,8BAAU,KAEvB,IAAY,UAAsB,GAAY,IAAI,KAGlD,KADO,eAAmB,KAAK,CAAC,IAAO,IAAS,QAAQ,GACtC,IAElB,KAAQ,IAAa,GAAW,WAAW,GAAW,eAMtD,KAAc,2BAAO,IAAO,UAE5B,KAAuB,AAAlB,MAAG,EAAU,UAAK,OAAA,KAAI,GAE3B,KAAgB,GAAY,OAAkC,SAAC,IAAK,IAAA;AACtE,QAKI,IALE,KAAK,EAAM,GAAW,OACtB,KAAQ,GAAW,OACnB,KAAc,MAAM,KAAS,IAC7B,IAAO,GAAW,YAAY,IAAI,SAAA,IAAA;AAAQ,aAAI,EAAM,GAAS;;AAG/D,OAAW,UACX,MAAS,GAAI,KAAK,SAAA,IAAA;AAAI,aAAI,GAAK,OAAO,EAAM,GAAW,OAAQ;;AAGnE,QAAM,IAA0C,EAC5C,IAAA,IACA,MAAA,GACA,OAAA,IACA,YAAA,IACA,gBAAgB,KAAc,EAAY,MAAY,GAAW,QAAQ,KAAK,KAC9E,GAAG,GAAW,GACd,GAAG,GAAW,GACd,QAAQ,GAAW,GACnB,OAAO,IACP,MAAM,GAAW,MACjB,OAAO,GAAW,OAClB,QAAQ,GAAW;AASvB,WANI,KAA0B,MAAU,EAAe,QAAQ,IAC3D,EAAe,QAAQ,EAAc,MAErC,EAAe,QAAQ,GAAS,IAGpC,GAAA,OAAW,IAAG,CAAE;KACjB;AAEH,SAAO;;IAGE,IAAuB,SAChC,IACA,IACA,IACA,IAAA;AAAc,SAEd,0BAAQ,WAAA;AACJ,QAAA,CAAK;AAAU,aAAO;AAEtB,QAAM,KAAa,GAAM,KAAK,SAAA,IAAA;AAAK,aAAA,GAAF,OAAgB;;AACjD,QAAA,CAAK;AAAY,aAAO;AAExB,QAAM,KAAQ,KAAK,IAAI,IAAO,MAA+B,KAApB,GAAW,SAC9C,KAAU,KAAQ,IAAI,GAAW,IAAI,IACrC,IAAU,KAAS,IAAI,GAAW,IAAI;AAE5C,WAAO,GAAM,IAAI,SAAA,IAAA;AAAI,aAAA,EAAA,IACd,IAAI,EACP,GAAG,GAAK,IAAI,KAAQ,IACpB,GAAG,GAAK,IAAI,KAAQ,GACpB,QAAQ,GAAK,SAAS;;KAE3B,CAAC,IAAO,IAAU,IAAO;;IAEnB,IAAyB,SAAH,IAAA;AAY7B,MAXF,KAAK,GAAL,OACA,KAAK,GAAL,OACA,KAAM,GAAN,QACA,KAAU,GAAV,YACA,KAAS,GAAT,WAQM,IAAW,GAA8D,KACzE,IAAQ,MACR,IAAe,GAA2C,IAAW,IAGrE,IAAS,0BACX,WAAA;AAAA,WACI,GACK,OAAO,SAAA,IAAA;AAAI,aAAI,GAAK,UAAU;OAC9B,IAAI,SAAA,IAAA;AAAI,aAAK,EACV,OAAO,EAAS,KAChB,WAAW,EAAa,KACxB,MAAA;;KAEZ,CAAC,IAAO,IAAY,GAAU;AAIlC,SAAO,0BAAQ,WAAA;AACX,WAAK,KAEE,EAAO,OAAO,MAFD;KAGrB,CAAC,GAAQ;;IAGH,IAAuB,SAChC,IAA6B,IAAA;AAAA,MAC3B,KAAY,GAAZ,cAAc,KAAW,GAAX,aAAa,KAAY,GAAZ,cAAc,KAAO,GAAP;AAAO,SAIlD,0BACI,WAAA;AAAA,WAAO,EACH,cAAc,KACR,SAAC,IAAA;AACG,SAAa,IAAM;QACvB,QAEN,aAAa,KACP,SAAC,IAAA;AACG,SAAY,IAAM;QACtB,QAEN,cAAc,KACR,SAAC,IAAA;AACG,SAAa,IAAM;QACvB,QAEN,SAAS,KACH,SAAC,IAAA;AACG,SAAQ,IAAM;QAClB;KAGV,CAAC,IAAM,IAAc,IAAa,IAAc;;IAG3C,IAA0B,SAAH,IAAA;AAW9B,MAVF,KAAK,GAAL,OACA,KAAQ,GAAR,UACA,KAAM,GAAN,QAUM,KAAc,0BAAQ,WAAA;AAAA,WAAM,2BAAO,IAAO;KAAW,CAAC;AAE5D,SAAO,8BACH,SAAC,IAAA;AACG,QAAA,CAAK,GAAS;AAAS,aAAO;AAE9B,QAAA,KAAe,GAAkB,GAAS,SAAS,KAA5C,KAAC,GAAA,IAAE,KAAC,GAAA;AAEX,WAAO,GAAY,KAAK,SAAA,IAAA;AAOpB,aANyB,GACrB,GAAK,GACL,GAAK,GACL,KAAI,GAAO,MACX,KAAI,GAAO,QAEY,GAAK;;KAGxC,CAAC,IAAU,IAAQ;;IAOd,IAA+B,SAAH,IAAA;AAAA,MACrC,KAAK,GAAL;AAAK,SAIL,0BACI,WAAA;AAAA,WAAO,EACH,OAAA;KAEJ,CAAC;;IC5PI,IAAe,EACxB,IAAI,MACJ,OAAO,SACP,SAAS,GACT,YAAA,OACA,QAAQ,CAAC,WAAW,WACpB,QAAQ,EAAE,QAAQ,UAClB,SAAS,SACT,wBAAA,OACA,YAAY,EACR,MAAM,SACN,WAAW,CAAC,CAAC,UAAU,SAE3B,aAAa,GACb,aAAa,EACT,MAAM,SACN,WAAW,CAAC,CAAC,UAAU,SAE3B,MAAM,IACN,MAAM,IACN,cAAA,OACA,OAAO,MACP,gBAAgB,EACZ,MAAM,SACN,WAAW,CAAC,CAAC,UAAU,SAE3B,kBAAkB,GAClB,eAAA,MACA,SC7BgC,SAAH,IAAA;AAAA,MAC7B,KAAE,GAAF,IACA,KAAc,GAAd,gBACA,KAAK,GAAL;AAAK,SAEL,4BAAC,GAAY,EAAC,IAAI,IAAI,OAAO,IAAgB,YAAA,MAAkB,OAAO;GDyBtE,SAAA,MACA,cAAc,UACd,MAAM,OACN,YAA8B,AAAA,OAAX,UAAW,eAAqC,AAA1B,KAAG,OAAO,qBAAgB,OAAA,IAAQ;IEvBlE,IAAoB,SAAC,IAAA;AAAgC,SAC9D,GAAG,CAAC,KAAc,SAAA,IAAA;AAAM,WAAI,KAAK,IAAI,GAAG;;;IAwC/B,IAAU,SAAH,IAAA;AAWU,MAV1B,KAAK,GAAL,OACA,KAAW,GAAX,aACA,KAAW,GAAX,aACA,IAAS,GAAT,WACA,IAAa,GAAb,eACA,IAAY,GAAZ,cACA,IAAW,GAAX,aACA,IAAY,GAAZ,cACA,IAAO,GAAP,SACA,IAAO,GAAP,SAEA,IAA8C,KAAtC,IAAoB,EAApB,sBAAsB,IAAW,EAAX,aAExB,IAAmB,0BAAQ,WAAA;AAC7B,QAAK;AAEL,aAAO,SAAC,IAA+B,IAAA;AACnC,UAAqB,gCAAc,GAAS,KAAO,KAAA,AACnD,KADmD,QACnD,EAAe,IAAM;;KAE1B,CAAC,GAAe,GAAsB,GAAS,KAE5C,KAAkB,0BAAQ,WAAA;AAC5B,QAAK;AAEL,aAAO,SAAC,IAA+B,IAAA;AACnC,UAAqB,gCAAc,GAAS,KAAO,KAAA,AACnD,KADmD,QACnD,EAAc,IAAM;;KAEzB,CAAC,GAAe,GAAsB,GAAS,KAE5C,KAAmB,0BAAQ,WAAA;AAC7B,QAAK;AAEL,aAAO,SAAC,IAA+B,IAAA;AACnC,aAAA,AACA,KADA,QACA,EAAe,IAAM;;KAE1B,CAAC,GAAe,GAAa,KAE1B,IAAc,0BAAQ,WAAA;AACxB,QAAK;AAEL,aAAO,SAAC,IAA+B,IAAA;AAAA,QACnC,KADmC,QACnC,EAAU,IAAM;;KAErB,CAAC,GAAe,KAEnB,KAA0C,MAAlC,IAAO,GAAP,SAAiB,IAAY,GAApB,QAEX,KAAQ,MACR,KAAiB,GAA2C,IAAa,KAEzE,KAAmB,0BACrB,WAAA;AAAA,WApFoB,SACxB,IAAA;AAAyD,aACvD,EACF,OAAO,SAAC,IAAA;AAA6B,eAAM,EACvC,GAAG,GAAK,GACR,GAAG,GAAK,GACR,QAAQ,GACR,OAAO,GAAK,OACZ,aAAa,GAAe,KAC5B,SAAS;SAEb,QAAQ,SAAC,IAAA;AAA6B,eAAM,EACxC,GAAG,GAAK,GACR,GAAG,GAAK,GACR,QAAQ,GAAK,QACb,OAAO,GAAK,OACZ,aAAa,GAAe,KAC5B,SAAS;SAEb,OAAO,SAAC,IAAA;AAA6B,eAAM,EACvC,GAAG,GAAK,GACR,GAAG,GAAK,GACR,QAAQ,GACR,OAAO,GAAK,OACZ,aAAa,GAAe,KAC5B,SAAS;;MA2D2B;KACpC,CAAC,MAGC,KAAa,cAUjB,IAAO,EACL,MAAM,SAAA,IAAA;AAAI,WAAI,GAAK;KACnB,SAAS,GAAiB,QAC1B,MAAM,GAAiB,OACvB,OAAO,GAAiB,QACxB,QAAQ,GAAiB,QACzB,OAAO,GAAiB,OACxB,QAAQ,GACR,WAAA,CAAY;AAGhB,SACI,4BAAA,6BAAA,EAAA,UACK,GAAW,SAAC,IAAiB,IAAA;AAC1B,WAAO,AAAM,gBAAc,GAAW,EAClC,KAAK,GAAK,IACV,MAAA,IACA,OAAK,EAAA,IACE,IAAe,EAClB,QAAQ,EAAkB,GAAgB,SAC1C,aAAA,OAEJ,cAAc,GACd,aAAa,IACb,cAAc,IACd,SAAS;;;IChJhB,IAAY,SAAH,IAAA;AAOO,MANzB,KAAI,GAAJ,MACA,KAAK,GAAL,OACA,KAAY,GAAZ,cACA,KAAW,GAAX,aACA,KAAY,GAAZ,cACA,KAAO,GAAP,SAEM,IAAW,EAA+B,IAAM,EAClD,cAAA,IACA,aAAA,IACA,cAAA,IACA,SAAA;AAGJ,SACI,4BAAC,SAAS,QAAM,EAEZ,IAAI,GAAM,GACV,IAAI,GAAM,GACV,GAAG,GAAM,QACT,MAAM,GAAK,QAAQ,GAAM,OACzB,QAAQ,GAAM,aACd,aAAa,GAAM,aACnB,SAAS,GAAM,SACf,cAAc,EAAS,cACvB,aAAa,EAAS,aACtB,cAAc,EAAS,cACvB,SAAS,EAAS,WAXb,GAAK;;ICmBT,IAAS,SAAH,IAAA;AAOW,MAN1B,KAAK,GAAL,OACA,KAAK,GAAL,OACA,KAAM,GAAN,QACA,KAAU,GAAV,YACA,IAAS,GAAT,WACA,IAAS,GAAT,WAEA,IAA0C,MAAlC,IAAO,EAAP,SAAiB,IAAY,EAApB,QAEX,IAAS,EAAuB,EAClC,OAAA,IACA,OAAA,IACA,QAAA,IACA,YAAA,IACA,WAAA,MAGE,IAAmB,0BAAQ,WAAA;AAAA,WA1CS,EAC1C,OAAO,SAAC,IAAA;AAA8B,aAAM,EACxC,GAAG,GAAM,KAAK,GACd,GAAG,GAAM,KAAK,GACd,QAAQ,GAAM,KAAK,QACnB,WAAW,GAAM,WACjB,SAAS;OAEb,QAAQ,SAAC,IAAA;AAA8B,aAAM,EACzC,GAAG,GAAM,KAAK,GACd,GAAG,GAAM,KAAK,GACd,QAAQ,GAAM,KAAK,QACnB,WAAW,GAAM,WACjB,SAAS;OAEb,OAAO,SAAC,IAAA;AAA8B,aAAM,EACxC,GAAG,GAAM,KAAK,GACd,GAAG,GAAM,KAAK,GACd,QAAQ,GAAM,KAAK,QACnB,WAAW,GAAM,WACjB,SAAS;;KAsB2D,KAElE,IAAa,cASjB,GAAQ,EACN,MAAM,SAAA,IAAA;AAAK,WAAI,GAAM,KAAK;KAC1B,SAAS,EAAiB,QAC1B,MAAM,EAAiB,OACvB,OAAO,EAAiB,QACxB,QAAQ,EAAiB,QACzB,OAAO,EAAiB,OACxB,QAAQ,GACR,WAAA,CAAY;AAGhB,SACI,4BAAA,6BAAA,EAAA,UACK,EAAW,SAAC,IAAiB,IAAA;AAC1B,WAAO,gCAAc,GAAW,EAC5B,KAAK,GAAM,KAAK,IAChB,OAAO,GAAM,OACb,OAAK,EAAA,IACE,IAAe,EAClB,QAAQ,EAAkB,GAAgB,YAE9C,MAAM,GAAM;;;ICtFnB,IAAW,SAAH,IAAA;AAAgE,MAA/C,KAAI,GAAJ,MAAM,KAAK,GAAL,OAAO,KAAK,GAAL,OACzC,KAAQ;AAEd,SACI,4BAAC,SAAS,MAAI,EAEV,GAAG,GAAM,GACT,GAAG,GAAM,GACT,YAAW,UACX,kBAAiB,WACjB,OAAK,EAAA,IACE,GAAM,OAAO,MAAI,EACpB,MAAM,GAAM,WACZ,SAAS,GAAM,SACf,eAAe,WACjB,UAED,MAZI,GAAK;;IAetB,IAAA,CAAA,SAAA,iBAAA,WAAA,gBAAA;ICCM,IAAqB,SAAH,IAAA;AAoCiB,MAnCrC,KAAI,GAAJ,MAAI,KAAA,GACJ,IAAA,KAAA,AAAE,OAAF,SAAK,EAAa,KAAE,IAAA,IAAA,GACpB,OAAA,IAAA,AAAK,MAAL,SAAQ,EAAa,QAAK,GAC1B,IAAW,GAAX,aACA,IAAK,GAAL,OACA,IAAM,GAAN,QACQ,IAAa,GAArB,QAAM,IAAA,GACN,SAAA,IAAA,AAAO,MAAP,SAAU,EAAa,UAAO,GAAA,IAAA,GAC9B,YAAA,IAAA,AAAU,MAAV,SAAa,EAAa,aAAU,GAAA,KAAA,GACpC,QAAA,KAAA,AAAM,OAAN,SAAS,EAAa,SAAM,IAAA,IAAA,GAG5B,SAAA,KAAA,AAAO,MAAP,SAAU,EAAa,UAAO,GAAA,KAAA,GAC9B,wBAAA,IAAA,AAAsB,OAAtB,SAAyB,EAAa,yBAAsB,IAAA,KAAA,GAC5D,YAAA,IAAA,AAAU,OAAV,SAAa,EAAa,aAAU,IAAA,IAAA,GACpC,aAAA,IAAA,AAAW,MAAX,SAAc,EAAa,cAAW,GAAA,KAAA,GACtC,aAAA,KAAA,AAAW,OAAX,SAAc,EAAa,cAAW,IAAA,KAAA,GACtC,iBAAA,KAAA,AAAe,OAAf,SAAkB,IAAS,IAAA,KAAA,GAC3B,MAAA,KAAA,AAAI,OAAJ,SAAO,EAAa,OAAI,IAAA,KAAA,GACxB,MAAA,KAAA,AAAI,OAAJ,SAAO,EAAa,OAAI,IAAA,KAAA,GACxB,cAAA,KAAA,AAAY,OAAZ,SAAe,EAAa,eAAY,IAAA,KAAA,GACxC,OAAA,KAAA,AAAK,OAAL,SAAQ,EAAa,QAAK,IAC1B,KAAY,GAAZ,cAAY,KAAA,GACZ,kBAAA,KAAA,AAAgB,OAAhB,SAAmB,EAAa,mBAAgB,IAAA,MAAA,GAChD,gBAAA,MAAA,AAAc,QAAd,SAAiB,EAAa,iBAAc,KAAA,MAAA,GAC5C,gBAAA,MAAA,AAAc,QAAd,SAAiB,IAAQ,KAAA,MAAA,GACzB,QAAA,MAAA,AAAM,QAAN,SAAS,EAAa,SAAM,KAC5B,MAAa,GAAb,eACA,MAAY,GAAZ,cACA,KAAW,GAAX,aACA,KAAY,GAAZ,cACA,KAAO,GAAP,SAAO,KAAA,GACP,SAAA,KAAA,AAAO,OAAP,SAAU,EAAa,UAAO,IAC9B,KAAQ,GAAR,UAAQ,KAAA,GACR,MAAA,KAAA,AAAI,OAAJ,SAAO,EAAa,OAAI,IAExB,KAAqE,GACjE,GACA,GACA,IAHI,KAAU,GAAV,YAAY,KAAW,GAAX,aAAa,KAAM,GAAN,QAAQ,KAAU,GAAV,YAAY,KAAW,GAAX,aAM/C,KAAQ,EAA2B,EACrC,MAAA,IACA,IAAA,IACA,OAAA,GACA,aAAA,GACA,OAAO,IACP,QAAQ,IACR,SAAA,GACA,YAAA,GACA,QAAA,IACA,SAAA,IACA,wBAAA,GACA,YAAA,MAGE,KAAc,EAA+B,IAAO,IAAU,IAAY,KAE1E,KAAY,0BACd,WAAA;AAAA,WAAM,GAAS,IAAM,IAAa,IAAM,EAAE,WAAW;KACrD,CAAC,IAAM,IAAa,MAGlB,KAAqD,EACvD,SAAS,MACT,QAAQ;AAGR,MAAO,SAAS,cAChB,IAAU,UACN,4BAAC,GAAO,EAEJ,OAAO,IACP,aAAa,GACb,aAAa,IACb,eAAe,KACf,cAAc,KACd,aAAa,IACb,cAAc,IACd,SAAS,IACT,WAAW,IACX,SAAS,MAVL,aAeZ,MAAgB,IAAO,SAAS,aAChC,IAAU,SACN,4BAAC,GAAM,EAEH,OAAO,IACP,OAAO,IACP,QAAQ,IACR,YAAY,IACZ,WAAW,KACX,WAAW,OANP;AAWhB,MAAM,KAAe,EAAuC,EACxD,OAAA;AAGJ,SACI,4BAAC,IAAU,EACP,OAAO,IACP,QAAQ,IACR,QAAQ,IACR,MAAM,IACN,MAAM,IAAK,UAEV,IAAO,IAAI,SAAC,IAAO,IAAA;AAChB,WAAA,AAAI,GAAU,QAAd,SACW,GAAU,MAGA,AAAA,OAAV,MAAU,aACV,4BAAC,uBAAQ,EAAA,UAAU,gCAAc,IAAO,OAAzB,MAGnB;;;IAMV,IAAgB,SAAH,IAAA;AAAA,MACtB,KAAK,GAAL,OAAK,KAAA,GACL,eAAA,KAAA,AAAa,OAAb,SAAgB,EAAa,gBAAa,IAAA,KAAA,GAC1C,SAAA,KAAA,AAAO,OAAP,SAAU,EAAa,UAAO,IAAA,KAAA,GAC9B,cAAA,IAAA,AAAY,OAAZ,SAAe,EAAa,eAAY,IACxC,IAAa,GAAb,eACG,IAAU,EAAA,IAAA;AAAA,SAGb,4BAAC,IAAS,EACN,eAAe,IACf,SAAS,IACT,cAAc,GACd,eAAe,GACf,OAAO,IAAM,UAEb,4BAAC,GAAkB,EAAA,EAAW,eAAe,MAAmB;;ICjK3D,IAA0B,SACnC,IAAA;AAA6C,SAE7C,4BAAC,IAAiB,EAAA,UACb,SAAA,IAAA;AAAA,QAAG,KAAK,GAAL,OAAO,KAAM,GAAN;AAAM,WACb,4BAAC,GAAa,EAAA,EAAW,OAAO,IAAO,QAAQ,MAAY;;;ICV1D,IAAsB,SAC/B,IACA,IAAA;AAAkC,SACjC,GAAG,CAAC,IAAe,KAAc,SAAC,IAAU,IAAA;AAAM,WAAK,KAAW;;;IAE1D,IAAkB,SAAC,IAAA;AAAkC,SAC9D,GAAG,CAAC,KAAc,SAAA,IAAA;AAAM,WAAa,IAAT;;;IAKnB,IAAa,SAAH,IAAA;AAOM,MAVU,IAAqB,IAIxD,KAAI,GAAJ,MACA,KAAK,GAAL,OACA,KAAY,GAAZ,cACA,KAAW,GAAX,aACA,IAAY,GAAZ,cACA,IAAO,GAAP,SAEM,IAAO,EAAgB,GAAM,SAE7B,IAAW,EAA+B,IAAM,EAClD,cAAA,IACA,aAAA,IACA,cAAA,GACA,SAAA;AAGJ,SACI,4BAAC,SAAS,KAAG,EACT,OAAO,EACH,UAAU,YACV,KAAK,EAAoB,GAAM,GAAG,GAAM,SACxC,MAAM,EAAoB,GAAM,GAAG,GAAM,SACzC,QAAQ,GACR,OAAO,GACP,cAAc,GAAM,QACpB,iBAAiB,GAAM,OACvB,aA9BuB,MA8Ba,GAAM,aA9BE,KA8BW,GAAM,QA7BzE,GAAG,CAAC,KAAc,SAAA,IAAA;AAAM,WAAI,KAAK,IAAI,IAAa;OA8BtC,aAAa,SACb,aAAa,GAAM,aACnB,WAAW,gBAEf,cAAc,EAAS,cACvB,aAAa,EAAS,aACtB,cAAc,EAAS,cACvB,SAAS,EAAS;;IC7CjB,IAAY,SAAH,IAAA;AAAgE,MAA/C,KAAI,GAAJ,MAAM,KAAK,GAAL,OAAO,KAAK,GAAL,OAC1C,KAAQ,MACR,KAAO,EAAgB,GAAM;AAEnC,SACI,4BAAC,SAAS,KAAG,EAET,OAAK,EAAA,IACE,GAAM,OAAO,MAAI,EACpB,UAAU,YACV,SAAS,QACT,gBAAgB,UAChB,YAAY,UACZ,KAAK,EAAoB,GAAM,GAAG,GAAM,SACxC,MAAM,EAAoB,GAAM,GAAG,GAAM,SACzC,OAAO,IACP,QAAQ,IACR,OAAO,GAAM,WACb,SAAS,GAAM,SACf,eAAe,WACjB,UAED,MAhBI,GAAK;;IAmBtB,KAAA,CAAA,SAAA,iBAAA,WAAA;ICXa,KAAyB,SAAH,IAAA;AAkCU,MAjCzC,KAAI,GAAJ,MAAI,KAAA,GACJ,IAAA,KAAA,AAAE,OAAF,SAAK,EAAa,KAAE,IAAA,KAAA,GACpB,OAAA,IAAA,AAAK,OAAL,SAAQ,EAAa,QAAK,IAC1B,IAAW,GAAX,aACA,IAAK,GAAL,OACA,IAAM,GAAN,QACQ,IAAa,GAArB,QAAM,IAAA,GACN,SAAA,IAAA,AAAO,MAAP,SAAU,EAAa,UAAO,GAAA,IAAA,GAC9B,YAAA,IAAA,AAAU,MAAV,SAAa,EAAa,aAAU,GAAA,IAAA,GACpC,QAAA,IAAA,AAAM,MAAN,SAAS,EAAa,SAAM,GAAA,IAAA,GAG5B,SAAA,KAAA,AAAO,MAAP,SAAU,EAAa,UAAO,GAAA,KAAA,GAC9B,wBAAA,IAAA,AAAsB,OAAtB,SAAyB,EAAa,yBAAsB,IAAA,KAAA,GAC5D,YAAA,KAAA,AAAU,OAAV,SAAa,EAAa,aAAU,IAAA,IAAA,GACpC,aAAA,KAAA,AAAW,MAAX,SAAc,EAAa,cAAW,GAAA,IAAA,GACtC,aAAA,IAAA,AAAW,MAAX,SAAc,EAAa,cAAW,GAAA,IAAA,GACtC,iBAAA,KAAA,AAAe,MAAf,SAAkB,IAAU,GAAA,KAAA,GAC5B,cAAA,KAAA,AAAY,OAAZ,SAAe,EAAa,eAAY,IAAA,KAAA,GACxC,OAAA,KAAA,AAAK,OAAL,SAAQ,EAAa,QAAK,IAC1B,KAAY,GAAZ,cAAY,KAAA,GACZ,kBAAA,KAAA,AAAgB,OAAhB,SAAmB,EAAa,mBAAgB,IAAA,KAAA,GAChD,gBAAA,KAAA,AAAc,OAAd,SAAiB,EAAa,iBAAc,IAAA,KAAA,GAC5C,gBAAA,KAAA,AAAc,OAAd,SAAiB,IAAS,IAAA,KAAA,GAC1B,QAAA,KAAA,AAAM,OAAN,SAAS,EAAa,SAAM,IAC5B,KAAa,GAAb,eACA,MAAY,GAAZ,cACA,MAAW,GAAX,aACA,MAAY,GAAZ,cACA,MAAO,GAAP,SAAO,MAAA,GACP,SAAA,MAAA,AAAO,QAAP,SAAU,EAAa,UAAO,KAC9B,MAAQ,GAAR,UAAQ,MAAA,GACR,MAAA,KAAA,AAAI,QAAJ,SAAO,EAAa,OAAI,KAExB,KAAqE,GACjE,GACA,GACA,IAHI,KAAU,GAAV,YAAY,KAAW,GAAX,aAAa,KAAM,GAAN,QAAQ,KAAU,GAAV,YAAY,KAAW,GAAX,aAM/C,KAAQ,EAA2B,EACrC,MAAA,IACA,IAAA,IACA,OAAA,GACA,aAAA,GACA,OAAO,IACP,QAAQ,IACR,SAAA,GACA,YAAA,GACA,QAAA,GACA,SAAA,IACA,wBAAA,GACA,YAAA,OAGE,KAAc,EAA+B,IAAO,KAAU,IAAY,KAE1E,KAAqD,EACvD,SAAS,MACT,QAAQ;AAGR,KAAO,SAAS,cAChB,IAAU,UACN,4BAAC,GAAO,EAEJ,OAAO,IACP,aAAa,IACb,aAAa,GACb,eAAe,IACf,cAAc,KACd,aAAa,KACb,cAAc,KACd,SAAS,KACT,WAAW,IACX,SAAS,OAVL,aAeZ,MAAgB,GAAO,SAAS,aAChC,IAAU,SACN,4BAAC,GAAM,EAEH,OAAO,IACP,OAAO,IACP,QAAQ,IACR,YAAY,IACZ,WAAW,IACX,WAAW,MANP;AAWhB,MAAM,KAAe,EAAuC,EACxD,OAAA;AAGJ,SACI,4BAAA,OAAA,EACI,MAAM,IACN,OAAO,EACH,UAAU,YACV,UAAU,UACV,OAAO,IACP,QAAQ,MACV,UAEF,4BAAA,OAAA,EACI,OAAO,EACH,UAAU,YACV,KAAK,GAAO,KACZ,MAAM,GAAO,QACf,UAED,GAAO,IAAI,SAAC,IAAO,IAAA;AAChB,WAAA,AAAI,GAAU,QAAd,SACW,GAAU,MAGA,AAAA,OAAV,MAAU,aACV,4BAAC,uBAAQ,EAAA,UAAU,gCAAc,IAAO,OAAzB,MAGnB;;;IAOd,KAAoB,SAAH,IAAA;AAAA,MAC1B,KAAK,GAAL,OAAK,KAAA,GACL,eAAA,KAAA,AAAa,OAAb,SAAgB,EAAa,gBAAa,IAAA,KAAA,GAC1C,SAAA,KAAA,AAAO,OAAP,SAAU,EAAa,UAAO,IAAA,KAAA,GAC9B,cAAA,IAAA,AAAY,OAAZ,SAAe,EAAa,eAAY,IACrC,IAAU,EAAA,IAAA;AAAA,SAGb,4BAAC,IAAS,EACN,eAAe,IACf,SAAS,IACT,cAAc,GACd,OAAO,IAAM,UAEb,4BAAC,IAAsB,EAAA,EAAW,eAAe,MAAmB;;IC5J/D,KAA8B,SACvC,IAAA;AAAiD,SAEjD,4BAAC,IAAiB,EAAA,UACb,SAAA,IAAA;AAAA,QAAG,KAAK,GAAL,OAAO,KAAM,GAAN;AAAM,WACb,4BAAC,IAAiB,EAAA,EAAW,OAAO,IAAO,QAAQ,MAAY;;;IAEnD,KAAA,CAAA,iBAAA;ICMlB,KAA2B,SAAH,IAAA;AA8BiB,MA7B3C,KAAI,GAAJ,MAAI,KAAA,GACJ,IAAA,IAAA,AAAE,OAAF,SAAK,EAAa,KAAE,IAAA,IAAA,GACpB,OAAA,IAAA,AAAK,MAAL,SAAQ,EAAa,QAAK,GAC1B,IAAW,GAAX,aACA,IAAK,GAAL,OACA,IAAM,GAAN,QACQ,IAAa,GAArB,QAAM,IAAA,GACN,SAAA,IAAA,AAAO,MAAP,SAAU,EAAa,UAAO,GAAA,IAAA,GAC9B,YAAA,IAAA,AAAU,MAAV,SAAa,EAAa,aAAU,GAAA,KAAA,GACpC,QAAA,KAAA,AAAM,OAAN,SAAS,EAAa,SAAM,IAAA,IAAA,GAG5B,SAAA,KAAA,AAAO,MAAP,SAAU,EAAa,UAAO,GAAA,KAAA,GAC9B,wBAAA,IAAA,AAAsB,OAAtB,SAAyB,EAAa,yBAAsB,IAAA,IAAA,GAC5D,YAAA,IAAA,AAAU,MAAV,SAAa,EAAa,aAAU,GAAA,KAAA,GACpC,aAAA,KAAA,AAAW,OAAX,SAAc,EAAa,cAAW,IAAA,KAAA,GACtC,aAAA,KAAA,AAAW,OAAX,SAAc,EAAa,cAAW,IAAA,KAAA,GACtC,cAAA,KAAA,AAAY,OAAZ,SAAe,EAAa,eAAY,IAAA,KAAA,GACxC,OAAA,KAAA,AAAK,OAAL,SAAQ,EAAa,QAAK,IAC1B,KAAY,GAAZ,cAAY,KAAA,GACZ,kBAAA,KAAA,AAAgB,OAAhB,SAAmB,EAAa,mBAAgB,IAAA,KAAA,GAChD,gBAAA,KAAA,AAAc,OAAd,SAAiB,EAAa,iBAAc,IAC5C,KAAa,GAAb,eACA,KAAW,GAAX,aACA,KAAO,GAAP,SAAO,KAAA,GACP,SAAA,KAAA,AAAO,OAAP,SAAU,EAAa,UAAO,IAC9B,MAAQ,GAAR,UAAQ,MAAA,GACR,MAAA,MAAA,AAAI,QAAJ,SAAO,EAAa,OAAI,KAAA,MAAA,GACxB,YAAA,MAAA,AAAU,QAAV,SAAa,EAAa,aAAU,KAE9B,MAAW,yBAAiC,OAC5C,MAAQ,MAEd,MAAqE,GACjE,GACA,GACA,IAHI,KAAM,IAAN,QAAQ,KAAU,IAAV,YAAY,KAAW,IAAX,aAAa,KAAU,IAAV,YAAY,KAAW,IAAX,aAM/C,KAAQ,EAA2B,EACrC,MAAA,IACA,IAAA,GACA,OAAA,GACA,aAAA,GACA,OAAO,IACP,QAAQ,IACR,SAAA,GACA,YAAA,GACA,QAAA,IACA,SAAA,IACA,wBAAA,GACA,YAAA,MAGE,KAAc,EAA+B,IAAO,KAAU,IAAY,KAE1E,KAAS,EAAuB,EAClC,OAAO,IACP,OAAA,IACA,QAAQ,IACR,YAAY,IACZ,WAAW,OAGT,KAAiB,GAA2C,IAAa;AAE/E,8BAAU,WAAA;AACN,QAAK,IAAS,SAAd;AAEA,UAAS,QAAQ,QAAQ,KAAa,KACtC,IAAS,QAAQ,SAAS,KAAc;AAExC,UAAM,KAAM,IAAS,QAAQ,WAAW;AAExC,SAAI,MAAM,KAAY,MAEtB,GAAI,YAAY,IAAM,YACtB,GAAI,SAAS,GAAG,GAAG,IAAY,KAE/B,GAAI,QACJ,GAAI,UAAU,GAAO,MAAM,GAAO,MAElC,GAAY,QAAQ,SAAA,IAAA;AACZ,aAAc,KACd,IAAI,cAAc,GAAe,KACjC,GAAI,YAAY,KAGpB,GAAI,aACJ,GAAI,IAAI,GAAK,GAAG,GAAK,GAAG,GAAK,QAAQ,GAAG,IAAI,KAAK,KACjD,GAAI,YAAY,GAAK,OACrB,GAAI,QAEA,KAAc,KACd,GAAI;UAIR,MACA,IAAI,YAAY,UAChB,GAAI,eAAe,UACnB,GAAI,OAAU,IAAM,OAAO,KAAK,WAAA,QAAc,IAAM,OAAO,KAAK,YAEhE,GAAO,QAAQ,SAAA,IAAA;AACX,WAAI,YAAY,GAAM,WACtB,GAAI,SAAQ,KAAI,GAAM,OAAS,GAAM,KAAK,GAAG,GAAM,KAAK;;;KAGjE,CACC,KACA,IACA,IACA,IACA,IACA,GAAO,KACP,GAAO,MACP,KACA,KACA,IACA,IACA,IACA,IACA;AAGJ,MAAM,KAAwB,EAAkC,EAC5D,OAAO,IACP,UAAA,KACA,QAAA,OAGJ,KAA8C,KAAtC,KAAoB,GAApB,sBAAsB,KAAW,GAAX,aAExB,KAAmB,8BACrB,SAAC,IAAA;AACG,QAAM,KAAO,GAAsB;AAC/B,SAAA,CACA,MADA,QACA,GAAc,IAAM,KACpB,GAAqB,gCAAc,IAAS,KAAO,OAEnD;KAGR,CAAC,IAAuB,IAAsB,IAAS,MAGrD,KAAmB,8BAAY,WAAA;AACjC;KACD,CAAC,MAEE,KAAc,8BAChB,SAAC,IAAA;AACG,QAAK,IAAL;AAEA,UAAM,KAAO,GAAsB;AAC/B,YACA,GAAQ,IAAM;;KAGtB,CAAC,IAAuB;AAG5B,SACI,4BAAA,UAAA,EACI,KAAK,KACL,OAAO,KAAa,KACpB,QAAQ,KAAc,KACtB,OAAO,EACH,OAAO,IACP,QAAQ,IACR,QAAQ,KAAgB,SAAS,YAErC,MAAM,KACN,cAAc,KAAgB,KAAA,QAC9B,aAAa,KAAgB,KAAA,QAC7B,cAAc,KAAgB,KAAA,QAC9B,SAAS,KAAgB,KAAA;;IAKxB,KAAsB,SAAH,IAAA;AAAA,MAAA,KAAA,GAC5B,eAAA,KAAA,AAAa,OAAb,SAAgB,EAAa,gBAAa,IAC1C,KAAK,GAAL,OACG,KAAU,EAAA,IAAA;AAAA,SAGb,4BAAC,IAAS,EAAC,eAAe,IAAe,OAAO,IAAM,UAClD,4BAAC,IAAwB,EAAA,EAAW,eAAe,MAAmB;;IC1MjE,KAAgC,SACzC,IAAA;AAAmD,SAEnD,4BAAC,IAAiB,EAAA,UACb,SAAA,IAAA;AAAA,QAAG,KAAK,GAAL,OAAO,KAAM,GAAN;AAAM,WACb,4BAAC,IAAmB,EAAA,EAAW,OAAO,IAAO,QAAQ,MAAY;;;",
  "names": []
}
