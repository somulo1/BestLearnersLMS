{
  "version": 3,
  "sources": ["../@nivo/bar/node_modules/@react-spring/web/src/index.ts", "../@nivo/bar/node_modules/@react-spring/web/src/applyAnimatedValues.ts", "../@nivo/bar/node_modules/@react-spring/web/src/AnimatedStyle.ts", "../@nivo/bar/node_modules/@react-spring/web/src/primitives.ts", "../@nivo/bar/src/BarAnnotations.tsx", "../@nivo/bar/src/BarLegends.tsx", "../@nivo/bar/src/BarItem.tsx", "../@nivo/bar/src/BarTooltip.tsx", "../@nivo/bar/src/props.ts", "../@nivo/bar/src/compute/common.ts", "../@nivo/bar/src/compute/grouped.ts", "../@nivo/bar/src/compute/stacked.ts", "../@nivo/bar/src/compute/legends.ts", "../@nivo/bar/src/compute/totals.ts", "../@nivo/bar/src/hooks.ts", "../@nivo/bar/src/BarTotals.tsx", "../@nivo/bar/src/Bar.tsx", "../@nivo/bar/src/BarCanvas.tsx", "../@nivo/bar/src/ResponsiveBar.tsx", "../@nivo/bar/src/ResponsiveBarCanvas.tsx"],
  "sourcesContent": ["import { Globals } from '@react-spring/core'\nimport { unstable_batchedUpdates } from 'react-dom'\nimport { createStringInterpolator, colors } from '@react-spring/shared'\nimport { createHost } from '@react-spring/animated'\nimport { applyAnimatedValues } from './applyAnimatedValues'\nimport { AnimatedStyle } from './AnimatedStyle'\nimport { WithAnimated } from './animated'\nimport { primitives } from './primitives'\n\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors,\n})\n\nconst host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: style => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props,\n})\n\nexport const animated = host.animated as WithAnimated\nexport { animated as a }\n\nexport * from './animated'\nexport * from '@react-spring/core'\n", "import { Lookup } from '@react-spring/types'\n\nconst isCustomPropRE = /^--/\n\ntype Value = string | number | boolean | null\n\nfunction dangerousStyleValue(name: string, value: Value) {\n  if (value == null || typeof value === 'boolean' || value === '') return ''\n  if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isCustomPropRE.test(name) &&\n    !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])\n  )\n    return value + 'px'\n  // Presumes implicit 'px' suffix for unitless numbers\n  return ('' + value).trim()\n}\n\nconst attributeCache: Lookup<string> = {}\n\ntype Instance = HTMLDivElement & { style?: Lookup }\n\nexport function applyAnimatedValues(instance: Instance, props: Lookup) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false\n  }\n\n  const isFilterElement =\n    instance.nodeName === 'filter' ||\n    (instance.parentNode && instance.parentNode.nodeName === 'filter')\n\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props!\n\n  const values = Object.values(attributes)\n  const names = Object.keys(attributes).map(name =>\n    isFilterElement || instance.hasAttribute(name)\n      ? name\n      : attributeCache[name] ||\n        (attributeCache[name] = name.replace(\n          /([A-Z])/g,\n          // Attributes are written in dash case\n          n => '-' + n.toLowerCase()\n        ))\n  )\n\n  if (children !== void 0) {\n    instance.textContent = children\n  }\n\n  // Apply CSS styles\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name])\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value)\n      } else {\n        instance.style[name] = value\n      }\n    }\n  }\n\n  // Apply DOM attributes\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i])\n  })\n\n  if (className !== void 0) {\n    instance.className = className\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute('viewBox', viewBox)\n  }\n}\n\nlet isUnitlessNumber: { [key: string]: true } = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true,\n}\n\nconst prefixKey = (prefix: string, key: string) =>\n  prefix + key.charAt(0).toUpperCase() + key.substring(1)\nconst prefixes = ['Webkit', 'Ms', 'Moz', 'O']\n\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach(prefix => (acc[prefixKey(prefix, prop)] = acc[prop]))\n  return acc\n}, isUnitlessNumber)\n", "import { AnimatedObject } from '@react-spring/animated'\nimport { Lookup, OneOrMore } from '@react-spring/types'\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  FluidEvent,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n} from '@react-spring/shared'\n\n/** The transform-functions\n * (https://developer.mozilla.org/fr/docs/Web/CSS/transform-function)\n * that you can pass as keys to your animated component style and that will be\n * animated. Perspective has been left out as it would conflict with the\n * non-transform perspective style.\n */\nconst domTransforms = /^(matrix|translate|scale|rotate|skew)/\n\n// These keys have \"px\" units by default\nconst pxTransforms = /^(translate)/\n\n// These keys have \"deg\" units by default\nconst degTransforms = /^(rotate|skew)/\n\ntype Value = number | string\n\n/** Add a unit to the value when the value is unit-less (eg: a number) */\nconst addUnit = (value: Value, unit: string): string | 0 =>\n  is.num(value) && value !== 0 ? value + unit : value\n\n/**\n * Checks if the input value matches the identity value.\n *\n *     isValueIdentity(0, 0)              // => true\n *     isValueIdentity('0px', 0)          // => true\n *     isValueIdentity([0, '0px', 0], 0)  // => true\n */\nconst isValueIdentity = (value: OneOrMore<Value>, id: number): boolean =>\n  is.arr(value)\n    ? value.every(v => isValueIdentity(v, id))\n    : is.num(value)\n      ? value === id\n      : parseFloat(value) === id\n\ntype Inputs = ReadonlyArray<Value | FluidValue<Value>>[]\ntype Transforms = ((value: any) => [string, boolean])[]\n\n/**\n * This AnimatedStyle will simplify animated components transforms by\n * interpolating all transform function passed as keys in the style object\n * including shortcuts such as x, y and z for translateX/Y/Z\n */\nexport class AnimatedStyle extends AnimatedObject {\n  constructor({ x, y, z, ...style }: Lookup) {\n    /**\n     * An array of arrays that contains the values (static or fluid)\n     * used by each transform function.\n     */\n    const inputs: Inputs = []\n    /**\n     * An array of functions that take a list of values (static or fluid)\n     * and returns (1) a CSS transform string and (2) a boolean that's true\n     * when the transform has no effect (eg: an identity transform).\n     */\n    const transforms: Transforms = []\n\n    // Combine x/y/z into translate3d\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0])\n      transforms.push((xyz: Value[]) => [\n        `translate3d(${xyz.map(v => addUnit(v, 'px')).join(',')})`, // prettier-ignore\n        isValueIdentity(xyz, 0),\n      ])\n    }\n\n    // Pluck any other transform-related props\n    eachProp(style, (value, key) => {\n      if (key === 'transform') {\n        inputs.push([value || ''])\n        transforms.push((transform: string) => [transform, transform === ''])\n      } else if (domTransforms.test(key)) {\n        delete style[key]\n        if (is.und(value)) return\n\n        const unit = pxTransforms.test(key)\n          ? 'px'\n          : degTransforms.test(key)\n            ? 'deg'\n            : ''\n\n        inputs.push(toArray(value))\n        transforms.push(\n          key === 'rotate3d'\n            ? ([x, y, z, deg]: [number, number, number, Value]) => [\n                `rotate3d(${x},${y},${z},${addUnit(deg, unit)})`,\n                isValueIdentity(deg, 0),\n              ]\n            : (input: Value[]) => [\n                `${key}(${input.map(v => addUnit(v, unit)).join(',')})`,\n                isValueIdentity(input, key.startsWith('scale') ? 1 : 0),\n              ]\n        )\n      }\n    })\n\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms)\n    }\n\n    super(style)\n  }\n}\n\n/** @internal */\nclass FluidTransform extends FluidValue<string> {\n  protected _value: string | null = null\n\n  constructor(\n    readonly inputs: Inputs,\n    readonly transforms: Transforms\n  ) {\n    super()\n  }\n\n  get() {\n    return this._value || (this._value = this._get())\n  }\n\n  protected _get() {\n    let transform = ''\n    let identity = true\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0])\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      )\n      transform += ' ' + t\n      identity = identity && id\n    })\n    return identity ? 'none' : transform\n  }\n\n  // Start observing our inputs once we have an observer.\n  protected observerAdded(count: number) {\n    if (count == 1)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      )\n  }\n\n  // Stop observing our inputs once we have no observers.\n  protected observerRemoved(count: number) {\n    if (count == 0)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      )\n  }\n\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      this._value = null\n    }\n    callFluidObservers(this, event)\n  }\n}\n", "export type Primitives = keyof JSX.IntrinsicElements\nexport const primitives: Primitives[] = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'big',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'section',\n  'select',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n  // SVG\n  'circle',\n  'clipPath',\n  'defs',\n  'ellipse',\n  'foreignObject',\n  'g',\n  'image',\n  'line',\n  'linearGradient',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'svg',\n  'text',\n  'tspan',\n]\n", "import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n", "import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n        textAnchor,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    ariaDisabled,\n    ariaHidden,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                aria-disabled={ariaDisabled ? ariaDisabled(data) : undefined}\n                aria-hidden={ariaHidden ? ariaHidden(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor={textAnchor}\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n", "import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n", "import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { BarCanvasLayerId, BarLayerId, ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelPosition: 'middle' as const,\n    labelOffset: 0,\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'] as BarLayerId[],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'] as BarCanvasLayerId[],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n", "import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum } from '../types'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: readonly RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: readonly RawDatum[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n\nexport type BarLabelLayout = {\n    labelX: number\n    labelY: number\n    textAnchor: 'start' | 'middle' | 'end'\n}\n\n/**\n * Compute the label position and alignment based on a given position and offset.\n */\nexport function useComputeLabelLayout<RawDatum extends BarDatum>(\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    reverse: BarCommonProps<RawDatum>['reverse'] = defaultProps.reverse,\n    labelPosition: BarCommonProps<RawDatum>['labelPosition'] = defaultProps.labelPosition,\n    labelOffset: BarCommonProps<RawDatum>['labelOffset'] = defaultProps.labelOffset\n): (width: number, height: number) => BarLabelLayout {\n    return (width: number, height: number) => {\n        // If the chart is reversed, we want to make sure the offset is also reversed\n        const computedLabelOffset = labelOffset * (reverse ? -1 : 1)\n\n        if (layout === 'horizontal') {\n            let x = width / 2\n            if (labelPosition === 'start') {\n                x = reverse ? width : 0\n            } else if (labelPosition === 'end') {\n                x = reverse ? 0 : width\n            }\n            return {\n                labelX: x + computedLabelOffset,\n                labelY: height / 2,\n                textAnchor: labelPosition === 'middle' ? 'middle' : reverse ? 'end' : 'start',\n            }\n        } else {\n            let y = height / 2\n            if (labelPosition === 'start') {\n                y = reverse ? 0 : height\n            } else if (labelPosition === 'end') {\n                y = reverse ? height : 0\n            }\n            return {\n                labelX: width / 2,\n                labelY: y - computedLabelOffset,\n                textAnchor: 'middle',\n            }\n        }\n    }\n}\n", "import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: readonly RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n", "import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n", "import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n", "import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <RawDatum extends BarDatum>(\n    bars: ComputedBarDatum<RawDatum>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    groupMode: BarCommonProps<RawDatum>['groupMode'] = defaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n", "import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n    totalsOffset = defaultProps.totalsOffset,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n    totalsOffset?: BarCommonProps<RawDatum>['totalsOffset']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n", "import { useTheme } from '@nivo/core'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n                fill: theme.text.fill,\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n", "import { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './props'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarItemProps,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as readonly BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelOffset = svgDefaultProps.labelOffset,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n    barAriaHidden,\n    barAriaDisabled,\n\n    initialHiddenIds,\n\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n            textAnchor: BarItemProps<RawDatum>['style']['textAnchor']\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      ...computeLabelLayout(bar.width, bar.height),\n                      labelX: 0,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n            ariaHidden: barAriaHidden,\n            ariaDisabled: barAriaDisabled,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n            barAriaHidden,\n            barAriaDisabled,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    CompleteTheme,\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n    useValueFormatter,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<RawDatum extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: CompleteTheme,\n    layout: BarCommonProps<RawDatum>['layout'] = canvasDefaultProps.layout\n) {\n    ctx.fillStyle = theme.text.fill\n    ctx.font = `bold ${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        ctx.fillText(barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    labelPosition = canvasDefaultProps.labelPosition,\n    labelOffset = canvasDefaultProps.labelOffset,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n            labelX,\n            labelY,\n            textAnchor,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = textAnchor === 'middle' ? 'center' : textAnchor\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + labelX, y + labelY)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        ...computeLabelLayout(bar.width, bar.height),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n        computeLabelLayout,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n", "import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarSvgProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: ResponsiveBarSvgProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n", "import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: ResponsiveBarCanvasProps<RawDatum>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],
  "mappings": "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B,IAAM,aAA2B;EACtC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AH9HF,gBAAQ,OAAO;EACb,gBAAgB;EAChB;EACA;;AAGF,IAAM,OAAO,WAAW,YAAY;EAClC;EACA,qBAAqB,CAAA,UAAS,IAAI,cAAc;EAEhD,mBAAmB,CAAC,OAAkC;AAAlC,iBAAE,aAAW,eAAb,IAA4B,kBAA5B,IAA4B,CAA1B,aAAW;AAA2B;;;AAGvD,IAAM,WAAW,KAAK;;;;;;;;;;;;;;;;;;;;;;;;AInBtB,IAAA;AAAA,IAAM,IAAiB,SAAH,IAAA;AAAwE,MAAvD,IAAI,GAAJ,MAAM,IAAW,GAAX,aACxC,IAAmB,EAAe,EACpC,MAAM,GACN,aAAA,GACA,aAAa,SAAA,IAAA;AAAG,WAAK,EACjB,GAAG,GAAI,IAAI,GAAI,QAAQ,GACvB,GAAG,GAAI,IAAI,GAAI,SAAS;KAE5B,eAAe,SAAA,IAAA;AAAA,QAAG,KAAM,GAAN,QAAQ,KAAK,GAAL;AAAK,WAAQ,EACnC,OAAA,IACA,Q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",
  "names": []
}
