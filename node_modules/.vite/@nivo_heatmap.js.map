{
  "version": 3,
  "sources": ["../@nivo/heatmap/node_modules/@react-spring/web/src/index.ts", "../@nivo/heatmap/node_modules/@react-spring/web/src/applyAnimatedValues.ts", "../@nivo/heatmap/node_modules/@react-spring/web/src/AnimatedStyle.ts", "../@nivo/heatmap/node_modules/@react-spring/web/src/primitives.ts", "../@nivo/heatmap/src/HeatMapTooltip.tsx", "../@nivo/heatmap/src/defaults.ts", "../@nivo/heatmap/src/compute.ts", "../@nivo/heatmap/src/hooks.ts", "../@nivo/heatmap/src/HeatMapCellRect.tsx", "../@nivo/heatmap/src/HeatMapCellCircle.tsx", "../@nivo/heatmap/src/HeatMapCells.tsx", "../@nivo/heatmap/src/HeatMapCellAnnotations.tsx", "../@nivo/heatmap/src/HeatMap.tsx", "../@nivo/heatmap/src/ResponsiveHeatMap.tsx", "../@nivo/heatmap/src/canvas.tsx", "../@nivo/heatmap/src/HeatMapCanvas.tsx", "../@nivo/heatmap/src/ResponsiveHeatMapCanvas.tsx"],
  "sourcesContent": ["import { Globals } from '@react-spring/core'\nimport { unstable_batchedUpdates } from 'react-dom'\nimport { createStringInterpolator, colors } from '@react-spring/shared'\nimport { createHost } from '@react-spring/animated'\nimport { applyAnimatedValues } from './applyAnimatedValues'\nimport { AnimatedStyle } from './AnimatedStyle'\nimport { WithAnimated } from './animated'\nimport { primitives } from './primitives'\n\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors,\n})\n\nconst host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: style => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props,\n})\n\nexport const animated = host.animated as WithAnimated\nexport { animated as a }\n\nexport * from './animated'\nexport * from '@react-spring/core'\n", "import { Lookup } from '@react-spring/types'\n\nconst isCustomPropRE = /^--/\n\ntype Value = string | number | boolean | null\n\nfunction dangerousStyleValue(name: string, value: Value) {\n  if (value == null || typeof value === 'boolean' || value === '') return ''\n  if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isCustomPropRE.test(name) &&\n    !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])\n  )\n    return value + 'px'\n  // Presumes implicit 'px' suffix for unitless numbers\n  return ('' + value).trim()\n}\n\nconst attributeCache: Lookup<string> = {}\n\ntype Instance = HTMLDivElement & { style?: Lookup }\n\nexport function applyAnimatedValues(instance: Instance, props: Lookup) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false\n  }\n\n  const isFilterElement =\n    instance.nodeName === 'filter' ||\n    (instance.parentNode && instance.parentNode.nodeName === 'filter')\n\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props!\n\n  const values = Object.values(attributes)\n  const names = Object.keys(attributes).map(name =>\n    isFilterElement || instance.hasAttribute(name)\n      ? name\n      : attributeCache[name] ||\n        (attributeCache[name] = name.replace(\n          /([A-Z])/g,\n          // Attributes are written in dash case\n          n => '-' + n.toLowerCase()\n        ))\n  )\n\n  if (children !== void 0) {\n    instance.textContent = children\n  }\n\n  // Apply CSS styles\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name])\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value)\n      } else {\n        instance.style[name] = value\n      }\n    }\n  }\n\n  // Apply DOM attributes\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i])\n  })\n\n  if (className !== void 0) {\n    instance.className = className\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute('viewBox', viewBox)\n  }\n}\n\nlet isUnitlessNumber: { [key: string]: true } = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true,\n}\n\nconst prefixKey = (prefix: string, key: string) =>\n  prefix + key.charAt(0).toUpperCase() + key.substring(1)\nconst prefixes = ['Webkit', 'Ms', 'Moz', 'O']\n\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach(prefix => (acc[prefixKey(prefix, prop)] = acc[prop]))\n  return acc\n}, isUnitlessNumber)\n", "import { AnimatedObject } from '@react-spring/animated'\nimport { Lookup, OneOrMore } from '@react-spring/types'\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  FluidEvent,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n} from '@react-spring/shared'\n\n/** The transform-functions\n * (https://developer.mozilla.org/fr/docs/Web/CSS/transform-function)\n * that you can pass as keys to your animated component style and that will be\n * animated. Perspective has been left out as it would conflict with the\n * non-transform perspective style.\n */\nconst domTransforms = /^(matrix|translate|scale|rotate|skew)/\n\n// These keys have \"px\" units by default\nconst pxTransforms = /^(translate)/\n\n// These keys have \"deg\" units by default\nconst degTransforms = /^(rotate|skew)/\n\ntype Value = number | string\n\n/** Add a unit to the value when the value is unit-less (eg: a number) */\nconst addUnit = (value: Value, unit: string): string | 0 =>\n  is.num(value) && value !== 0 ? value + unit : value\n\n/**\n * Checks if the input value matches the identity value.\n *\n *     isValueIdentity(0, 0)              // => true\n *     isValueIdentity('0px', 0)          // => true\n *     isValueIdentity([0, '0px', 0], 0)  // => true\n */\nconst isValueIdentity = (value: OneOrMore<Value>, id: number): boolean =>\n  is.arr(value)\n    ? value.every(v => isValueIdentity(v, id))\n    : is.num(value)\n      ? value === id\n      : parseFloat(value) === id\n\ntype Inputs = ReadonlyArray<Value | FluidValue<Value>>[]\ntype Transforms = ((value: any) => [string, boolean])[]\n\n/**\n * This AnimatedStyle will simplify animated components transforms by\n * interpolating all transform function passed as keys in the style object\n * including shortcuts such as x, y and z for translateX/Y/Z\n */\nexport class AnimatedStyle extends AnimatedObject {\n  constructor({ x, y, z, ...style }: Lookup) {\n    /**\n     * An array of arrays that contains the values (static or fluid)\n     * used by each transform function.\n     */\n    const inputs: Inputs = []\n    /**\n     * An array of functions that take a list of values (static or fluid)\n     * and returns (1) a CSS transform string and (2) a boolean that's true\n     * when the transform has no effect (eg: an identity transform).\n     */\n    const transforms: Transforms = []\n\n    // Combine x/y/z into translate3d\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0])\n      transforms.push((xyz: Value[]) => [\n        `translate3d(${xyz.map(v => addUnit(v, 'px')).join(',')})`, // prettier-ignore\n        isValueIdentity(xyz, 0),\n      ])\n    }\n\n    // Pluck any other transform-related props\n    eachProp(style, (value, key) => {\n      if (key === 'transform') {\n        inputs.push([value || ''])\n        transforms.push((transform: string) => [transform, transform === ''])\n      } else if (domTransforms.test(key)) {\n        delete style[key]\n        if (is.und(value)) return\n\n        const unit = pxTransforms.test(key)\n          ? 'px'\n          : degTransforms.test(key)\n            ? 'deg'\n            : ''\n\n        inputs.push(toArray(value))\n        transforms.push(\n          key === 'rotate3d'\n            ? ([x, y, z, deg]: [number, number, number, Value]) => [\n                `rotate3d(${x},${y},${z},${addUnit(deg, unit)})`,\n                isValueIdentity(deg, 0),\n              ]\n            : (input: Value[]) => [\n                `${key}(${input.map(v => addUnit(v, unit)).join(',')})`,\n                isValueIdentity(input, key.startsWith('scale') ? 1 : 0),\n              ]\n        )\n      }\n    })\n\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms)\n    }\n\n    super(style)\n  }\n}\n\n/** @internal */\nclass FluidTransform extends FluidValue<string> {\n  protected _value: string | null = null\n\n  constructor(\n    readonly inputs: Inputs,\n    readonly transforms: Transforms\n  ) {\n    super()\n  }\n\n  get() {\n    return this._value || (this._value = this._get())\n  }\n\n  protected _get() {\n    let transform = ''\n    let identity = true\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0])\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      )\n      transform += ' ' + t\n      identity = identity && id\n    })\n    return identity ? 'none' : transform\n  }\n\n  // Start observing our inputs once we have an observer.\n  protected observerAdded(count: number) {\n    if (count == 1)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      )\n  }\n\n  // Stop observing our inputs once we have no observers.\n  protected observerRemoved(count: number) {\n    if (count == 0)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      )\n  }\n\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      this._value = null\n    }\n    callFluidObservers(this, event)\n  }\n}\n", "export type Primitives = keyof JSX.IntrinsicElements\nexport const primitives: Primitives[] = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'big',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'section',\n  'select',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n  // SVG\n  'circle',\n  'clipPath',\n  'defs',\n  'ellipse',\n  'foreignObject',\n  'g',\n  'image',\n  'line',\n  'linearGradient',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'svg',\n  'text',\n  'tspan',\n]\n", "import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { HeatMapDatum, TooltipProps } from './types'\n\nconst NonMemoizedHeatMapTooltip = <Datum extends HeatMapDatum>({ cell }: TooltipProps<Datum>) => {\n    if (cell.formattedValue === null) return null\n\n    return (\n        <BasicTooltip\n            id={`${cell.serieId} - ${cell.data.x}`}\n            value={cell.formattedValue}\n            enableChip={true}\n            color={cell.color}\n        />\n    )\n}\n\nexport const HeatMapTooltip = memo(NonMemoizedHeatMapTooltip) as typeof NonMemoizedHeatMapTooltip\n", "import { DefaultHeatMapDatum, HeatMapCommonProps, LayerId } from './types'\nimport { HeatMapTooltip } from './HeatMapTooltip'\n\nexport const commonDefaultProps: Omit<\n    HeatMapCommonProps<DefaultHeatMapDatum>,\n    | 'margin'\n    | 'theme'\n    | 'valueFormat'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'role'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['grid', 'axes', 'cells', 'legends', 'annotations'],\n\n    forceSquare: false,\n    xInnerPadding: 0,\n    xOuterPadding: 0,\n    yInnerPadding: 0,\n    yOuterPadding: 0,\n    sizeVariation: false,\n\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.15,\n    borderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.8]] },\n\n    enableGridX: false,\n    enableGridY: false,\n\n    enableLabels: true,\n    label: 'formattedValue',\n    labelTextColor: { from: 'color', modifiers: [['darker', 2]] },\n\n    colors: {\n        type: 'sequential',\n        scheme: 'brown_blueGreen',\n    },\n    emptyColor: '#000000',\n\n    legends: [],\n    annotations: [],\n\n    isInteractive: true,\n    hoverTarget: 'rowColumn',\n    tooltip: HeatMapTooltip,\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: null,\n    axisLeft: {},\n    borderRadius: 0,\n    cellComponent: 'rect' as const,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: null,\n    axisLeft: {},\n    renderCell: 'rect' as const,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n", "import { scaleBand, scaleLinear } from 'd3-scale'\nimport { castBandScale } from '@nivo/scales'\nimport {\n    ComputedCell,\n    HeatMapCommonProps,\n    HeatMapDataProps,\n    HeatMapDatum,\n    SizeVariationConfig,\n} from './types'\n\nexport const computeLayout = ({\n    width: _width,\n    height: _height,\n    rows,\n    columns,\n    forceSquare,\n}: {\n    width: number\n    height: number\n    rows: number\n    columns: number\n    forceSquare: boolean\n}) => {\n    let width = _width\n    let height = _height\n\n    let offsetX = 0\n    let offsetY = 0\n\n    if (forceSquare) {\n        const cellWidth = Math.max(_width / columns, 0)\n        const cellHeight = Math.max(_height / rows, 0)\n        const cellSize = Math.min(cellWidth, cellHeight)\n\n        width = cellSize * columns\n        height = cellSize * rows\n\n        offsetX = (_width - width) / 2\n        offsetY = (_height - height) / 2\n    }\n\n    return {\n        offsetX,\n        offsetY,\n        width,\n        height,\n    }\n}\n\nexport const computeCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    width: _width,\n    height: _height,\n    xInnerPadding,\n    xOuterPadding,\n    yInnerPadding,\n    yOuterPadding,\n    forceSquare,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    'xOuterPadding' | 'xInnerPadding' | 'yOuterPadding' | 'yInnerPadding' | 'forceSquare'\n>) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const serieIds: string[] = []\n    const allValues: number[] = []\n\n    const cells: Pick<ComputedCell<Datum>, 'id' | 'serieId' | 'value' | 'data'>[] = []\n\n    data.forEach(serie => {\n        serieIds.push(serie.id)\n\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n\n            let value: number | null = null\n            if (datum.y !== undefined && datum.y !== null) {\n                allValues.push(datum.y)\n                value = datum.y\n            }\n\n            cells.push({\n                id: `${serie.id}.${datum.x}`,\n                serieId: serie.id,\n                value,\n                data: datum,\n            })\n        })\n    })\n\n    const xValues = Array.from(xValuesSet)\n\n    const { width, height, offsetX, offsetY } = computeLayout({\n        width: _width,\n        height: _height,\n        columns: xValues.length,\n        rows: serieIds.length,\n        forceSquare,\n    })\n\n    const xScale = castBandScale<Datum['x']>(\n        scaleBand<Datum['x']>()\n            .domain(xValues)\n            .range([0, width])\n            .paddingOuter(xOuterPadding)\n            .paddingInner(xInnerPadding)\n    )\n\n    const yScale = castBandScale<string>(\n        scaleBand<string>()\n            .domain(serieIds)\n            .range([0, height])\n            .paddingOuter(yOuterPadding)\n            .paddingInner(yInnerPadding)\n    )\n\n    const cellWidth = xScale.bandwidth()\n    const cellHeight = yScale.bandwidth()\n\n    const cellsWithPosition: Omit<\n        ComputedCell<Datum>,\n        'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n    >[] = cells.map(cell => ({\n        ...cell,\n        x: xScale(cell.data.x)! + cellWidth / 2,\n        y: yScale(cell.serieId)! + cellHeight / 2,\n        width: cellWidth,\n        height: cellHeight,\n    }))\n\n    return {\n        width,\n        height,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        minValue: Math.min(...allValues),\n        maxValue: Math.max(...allValues),\n        cells: cellsWithPosition,\n    }\n}\n\nexport const computeSizeScale = (\n    size: false | SizeVariationConfig,\n    min: number,\n    max: number\n): ((value: number | null) => number) => {\n    if (!size) return () => 1\n\n    const scale = scaleLinear()\n        .domain(size.values ? size.values : [min, max])\n        .range(size.sizes)\n\n    return (value: number | null) => {\n        if (value === null) return 1\n        return scale(value)\n    }\n}\n\nexport const getCellAnnotationPosition = <Datum extends HeatMapDatum>(\n    cell: ComputedCell<Datum>\n) => ({\n    x: cell.x,\n    y: cell.y,\n})\n\nexport const getCellAnnotationDimensions = <Datum extends HeatMapDatum>(\n    cell: ComputedCell<Datum>\n) => ({\n    size: Math.max(cell.width, cell.height),\n    width: cell.width,\n    height: cell.height,\n})\n", "import { useMemo, useCallback, useState } from 'react'\nimport { useTheme, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useInheritedColor, getContinuousColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport {\n    ComputedCell,\n    DefaultHeatMapDatum,\n    HeatMapCommonProps,\n    HeatMapDataProps,\n    HeatMapDatum,\n    SizeVariationConfig,\n} from './types'\nimport { commonDefaultProps } from './defaults'\nimport {\n    computeCells,\n    computeSizeScale,\n    getCellAnnotationPosition,\n    getCellAnnotationDimensions,\n} from './compute'\n\nexport const useComputeCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    width,\n    height,\n    xInnerPadding,\n    xOuterPadding,\n    yInnerPadding,\n    yOuterPadding,\n    forceSquare,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    'xOuterPadding' | 'xInnerPadding' | 'yOuterPadding' | 'yInnerPadding' | 'forceSquare'\n>) =>\n    useMemo(\n        () =>\n            computeCells<Datum, ExtraProps>({\n                data,\n                width,\n                height,\n                xInnerPadding,\n                xOuterPadding,\n                yInnerPadding,\n                yOuterPadding,\n                forceSquare,\n            }),\n        [\n            data,\n            width,\n            height,\n            xInnerPadding,\n            xOuterPadding,\n            yInnerPadding,\n            yOuterPadding,\n            forceSquare,\n        ]\n    )\n\nconst isHoverTargetByType = {\n    cell: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.id === current.id,\n    row: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.serieId === current.serieId,\n    column: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.data.x === current.data.x,\n    rowColumn: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.serieId === current.serieId || cell.data.x === current.data.x,\n}\n\nconst useSizeScale = (\n    size: false | SizeVariationConfig,\n    min: number,\n    max: number\n): ((value: number | null) => number) =>\n    useMemo(() => computeSizeScale(size, min, max), [size, min, max])\n\nconst useCellsStyle = <Datum extends HeatMapDatum = DefaultHeatMapDatum>({\n    cells,\n    minValue,\n    maxValue,\n    sizeVariation,\n    colors,\n    emptyColor,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    borderColor,\n    label,\n    labelTextColor,\n    valueFormat,\n    activeIds,\n}: {\n    cells: Omit<\n        ComputedCell<Datum>,\n        'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n    >[]\n    minValue: number\n    maxValue: number\n    valueFormat?: HeatMapCommonProps<Datum>['valueFormat']\n    activeIds: string[]\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    | 'sizeVariation'\n    | 'colors'\n    | 'emptyColor'\n    | 'opacity'\n    | 'activeOpacity'\n    | 'inactiveOpacity'\n    | 'borderColor'\n    | 'label'\n    | 'labelTextColor'\n>) => {\n    const getSize = useSizeScale(sizeVariation, minValue, maxValue)\n\n    const colorScale = useMemo(() => {\n        if (typeof colors === 'function') return null\n\n        return getContinuousColorScale(colors, {\n            min: minValue,\n            max: maxValue,\n        })\n    }, [colors, minValue, maxValue])\n\n    const getColor = useCallback(\n        (cell: Omit<ComputedCell<Datum>, 'color' | 'opacity' | 'borderColor'>) => {\n            if (cell.value !== null) {\n                if (typeof colors === 'function') return colors(cell)\n                if (colorScale !== null) return colorScale(cell.value)\n            }\n\n            return emptyColor\n        },\n        [colors, colorScale, emptyColor]\n    )\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = usePropertyAccessor(label)\n\n    const styledCells = useMemo(\n        () =>\n            cells.map(cell => {\n                let computedOpacity = opacity\n                if (activeIds.length > 0) {\n                    computedOpacity = activeIds.includes(cell.id) ? activeOpacity : inactiveOpacity\n                }\n\n                const sizeMultiplier = getSize(cell.value)\n\n                const computedCell = {\n                    ...cell,\n                    width: cell.width * sizeMultiplier,\n                    height: cell.height * sizeMultiplier,\n                    formattedValue: cell.value !== null ? formatValue(cell.value) : null,\n                    opacity: computedOpacity,\n                } as ComputedCell<Datum>\n\n                computedCell.label = getLabel(computedCell)\n                computedCell.color = getColor(computedCell)\n                computedCell.borderColor = getBorderColor(computedCell)\n                computedCell.labelTextColor = getLabelTextColor(computedCell)\n\n                return computedCell\n            }),\n        [\n            cells,\n            getSize,\n            getColor,\n            getBorderColor,\n            getLabelTextColor,\n            formatValue,\n            getLabel,\n            activeIds,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n        ]\n    )\n\n    return {\n        cells: styledCells,\n        colorScale,\n    }\n}\n\nexport const useHeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    data,\n    valueFormat,\n    width: _width,\n    height: _height,\n    xOuterPadding = commonDefaultProps.xOuterPadding,\n    xInnerPadding = commonDefaultProps.xInnerPadding,\n    yOuterPadding = commonDefaultProps.yOuterPadding,\n    yInnerPadding = commonDefaultProps.yInnerPadding,\n    forceSquare = commonDefaultProps.forceSquare,\n    sizeVariation = commonDefaultProps.sizeVariation,\n    colors = commonDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = commonDefaultProps.emptyColor,\n    opacity = commonDefaultProps.opacity,\n    activeOpacity = commonDefaultProps.activeOpacity,\n    inactiveOpacity = commonDefaultProps.inactiveOpacity,\n    borderColor = commonDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    label = commonDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = commonDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    hoverTarget = commonDefaultProps.hoverTarget,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Partial<\n    Pick<\n        HeatMapCommonProps<Datum>,\n        | 'valueFormat'\n        | 'xOuterPadding'\n        | 'xInnerPadding'\n        | 'yOuterPadding'\n        | 'yInnerPadding'\n        | 'forceSquare'\n        | 'sizeVariation'\n        | 'colors'\n        | 'emptyColor'\n        | 'opacity'\n        | 'activeOpacity'\n        | 'inactiveOpacity'\n        | 'borderColor'\n        | 'label'\n        | 'labelTextColor'\n        | 'hoverTarget'\n    >\n>) => {\n    const [activeCell, setActiveCell] = useState<ComputedCell<Datum> | null>(null)\n\n    const { width, height, offsetX, offsetY, cells, xScale, yScale, minValue, maxValue } =\n        useComputeCells<Datum, ExtraProps>({\n            data,\n            width: _width,\n            height: _height,\n            xOuterPadding,\n            xInnerPadding,\n            yOuterPadding,\n            yInnerPadding,\n            forceSquare,\n        })\n\n    const activeIds = useMemo(() => {\n        if (!activeCell) return []\n\n        const isHoverTarget = isHoverTargetByType[hoverTarget]\n\n        return cells.filter(cell => isHoverTarget(cell, activeCell)).map(cell => cell.id)\n    }, [cells, activeCell, hoverTarget])\n\n    const { cells: computedCells, colorScale } = useCellsStyle<Datum>({\n        cells,\n        minValue,\n        maxValue,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        valueFormat,\n        activeIds,\n    })\n\n    return {\n        width,\n        height,\n        offsetX,\n        offsetY,\n        cells: computedCells,\n        xScale,\n        yScale,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    }\n}\n\nexport const useCellAnnotations = <Datum extends HeatMapDatum>(\n    cells: ComputedCell<Datum>[],\n    annotations: AnnotationMatcher<ComputedCell<Datum>>[]\n) =>\n    useAnnotations<ComputedCell<Datum>>({\n        data: cells,\n        annotations,\n        getPosition: getCellAnnotationPosition,\n        getDimensions: getCellAnnotationDimensions,\n    })\n", "import { memo, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CellComponentProps, HeatMapDatum } from './types'\n\nconst NonMemoizedHeatMapCellRect = <Datum extends HeatMapDatum>({\n    cell,\n    borderWidth,\n    borderRadius,\n    animatedProps,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    enableLabels,\n}: CellComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter ? onMouseEnter(cell) : undefined,\n            onMouseMove: onMouseMove ? onMouseMove(cell) : undefined,\n            onMouseLeave: onMouseLeave ? onMouseLeave(cell) : undefined,\n            onClick: onClick ? onClick(cell) : undefined,\n        }),\n        [cell, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\n    return (\n        <animated.g\n            data-testid={`cell.${cell.id}`}\n            style={{ cursor: 'pointer' }}\n            opacity={animatedProps.opacity}\n            {...handlers}\n            transform={to(\n                [animatedProps.x, animatedProps.y, animatedProps.scale],\n                (x, y, scale) => `translate(${x}, ${y}) scale(${scale})`\n            )}\n        >\n            <animated.rect\n                transform={to(\n                    [animatedProps.width, animatedProps.height],\n                    (width, height) => `translate(${width * -0.5}, ${height * -0.5})`\n                )}\n                key={cell.id}\n                fill={animatedProps.color}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                stroke={animatedProps.borderColor}\n                strokeWidth={borderWidth}\n                rx={borderRadius}\n                ry={borderRadius}\n            />\n            {enableLabels && (\n                <animated.text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fill={animatedProps.labelTextColor}\n                    style={{\n                        ...theme.labels.text,\n                        fill: undefined,\n                        userSelect: 'none',\n                    }}\n                >\n                    {cell.label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const HeatMapCellRect = memo(NonMemoizedHeatMapCellRect) as typeof NonMemoizedHeatMapCellRect\n", "import { memo, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { HeatMapDatum, CellComponentProps } from './types'\n\nconst NonMemoizedHeatMapCellCircle = <Datum extends HeatMapDatum>({\n    cell,\n    borderWidth,\n    animatedProps,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    enableLabels,\n}: CellComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter ? onMouseEnter(cell) : undefined,\n            onMouseMove: onMouseMove ? onMouseMove(cell) : undefined,\n            onMouseLeave: onMouseLeave ? onMouseLeave(cell) : undefined,\n            onClick: onClick ? onClick(cell) : undefined,\n        }),\n        [cell, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\n    return (\n        <animated.g\n            data-testid={`cell.${cell.id}`}\n            style={{ cursor: 'pointer' }}\n            opacity={animatedProps.opacity}\n            {...handlers}\n            transform={to([animatedProps.x, animatedProps.y], (x, y) => `translate(${x}, ${y})`)}\n        >\n            <animated.circle\n                r={to(\n                    [animatedProps.width, animatedProps.height],\n                    (width, height) => Math.min(width, height) / 2\n                )}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n            />\n            {enableLabels && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    fill={animatedProps.labelTextColor}\n                    style={{\n                        ...theme.labels.text,\n                        fill: undefined,\n                    }}\n                >\n                    {cell.label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const HeatMapCellCircle = memo(\n    NonMemoizedHeatMapCellCircle\n) as typeof NonMemoizedHeatMapCellCircle\n", "import { createElement, MouseEvent, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    CellComponent,\n    ComputedCell,\n    HeatMapDatum,\n    HeatMapSvgProps,\n    CellAnimatedProps,\n} from './types'\nimport { HeatMapCellRect } from './HeatMapCellRect'\nimport { HeatMapCellCircle } from './HeatMapCellCircle'\n\ninterface HeatMapCellsProps<Datum extends HeatMapDatum, ExtraProps extends object> {\n    cells: ComputedCell<Datum>[]\n    cellComponent: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['cellComponent']>\n    borderRadius: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['borderRadius']>\n    borderWidth: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['borderWidth']>\n    isInteractive: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['isInteractive']>\n    setActiveCell: (cell: ComputedCell<Datum> | null) => void\n    onMouseEnter: HeatMapSvgProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove: HeatMapSvgProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave: HeatMapSvgProps<Datum, ExtraProps>['onMouseLeave']\n    onClick: HeatMapSvgProps<Datum, ExtraProps>['onClick']\n    tooltip: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['tooltip']>\n    enableLabels: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['enableLabels']>\n}\n\nconst enterTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: 0,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 0,\n})\n\nconst regularTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: cell.opacity,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 1,\n})\n\nconst exitTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: 0,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 0,\n})\n\nexport const HeatMapCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    cells,\n    cellComponent,\n    borderRadius,\n    borderWidth,\n    isInteractive,\n    setActiveCell,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    enableLabels,\n}: HeatMapCellsProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedCell<Datum>, CellAnimatedProps>(cells, {\n        keys: (cell: ComputedCell<Datum>) => cell.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: exitTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            setActiveCell(cell)\n            onMouseEnter?.(cell, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, setActiveCell, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            onMouseMove?.(cell, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            hideTooltip()\n            setActiveCell(null)\n            onMouseLeave?.(cell, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveCell, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            onClick?.(cell, event)\n        }\n    }, [isInteractive, onClick])\n\n    let Cell: CellComponent<Datum>\n    if (cellComponent === 'rect') {\n        Cell = HeatMapCellRect\n    } else if (cellComponent === 'circle') {\n        Cell = HeatMapCellCircle\n    } else {\n        Cell = cellComponent\n    }\n\n    return (\n        <>\n            {transition((animatedProps, cell) =>\n                createElement(Cell, {\n                    cell,\n                    borderRadius,\n                    borderWidth,\n                    animatedProps,\n                    enableLabels,\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            )}\n        </>\n    )\n}\n", "import { Annotation } from '@nivo/annotations'\nimport { ComputedCell, HeatMapCommonProps, HeatMapDatum } from './types'\nimport { useCellAnnotations } from './hooks'\n\ninterface HeatMapCellAnnotationsProps<Datum extends HeatMapDatum> {\n    cells: ComputedCell<Datum>[]\n    annotations: NonNullable<HeatMapCommonProps<Datum>['annotations']>\n}\n\nexport const HeatMapCellAnnotations = <Datum extends HeatMapDatum>({\n    cells,\n    annotations,\n}: HeatMapCellAnnotationsProps<Datum>) => {\n    const boundAnnotations = useCellAnnotations<Datum>(cells, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { ReactNode, Fragment, createElement, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { AnchoredContinuousColorsLegendSvg } from '@nivo/legends'\nimport {\n    DefaultHeatMapDatum,\n    HeatMapDatum,\n    HeatMapCommonProps,\n    HeatMapSvgProps,\n    LayerId,\n    CustomLayerProps,\n} from './types'\nimport { useHeatMap } from './hooks'\nimport { svgDefaultProps } from './defaults'\nimport { HeatMapCells } from './HeatMapCells'\nimport { HeatMapCellAnnotations } from './HeatMapCellAnnotations'\n\ntype InnerHeatMapProps<Datum extends HeatMapDatum, ExtraProps extends object> = Omit<\n    HeatMapSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerHeatMap = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    layers = svgDefaultProps.layers,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare = svgDefaultProps.forceSquare,\n    xInnerPadding = svgDefaultProps.xInnerPadding,\n    xOuterPadding = svgDefaultProps.xOuterPadding,\n    yInnerPadding = svgDefaultProps.yInnerPadding,\n    yOuterPadding = svgDefaultProps.yOuterPadding,\n    sizeVariation = svgDefaultProps.sizeVariation,\n    cellComponent = svgDefaultProps.cellComponent as NonNullable<\n        HeatMapSvgProps<Datum, ExtraProps>['cellComponent']\n    >,\n    opacity = svgDefaultProps.opacity,\n    activeOpacity = svgDefaultProps.activeOpacity,\n    inactiveOpacity = svgDefaultProps.inactiveOpacity,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    axisTop = svgDefaultProps.axisTop,\n    axisRight = svgDefaultProps.axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableLabels = svgDefaultProps.enableLabels,\n    label = svgDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = svgDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    colors = svgDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = svgDefaultProps.emptyColor,\n    legends = svgDefaultProps.legends,\n    annotations = svgDefaultProps.annotations as HeatMapCommonProps<Datum>['annotations'],\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    hoverTarget = svgDefaultProps.hoverTarget,\n    tooltip = svgDefaultProps.tooltip as HeatMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerHeatMapProps<Datum, ExtraProps>) => {\n    const {\n        margin: _margin,\n        innerWidth: _innerWidth,\n        innerHeight: _innerHeight,\n        outerWidth,\n        outerHeight,\n    } = useDimensions(width, height, partialMargin)\n\n    const {\n        width: innerWidth,\n        height: innerHeight,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        cells,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    } = useHeatMap<Datum, ExtraProps>({\n        data,\n        valueFormat,\n        width: _innerWidth,\n        height: _innerHeight,\n        forceSquare,\n        xInnerPadding,\n        xOuterPadding,\n        yInnerPadding,\n        yOuterPadding,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n    })\n\n    const margin = useMemo(\n        () => ({\n            ..._margin,\n            top: _margin.top + offsetY,\n            left: _margin.left + offsetX,\n        }),\n        [_margin, offsetX, offsetY]\n    )\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        cells: null,\n        legends: null,\n        annotations: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth} // - offsetX * 2\n                height={innerHeight} // - offsetY * 2\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth} // - offsetX * 2\n                height={innerHeight} // - offsetY * 2\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('cells')) {\n        layerById.cells = (\n            <Fragment key=\"cells\">\n                <HeatMapCells<Datum, ExtraProps>\n                    cells={cells}\n                    cellComponent={cellComponent}\n                    borderRadius={borderRadius}\n                    borderWidth={borderWidth}\n                    isInteractive={isInteractive}\n                    setActiveCell={setActiveCell}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                    enableLabels={enableLabels}\n                />\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('legends') && colorScale !== null) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, index) => (\n                    <AnchoredContinuousColorsLegendSvg\n                        {...legend}\n                        key={index}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        scale={colorScale}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('annotations') && annotations.length > 0) {\n        layerById.annotations = (\n            <HeatMapCellAnnotations<Datum>\n                key=\"annotations\"\n                cells={cells}\n                annotations={annotations}\n            />\n        )\n    }\n\n    const customLayerProps: CustomLayerProps<Datum> = {\n        cells,\n        activeCell,\n        setActiveCell,\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={Object.assign({}, margin, {\n                top: margin.top, //+ offsetY,\n                left: margin.left, // + offsetX,\n            })}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const HeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: HeatMapSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerHeatMap<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultHeatMapDatum, HeatMapDatum, HeatMapSvgProps } from './types'\nimport { HeatMap } from './HeatMap'\n\nexport const ResponsiveHeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>(\n    props: Omit<HeatMapSvgProps<Datum, ExtraProps>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <HeatMap<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { CellCanvasRendererProps, HeatMapDatum } from './types'\n\nexport const renderRect = <Datum extends HeatMapDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        cell: { x, y, width, height, color, borderColor, opacity, labelTextColor, label },\n        borderWidth,\n        enableLabels,\n        theme,\n    }: CellCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.fillRect(x - width / 2, y - height / 2, width, height)\n    if (borderWidth > 0) {\n        ctx.strokeRect(x - width / 2, y - height / 2, width, height)\n    }\n\n    if (enableLabels) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontWeight ? `${theme.labels.text.fontWeight} ` : ''}${\n            theme.labels.text.fontSize\n        }px ${theme.labels.text.fontFamily}`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n\nexport const renderCircle = <Datum extends HeatMapDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        cell: { x, y, width, height, color, borderColor, opacity, labelTextColor, label },\n        borderWidth,\n        enableLabels,\n        theme,\n    }: CellCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    const radius = Math.min(width, height) / 2\n\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI)\n\n    ctx.fill()\n    if (borderWidth > 0) {\n        ctx.stroke()\n    }\n\n    if (enableLabels) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontWeight ? `${theme.labels.text.fontWeight} ` : ''}${\n            theme.labels.text.fontSize\n        }px ${theme.labels.text.fontFamily}`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n", "import { useEffect, useRef, useCallback, createElement, useMemo, MouseEvent } from 'react'\nimport { getRelativeCursor, isCursorInRect, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { renderContinuousColorLegendToCanvas } from '@nivo/legends'\nimport { renderAnnotationsToCanvas, useComputedAnnotations } from '@nivo/annotations'\nimport { useHeatMap, useCellAnnotations } from './hooks'\nimport { renderRect, renderCircle } from './canvas'\nimport { canvasDefaultProps } from './defaults'\nimport {\n    CellCanvasRenderer,\n    DefaultHeatMapDatum,\n    HeatMapCanvasProps,\n    HeatMapCommonProps,\n    HeatMapDatum,\n    CellShape,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkCanvasProps<Datum extends HeatMapDatum, ExtraProps extends object> = Omit<\n    HeatMapCanvasProps<Datum, ExtraProps>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerHeatMapCanvas = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    layers = canvasDefaultProps.layers,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    xInnerPadding = canvasDefaultProps.xInnerPadding,\n    xOuterPadding = canvasDefaultProps.xOuterPadding,\n    yInnerPadding = canvasDefaultProps.yInnerPadding,\n    yOuterPadding = canvasDefaultProps.yOuterPadding,\n    forceSquare = canvasDefaultProps.forceSquare,\n    sizeVariation = canvasDefaultProps.sizeVariation,\n    renderCell: _renderCell = canvasDefaultProps.renderCell as CellShape,\n    opacity = canvasDefaultProps.opacity,\n    activeOpacity = canvasDefaultProps.activeOpacity,\n    inactiveOpacity = canvasDefaultProps.inactiveOpacity,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    axisTop = canvasDefaultProps.axisTop,\n    axisRight = canvasDefaultProps.axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableLabels = canvasDefaultProps.enableLabels,\n    label = canvasDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = canvasDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    colors = canvasDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = canvasDefaultProps.emptyColor,\n    legends = canvasDefaultProps.legends,\n    annotations = canvasDefaultProps.annotations as HeatMapCommonProps<Datum>['annotations'],\n    isInteractive = canvasDefaultProps.isInteractive,\n    onClick,\n    hoverTarget = canvasDefaultProps.hoverTarget,\n    tooltip = canvasDefaultProps.tooltip as HeatMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n}: InnerNetworkCanvasProps<Datum, ExtraProps>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const {\n        margin: _margin,\n        innerWidth: _innerWidth,\n        innerHeight: _innerHeight,\n        outerWidth,\n        outerHeight,\n    } = useDimensions(width, height, partialMargin)\n\n    const {\n        width: innerWidth,\n        height: innerHeight,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        cells,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    } = useHeatMap<Datum, ExtraProps>({\n        data,\n        valueFormat,\n        width: _innerWidth,\n        height: _innerHeight,\n        xInnerPadding,\n        xOuterPadding,\n        yInnerPadding,\n        yOuterPadding,\n        forceSquare,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n    })\n\n    const margin = useMemo(\n        () => ({\n            ..._margin,\n            top: _margin.top + offsetY,\n            left: _margin.left + offsetX,\n        }),\n        [_margin, offsetX, offsetY]\n    )\n\n    const boundAnnotations = useCellAnnotations(cells, annotations)\n    const computedAnnotations = useComputedAnnotations({\n        annotations: boundAnnotations,\n    })\n\n    let renderCell: CellCanvasRenderer<Datum>\n    if (typeof _renderCell === 'function') {\n        renderCell = _renderCell\n    } else if (_renderCell === 'circle') {\n        renderCell = renderCircle\n    } else {\n        renderCell = renderRect\n    }\n\n    const theme = useTheme()\n\n    const customLayerProps: CustomLayerProps<Datum> = useMemo(\n        () => ({\n            cells,\n            activeCell,\n            setActiveCell,\n        }),\n        [cells, activeCell, setActiveCell]\n    )\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top) // + offsetX, margin.top + offsetY)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                if (enableGridX) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                    })\n                }\n                if (enableGridY) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                    })\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth, // - offsetX * 2,\n                    height: innerHeight, // - offsetY * 2,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'cells') {\n                ctx.textAlign = 'center'\n                ctx.textBaseline = 'middle'\n\n                cells.forEach(cell => {\n                    renderCell(ctx, { cell, borderWidth, enableLabels, theme })\n                })\n            } else if (layer === 'legends' && colorScale !== null) {\n                legends.forEach(legend => {\n                    renderContinuousColorLegendToCanvas(ctx, {\n                        ...legend,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        scale: colorScale,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, {\n                    annotations: computedAnnotations,\n                    theme,\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        pixelRatio,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        layers,\n        customLayerProps,\n        cells,\n        renderCell,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        xScale,\n        yScale,\n        theme,\n        borderWidth,\n        enableLabels,\n        colorScale,\n        legends,\n        computedAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            const cell = cells.find(c =>\n                isCursorInRect(\n                    c.x + margin.left - c.width / 2, // + offsetX - c.width / 2,\n                    c.y + margin.top - c.height / 2, //+ offsetY - c.height / 2,\n                    c.width,\n                    c.height,\n                    x,\n                    y\n                )\n            )\n            if (cell !== undefined) {\n                setActiveCell(cell)\n                showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            } else {\n                setActiveCell(null)\n                hideTooltip()\n            }\n        },\n        [\n            canvasEl,\n            cells,\n            margin,\n            // offsetX,\n            // offsetY,\n            setActiveCell,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setActiveCell(null)\n        hideTooltip()\n    }, [setActiveCell, hideTooltip])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (activeCell === null) return\n\n            onClick?.(activeCell, event)\n        },\n        [activeCell, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const HeatMapCanvas = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: HeatMapCanvasProps<Datum, ExtraProps>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerHeatMapCanvas<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultHeatMapDatum, HeatMapCanvasProps, HeatMapDatum } from './types'\nimport { HeatMapCanvas } from './HeatMapCanvas'\n\nexport const ResponsiveHeatMapCanvas = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>(\n    props: Omit<HeatMapCanvasProps<Datum, ExtraProps>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <HeatMapCanvas<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": []
}
