{
  "version": 3,
  "sources": ["../@nivo/arcs/node_modules/@react-spring/web/src/index.ts", "../@nivo/arcs/node_modules/@react-spring/web/src/applyAnimatedValues.ts", "../@nivo/arcs/node_modules/@react-spring/web/src/AnimatedStyle.ts", "../@nivo/arcs/node_modules/@react-spring/web/src/primitives.ts", "../@nivo/arcs/src/arc_labels/ArcLabel.tsx", "../@nivo/arcs/src/utils.ts", "../@nivo/arcs/src/arcTransitionMode.ts", "../@nivo/arcs/src/centers.ts", "../@nivo/arcs/src/arc_labels/ArcLabelsLayer.tsx", "../@nivo/arcs/src/arc_labels/canvas.ts", "../@nivo/arcs/src/arc_labels/useArcLabels.ts", "../@nivo/arcs/src/arc_labels/index.ts", "../@nivo/arcs/src/arc_link_labels/ArcLinkLabel.tsx", "../@nivo/arcs/src/arc_link_labels/compute.ts", "../@nivo/arcs/src/arc_link_labels/useArcLinkLabelsTransition.ts", "../@nivo/arcs/src/arc_link_labels/ArcLinkLabelsLayer.tsx", "../@nivo/arcs/src/arc_link_labels/canvas.ts", "../@nivo/arcs/src/arc_link_labels/useArcLinks.ts", "../@nivo/arcs/src/arc_link_labels/useArcLinkLabels.ts", "../@nivo/arcs/src/arc_link_labels/index.ts", "../@nivo/arcs/src/ArcLine.tsx", "../@nivo/arcs/src/ArcShape.tsx", "../@nivo/arcs/src/interpolateArc.ts", "../@nivo/arcs/src/useArcsTransition.ts", "../@nivo/arcs/src/ArcsLayer.tsx", "../@nivo/arcs/src/boundingBox.ts", "../@nivo/arcs/src/interactivity.ts", "../@nivo/arcs/src/useAnimatedArc.ts", "../@nivo/arcs/src/useArcGenerator.ts", "../@nivo/pie/src/PieLegends.tsx", "../@nivo/pie/src/props.ts", "../@nivo/pie/src/PieTooltip.tsx", "../@nivo/pie/src/hooks.ts", "../@nivo/pie/src/Arcs.tsx", "../@nivo/pie/src/Pie.tsx", "../@nivo/pie/src/ResponsivePie.tsx", "../@nivo/pie/src/PieCanvas.tsx", "../@nivo/pie/src/ResponsivePieCanvas.tsx"],
  "sourcesContent": ["import { Globals } from '@react-spring/core'\nimport { unstable_batchedUpdates } from 'react-dom'\nimport { createStringInterpolator, colors } from '@react-spring/shared'\nimport { createHost } from '@react-spring/animated'\nimport { applyAnimatedValues } from './applyAnimatedValues'\nimport { AnimatedStyle } from './AnimatedStyle'\nimport { WithAnimated } from './animated'\nimport { primitives } from './primitives'\n\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors,\n})\n\nconst host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: style => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props,\n})\n\nexport const animated = host.animated as WithAnimated\nexport { animated as a }\n\nexport * from './animated'\nexport * from '@react-spring/core'\n", "import { Lookup } from '@react-spring/types'\n\nconst isCustomPropRE = /^--/\n\ntype Value = string | number | boolean | null\n\nfunction dangerousStyleValue(name: string, value: Value) {\n  if (value == null || typeof value === 'boolean' || value === '') return ''\n  if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isCustomPropRE.test(name) &&\n    !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])\n  )\n    return value + 'px'\n  // Presumes implicit 'px' suffix for unitless numbers\n  return ('' + value).trim()\n}\n\nconst attributeCache: Lookup<string> = {}\n\ntype Instance = HTMLDivElement & { style?: Lookup }\n\nexport function applyAnimatedValues(instance: Instance, props: Lookup) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false\n  }\n\n  const isFilterElement =\n    instance.nodeName === 'filter' ||\n    (instance.parentNode && instance.parentNode.nodeName === 'filter')\n\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props!\n\n  const values = Object.values(attributes)\n  const names = Object.keys(attributes).map(name =>\n    isFilterElement || instance.hasAttribute(name)\n      ? name\n      : attributeCache[name] ||\n        (attributeCache[name] = name.replace(\n          /([A-Z])/g,\n          // Attributes are written in dash case\n          n => '-' + n.toLowerCase()\n        ))\n  )\n\n  if (children !== void 0) {\n    instance.textContent = children\n  }\n\n  // Apply CSS styles\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name])\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value)\n      } else {\n        instance.style[name] = value\n      }\n    }\n  }\n\n  // Apply DOM attributes\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i])\n  })\n\n  if (className !== void 0) {\n    instance.className = className\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute('viewBox', viewBox)\n  }\n}\n\nlet isUnitlessNumber: { [key: string]: true } = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true,\n}\n\nconst prefixKey = (prefix: string, key: string) =>\n  prefix + key.charAt(0).toUpperCase() + key.substring(1)\nconst prefixes = ['Webkit', 'Ms', 'Moz', 'O']\n\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach(prefix => (acc[prefixKey(prefix, prop)] = acc[prop]))\n  return acc\n}, isUnitlessNumber)\n", "import { AnimatedObject } from '@react-spring/animated'\nimport { Lookup, OneOrMore } from '@react-spring/types'\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  FluidEvent,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n} from '@react-spring/shared'\n\n/** The transform-functions\n * (https://developer.mozilla.org/fr/docs/Web/CSS/transform-function)\n * that you can pass as keys to your animated component style and that will be\n * animated. Perspective has been left out as it would conflict with the\n * non-transform perspective style.\n */\nconst domTransforms = /^(matrix|translate|scale|rotate|skew)/\n\n// These keys have \"px\" units by default\nconst pxTransforms = /^(translate)/\n\n// These keys have \"deg\" units by default\nconst degTransforms = /^(rotate|skew)/\n\ntype Value = number | string\n\n/** Add a unit to the value when the value is unit-less (eg: a number) */\nconst addUnit = (value: Value, unit: string): string | 0 =>\n  is.num(value) && value !== 0 ? value + unit : value\n\n/**\n * Checks if the input value matches the identity value.\n *\n *     isValueIdentity(0, 0)              // => true\n *     isValueIdentity('0px', 0)          // => true\n *     isValueIdentity([0, '0px', 0], 0)  // => true\n */\nconst isValueIdentity = (value: OneOrMore<Value>, id: number): boolean =>\n  is.arr(value)\n    ? value.every(v => isValueIdentity(v, id))\n    : is.num(value)\n      ? value === id\n      : parseFloat(value) === id\n\ntype Inputs = ReadonlyArray<Value | FluidValue<Value>>[]\ntype Transforms = ((value: any) => [string, boolean])[]\n\n/**\n * This AnimatedStyle will simplify animated components transforms by\n * interpolating all transform function passed as keys in the style object\n * including shortcuts such as x, y and z for translateX/Y/Z\n */\nexport class AnimatedStyle extends AnimatedObject {\n  constructor({ x, y, z, ...style }: Lookup) {\n    /**\n     * An array of arrays that contains the values (static or fluid)\n     * used by each transform function.\n     */\n    const inputs: Inputs = []\n    /**\n     * An array of functions that take a list of values (static or fluid)\n     * and returns (1) a CSS transform string and (2) a boolean that's true\n     * when the transform has no effect (eg: an identity transform).\n     */\n    const transforms: Transforms = []\n\n    // Combine x/y/z into translate3d\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0])\n      transforms.push((xyz: Value[]) => [\n        `translate3d(${xyz.map(v => addUnit(v, 'px')).join(',')})`, // prettier-ignore\n        isValueIdentity(xyz, 0),\n      ])\n    }\n\n    // Pluck any other transform-related props\n    eachProp(style, (value, key) => {\n      if (key === 'transform') {\n        inputs.push([value || ''])\n        transforms.push((transform: string) => [transform, transform === ''])\n      } else if (domTransforms.test(key)) {\n        delete style[key]\n        if (is.und(value)) return\n\n        const unit = pxTransforms.test(key)\n          ? 'px'\n          : degTransforms.test(key)\n            ? 'deg'\n            : ''\n\n        inputs.push(toArray(value))\n        transforms.push(\n          key === 'rotate3d'\n            ? ([x, y, z, deg]: [number, number, number, Value]) => [\n                `rotate3d(${x},${y},${z},${addUnit(deg, unit)})`,\n                isValueIdentity(deg, 0),\n              ]\n            : (input: Value[]) => [\n                `${key}(${input.map(v => addUnit(v, unit)).join(',')})`,\n                isValueIdentity(input, key.startsWith('scale') ? 1 : 0),\n              ]\n        )\n      }\n    })\n\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms)\n    }\n\n    super(style)\n  }\n}\n\n/** @internal */\nclass FluidTransform extends FluidValue<string> {\n  protected _value: string | null = null\n\n  constructor(\n    readonly inputs: Inputs,\n    readonly transforms: Transforms\n  ) {\n    super()\n  }\n\n  get() {\n    return this._value || (this._value = this._get())\n  }\n\n  protected _get() {\n    let transform = ''\n    let identity = true\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0])\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      )\n      transform += ' ' + t\n      identity = identity && id\n    })\n    return identity ? 'none' : transform\n  }\n\n  // Start observing our inputs once we have an observer.\n  protected observerAdded(count: number) {\n    if (count == 1)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      )\n  }\n\n  // Stop observing our inputs once we have no observers.\n  protected observerRemoved(count: number) {\n    if (count == 0)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      )\n  }\n\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      this._value = null\n    }\n    callFluidObservers(this, event)\n  }\n}\n", "export type Primitives = keyof JSX.IntrinsicElements\nexport const primitives: Primitives[] = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'big',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'section',\n  'select',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n  // SVG\n  'circle',\n  'clipPath',\n  'defs',\n  'ellipse',\n  'foreignObject',\n  'g',\n  'image',\n  'line',\n  'linearGradient',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'svg',\n  'text',\n  'tspan',\n]\n", "import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n", "import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n", "import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = (typeof arcTransitionModes)[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<Datum extends DatumWithArc, ExtraProps> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport const useArcTransitionMode = <Datum extends DatumWithArc, ExtraProps>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.enter(datum.arc),\n                ...(extraTransition ? extraTransition.enter(datum) : {}),\n            }),\n            update: (datum: Datum) => ({\n                progress: 1,\n                ...transitionMode.update(datum.arc),\n                ...(extraTransition ? extraTransition.update(datum) : {}),\n            }),\n            leave: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.leave(datum.arc),\n                ...(extraTransition ? extraTransition.leave(datum) : {}),\n            }),\n        }\n    }, [mode, extraTransition])\n", "import { useMemo } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    positionFromAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport { ArcTransitionMode, TransitionExtra, useArcTransitionMode } from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter =\n    (offset: number) =>\n    (\n        startAngleValue: SpringValue<number>,\n        endAngleValue: SpringValue<number>,\n        innerRadiusValue: SpringValue<number>,\n        outerRadiusValue: SpringValue<number>\n    ) =>\n        to(\n            [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n            (startAngle, endAngle, innerRadius, outerRadius) => {\n                const centroid = computeArcCenter(\n                    { startAngle, endAngle, innerRadius, outerRadius },\n                    offset\n                )\n\n                return `translate(${centroid.x},${centroid.y})`\n            }\n        )\n\nexport const useArcCentersTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n", "import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                return (\n                    Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                    skipAngle\n                )\n            }),\n        [data, skipAngle]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n", "import { CompleteTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabel } from './useArcLabels'\n\nexport const drawCanvasArcLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLabel<Datum>[],\n    theme: CompleteTheme\n) => {\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.fillText(`${label.label}`, label.x, label.y)\n    })\n}\n", "import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcCenters, ArcCenter } from '../centers'\n\nexport interface ArcLabel<Datum extends DatumWithArcAndColor> extends ArcCenter<Datum> {\n    label: string\n    textColor: string\n}\n\n/**\n * Compute arc labels, please note that the datum should\n * contain a color in order to be able to compute the label text color.\n *\n * Please see `useArcCenters` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset,\n    skipAngle,\n    label,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    skipAngle?: number\n    label: PropertyAccessor<Datum, string>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (datum: Datum) => {\n            return {\n                label: getLabel(datum),\n                textColor: getTextColor(datum),\n            }\n        },\n        [getLabel, getTextColor]\n    )\n\n    return useArcCenters<Datum, Omit<ArcLabel<Datum>, keyof ArcCenter<Datum>>>({\n        data,\n        offset,\n        skipAngle,\n        computeExtraProps,\n    })\n}\n", "import { ArcLabel } from './ArcLabel'\n\nexport const ArcLabelComponent = ArcLabel\nexport * from './ArcLabelsLayer'\nexport * from './canvas'\nexport * from './props'\nexport * from './useArcLabels'\n", "import { useTheme } from '@nivo/core'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <animated.text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n", "import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n", "import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor, offset]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n", "import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const { transition, interpolateLink, interpolateTextAnchor, interpolateTextPosition } =\n        useArcLinkLabelsTransition<Datum>({\n            data,\n            skipAngle,\n            offset,\n            diagonalLength,\n            straightLength,\n            textOffset,\n            linkColor,\n            textColor,\n        })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n", "import {\n    // @ts-ignore\n    textPropsByEngine,\n    CompleteTheme,\n} from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkLabel } from './types'\n\nexport const drawCanvasArcLinkLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLinkLabel<Datum>[],\n    theme: CompleteTheme,\n    strokeWidth: number\n) => {\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor]\n        ctx.fillText(`${label.label}`, label.x, label.y)\n\n        ctx.beginPath()\n        ctx.strokeStyle = label.linkColor\n        ctx.lineWidth = strokeWidth\n        label.points.forEach((point, index) => {\n            if (index === 0) ctx.moveTo(point.x, point.y)\n            else ctx.lineTo(point.x, point.y)\n        })\n        ctx.stroke()\n    })\n}\n", "import { useMemo } from 'react'\nimport { radiansToDegrees } from '@nivo/core'\nimport { DatumWithArc } from '../types'\nimport { ArcLinkWithDatum } from './types'\nimport { computeArcLink } from './compute'\n\n/**\n * Compute links for an array of data containing arcs.\n *\n * This is typically used to create labels for arcs,\n * and it's used for the `useArcLinkLabels` hook.\n */\nexport const useArcLinks = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    skipAngle = 0,\n    offset = 0.5,\n    diagonalLength,\n    straightLength,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // offset from arc outer radius in pixels\n    offset?: number\n    // length of the diagonal segment of the link\n    diagonalLength: number\n    // length of the straight segment of the link\n    straightLength: number\n    // this can be used to append extra properties to the links,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: ArcLinkWithDatum<Datum>) => ExtraProps\n}): (ArcLinkWithDatum<Datum> & ExtraProps)[] => {\n    const links = useMemo(\n        () =>\n            data\n                // filter out arcs with a length below `skipAngle`\n                .filter(\n                    datum =>\n                        Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                        skipAngle\n                )\n                // compute the link for each eligible arc\n                .map(datum => ({\n                    ...computeArcLink(datum.arc, offset, diagonalLength, straightLength),\n                    data: datum,\n                })),\n        [data, skipAngle, offset, diagonalLength, straightLength]\n    )\n\n    // splitting memoization of links and extra props can be more efficient,\n    // this way if only `computeExtraProps` changes, we skip links computation.\n    return useMemo(\n        () =>\n            links.map(link => ({\n                ...computeExtraProps(link),\n                ...link,\n            })),\n        [links, computeExtraProps]\n    )\n}\n", "import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkWithDatum, ArcLinkLabel } from './types'\nimport { useArcLinks } from './useArcLinks'\n\n/**\n * Compute arc link labels, please note that the datum should\n * contain a color in order to be able to compute the link/label text color.\n *\n * Please see `useArcLinks` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLinkLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset = 0,\n    label,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    skipAngle?: number\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    label: PropertyAccessor<Datum, string>\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (link: ArcLinkWithDatum<Datum>) => {\n            const position = {\n                x: link.points[2].x,\n                y: link.points[2].y,\n            }\n            let textAnchor: ArcLinkLabel<Datum>['textAnchor']\n            if (link.side === 'before') {\n                position.x -= textOffset\n                textAnchor = 'end'\n            } else {\n                position.x += textOffset\n                textAnchor = 'start'\n            }\n\n            return {\n                ...position,\n                label: getLabel(link.data),\n                linkColor: getLinkColor(link.data),\n                textAnchor,\n                textColor: getTextColor(link.data),\n            }\n        },\n        [getLabel, getLinkColor, getTextColor, textOffset]\n    )\n\n    return useArcLinks<Datum, Omit<ArcLinkLabel<Datum>, keyof ArcLinkWithDatum<Datum>>>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        computeExtraProps,\n    })\n}\n", "import { ArcLinkLabel } from './ArcLinkLabel'\n\nexport const ArcLinkLabelComponent = ArcLinkLabel\nexport * from './ArcLinkLabelsLayer'\nexport * from './canvas'\nexport * from './compute'\nexport * from './props'\nexport * from './types'\nexport * from './useArcLinkLabels'\nexport * from './useArcLinkLabelsTransition'\nexport * from './useArcLinks'\n", "import { animated, to, AnimatedProps } from '@react-spring/web'\nimport { ExtractProps } from '@nivo/core'\nimport { generateSvgArc } from './utils'\n\ntype ArcLineProps = {\n    animated: AnimatedProps<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>\n} & ExtractProps<typeof animated.path>\n\nexport const ArcLine = ({ animated: animatedProps, ...rest }: ArcLineProps) => (\n    <animated.path\n        d={to(\n            [animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle],\n            (radius, start, end) => generateSvgArc(radius, start, end)\n        )}\n        {...rest}\n    />\n)\n", "import { useCallback, MouseEvent } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onClick?.(datum, event),\n        [onClick, datum]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseEnter?.(datum, event),\n        [onMouseEnter, datum]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseMove?.(datum, event),\n        [onMouseMove, datum]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseLeave?.(datum, event),\n        [onMouseLeave, datum]\n    )\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n        />\n    )\n}\n", "import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n", "import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport { ArcTransitionMode, useArcTransitionMode, TransitionExtra } from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n", "import { createElement } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n", "import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n", "import { getDistance, getAngle } from '@nivo/core'\nimport { Arc } from './types'\n\n/**\n * Check if cursor is in given ring.\n */\nexport const isCursorInRing = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    cursorX: number,\n    cursorY: number\n) => {\n    const distance = getDistance(cursorX, cursorY, centerX, centerY)\n\n    return distance < radius && distance > innerRadius\n}\n\n/**\n * Search for an arc being under cursor.\n */\nexport const findArcUnderCursor = <A extends Arc = Arc>(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    arcs: A[],\n    cursorX: number,\n    cursorY: number\n): A | undefined => {\n    if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n        return undefined\n    }\n\n    const cursorAngle = getAngle(cursorX, cursorY, centerX, centerY)\n\n    return arcs.find(\n        ({ startAngle, endAngle }) => cursorAngle >= startAngle && cursorAngle < endAngle\n    )\n}\n", "import { useSpring } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { Arc, ArcGenerator } from './types'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a single arc,\n * if you want to animate a group of arcs,\n * please have a look at the `useArcsTransition` hook.\n */\nexport const useAnimatedArc = (datumWithArc: { arc: Arc }, arcGenerator: ArcGenerator) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedValues = useSpring({\n        startAngle: datumWithArc.arc.startAngle,\n        endAngle: datumWithArc.arc.endAngle,\n        innerRadius: datumWithArc.arc.innerRadius,\n        outerRadius: datumWithArc.arc.outerRadius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        ...animatedValues,\n        path: interpolateArc(\n            animatedValues.startAngle,\n            animatedValues.endAngle,\n            animatedValues.innerRadius,\n            animatedValues.outerRadius,\n            arcGenerator\n        ),\n    }\n}\n", "import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n", "import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, DatumId, LegendDatum } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: LegendDatum<RawDatum>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nexport const PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i: number) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n", "import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcs', 'arcLinkLabels', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n", "import { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport {\n    MayHaveLabel,\n    CompletePieSvgProps,\n    ComputedDatum,\n    DatumId,\n    PieArc,\n    PieCustomLayerProps,\n    LegendDatum,\n    CommonPieProps,\n} from './types'\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: readonly RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n    forwardLegendData,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n    forwardLegendData?: CommonPieProps<RawDatum>['forwardLegendData']\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: LegendDatum<RawDatum>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    const result = useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData: LegendDatum<RawDatum>[] = data.map(item => ({\n            id: item.id,\n            label: item.label,\n            color: item.color,\n            hidden: hiddenIds.includes(item.id),\n            data: item,\n        }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n\n    // Forward the legends data if `forwardLegendData` is defined.\n    const legendData = result.legendData\n    const forwardLegendDataRef = useRef(forwardLegendData)\n    useEffect(() => {\n        if (typeof forwardLegendDataRef.current !== 'function') return\n        forwardLegendDataRef.current(legendData)\n    }, [forwardLegendDataRef, legendData])\n\n    return result\n}\n\n/**\n * Encapsulate the logic for defining/reading the active arc ID,\n * which can be either controlled (handled externally), or uncontrolled\n * (handled internally), we can optionally define a default value when\n * it's uncontrolled.\n */\nconst useActiveId = ({\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId = null,\n}: {\n    activeId?: DatumId | null\n    onActiveIdChange?: (id: DatumId | null) => void\n    defaultActiveId?: DatumId | null\n}) => {\n    const isControlled = typeof activeIdFromProps != 'undefined'\n\n    const [internalActiveId, setInternalActiveId] = useState<DatumId | null>(\n        !isControlled ? defaultActiveId : null\n    )\n\n    const activeId = isControlled ? activeIdFromProps : internalActiveId\n\n    const setActiveId = useCallback(\n        (id: DatumId | null) => {\n            if (onActiveIdChange) {\n                onActiveIdChange(id)\n            }\n\n            if (!isControlled) {\n                setInternalActiveId(id)\n            }\n        },\n        [isControlled, onActiveIdChange, setInternalActiveId]\n    )\n\n    return { activeId, setActiveId }\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    forwardLegendData,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n    | 'activeId'\n    | 'onActiveIdChange'\n    | 'defaultActiveId'\n    | 'forwardLegendData'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const { activeId, setActiveId } = useActiveId({\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n    })\n\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n        forwardLegendData,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    forwardLegendData,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> &\n    Pick<\n        Partial<CompletePieSvgProps<RawDatum>>,\n        'activeId' | 'onActiveIdChange' | 'defaultActiveId' | 'forwardLegendData'\n    > & {\n        data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    }) => {\n    const { activeId, setActiveId } = useActiveId({\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n    })\n\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n        forwardLegendData,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        activeId,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n", "import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter, tooltip])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove, tooltip])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n", "import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { PieLegends } from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    forwardLegendData,\n\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n        forwardLegendData,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcs: null,\n        arcLinkLabels: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum extends MayHaveLabel>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps, MayHaveLabel } from './types'\n\nexport const ResponsivePie = <RawDatum extends MayHaveLabel>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = defaultProps.pixelRatio,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n\n    legends = defaultProps.legends,\n    forwardLegendData,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n            activeId: activeIdFromProps,\n            onActiveIdChange,\n            defaultActiveId,\n            forwardLegendData,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        borderWidth,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum extends MayHaveLabel>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps, MayHaveLabel } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum extends MayHaveLabel>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": []
}
