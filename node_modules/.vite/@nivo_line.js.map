{
  "version": 3,
  "sources": ["../lodash/uniqueId.js", "../@nivo/line/node_modules/@react-spring/web/src/index.ts", "../@nivo/line/node_modules/@react-spring/web/src/applyAnimatedValues.ts", "../@nivo/line/node_modules/@react-spring/web/src/AnimatedStyle.ts", "../@nivo/line/node_modules/@react-spring/web/src/primitives.ts", "../@nivo/line/src/PointTooltip.js", "../@nivo/line/src/SliceTooltip.js", "../@nivo/line/src/props.js", "../@nivo/line/src/hooks.js", "../@nivo/line/src/Areas.js", "../@nivo/line/src/LinesItem.js", "../@nivo/line/src/Lines.js", "../@nivo/line/src/SlicesItem.js", "../@nivo/line/src/Slices.js", "../@nivo/line/src/Points.js", "../@nivo/line/src/Mesh.js", "../@nivo/line/src/Line.js", "../@nivo/line/src/ResponsiveLine.js", "../@nivo/line/src/LineCanvas.js", "../@nivo/line/src/ResponsiveLineCanvas.js"],
  "sourcesContent": ["var toString = require('./toString');\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n", "import { Globals } from '@react-spring/core'\nimport { unstable_batchedUpdates } from 'react-dom'\nimport { createStringInterpolator, colors } from '@react-spring/shared'\nimport { createHost } from '@react-spring/animated'\nimport { applyAnimatedValues } from './applyAnimatedValues'\nimport { AnimatedStyle } from './AnimatedStyle'\nimport { WithAnimated } from './animated'\nimport { primitives } from './primitives'\n\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors,\n})\n\nconst host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: style => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props,\n})\n\nexport const animated = host.animated as WithAnimated\nexport { animated as a }\n\nexport * from './animated'\nexport * from '@react-spring/core'\n", "import { Lookup } from '@react-spring/types'\n\nconst isCustomPropRE = /^--/\n\ntype Value = string | number | boolean | null\n\nfunction dangerousStyleValue(name: string, value: Value) {\n  if (value == null || typeof value === 'boolean' || value === '') return ''\n  if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isCustomPropRE.test(name) &&\n    !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])\n  )\n    return value + 'px'\n  // Presumes implicit 'px' suffix for unitless numbers\n  return ('' + value).trim()\n}\n\nconst attributeCache: Lookup<string> = {}\n\ntype Instance = HTMLDivElement & { style?: Lookup }\n\nexport function applyAnimatedValues(instance: Instance, props: Lookup) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false\n  }\n\n  const isFilterElement =\n    instance.nodeName === 'filter' ||\n    (instance.parentNode && instance.parentNode.nodeName === 'filter')\n\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props!\n\n  const values = Object.values(attributes)\n  const names = Object.keys(attributes).map(name =>\n    isFilterElement || instance.hasAttribute(name)\n      ? name\n      : attributeCache[name] ||\n        (attributeCache[name] = name.replace(\n          /([A-Z])/g,\n          // Attributes are written in dash case\n          n => '-' + n.toLowerCase()\n        ))\n  )\n\n  if (children !== void 0) {\n    instance.textContent = children\n  }\n\n  // Apply CSS styles\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name])\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value)\n      } else {\n        instance.style[name] = value\n      }\n    }\n  }\n\n  // Apply DOM attributes\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i])\n  })\n\n  if (className !== void 0) {\n    instance.className = className\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute('viewBox', viewBox)\n  }\n}\n\nlet isUnitlessNumber: { [key: string]: true } = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true,\n}\n\nconst prefixKey = (prefix: string, key: string) =>\n  prefix + key.charAt(0).toUpperCase() + key.substring(1)\nconst prefixes = ['Webkit', 'Ms', 'Moz', 'O']\n\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach(prefix => (acc[prefixKey(prefix, prop)] = acc[prop]))\n  return acc\n}, isUnitlessNumber)\n", "import { AnimatedObject } from '@react-spring/animated'\nimport { Lookup, OneOrMore } from '@react-spring/types'\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  FluidEvent,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n} from '@react-spring/shared'\n\n/** The transform-functions\n * (https://developer.mozilla.org/fr/docs/Web/CSS/transform-function)\n * that you can pass as keys to your animated component style and that will be\n * animated. Perspective has been left out as it would conflict with the\n * non-transform perspective style.\n */\nconst domTransforms = /^(matrix|translate|scale|rotate|skew)/\n\n// These keys have \"px\" units by default\nconst pxTransforms = /^(translate)/\n\n// These keys have \"deg\" units by default\nconst degTransforms = /^(rotate|skew)/\n\ntype Value = number | string\n\n/** Add a unit to the value when the value is unit-less (eg: a number) */\nconst addUnit = (value: Value, unit: string): string | 0 =>\n  is.num(value) && value !== 0 ? value + unit : value\n\n/**\n * Checks if the input value matches the identity value.\n *\n *     isValueIdentity(0, 0)              // => true\n *     isValueIdentity('0px', 0)          // => true\n *     isValueIdentity([0, '0px', 0], 0)  // => true\n */\nconst isValueIdentity = (value: OneOrMore<Value>, id: number): boolean =>\n  is.arr(value)\n    ? value.every(v => isValueIdentity(v, id))\n    : is.num(value)\n      ? value === id\n      : parseFloat(value) === id\n\ntype Inputs = ReadonlyArray<Value | FluidValue<Value>>[]\ntype Transforms = ((value: any) => [string, boolean])[]\n\n/**\n * This AnimatedStyle will simplify animated components transforms by\n * interpolating all transform function passed as keys in the style object\n * including shortcuts such as x, y and z for translateX/Y/Z\n */\nexport class AnimatedStyle extends AnimatedObject {\n  constructor({ x, y, z, ...style }: Lookup) {\n    /**\n     * An array of arrays that contains the values (static or fluid)\n     * used by each transform function.\n     */\n    const inputs: Inputs = []\n    /**\n     * An array of functions that take a list of values (static or fluid)\n     * and returns (1) a CSS transform string and (2) a boolean that's true\n     * when the transform has no effect (eg: an identity transform).\n     */\n    const transforms: Transforms = []\n\n    // Combine x/y/z into translate3d\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0])\n      transforms.push((xyz: Value[]) => [\n        `translate3d(${xyz.map(v => addUnit(v, 'px')).join(',')})`, // prettier-ignore\n        isValueIdentity(xyz, 0),\n      ])\n    }\n\n    // Pluck any other transform-related props\n    eachProp(style, (value, key) => {\n      if (key === 'transform') {\n        inputs.push([value || ''])\n        transforms.push((transform: string) => [transform, transform === ''])\n      } else if (domTransforms.test(key)) {\n        delete style[key]\n        if (is.und(value)) return\n\n        const unit = pxTransforms.test(key)\n          ? 'px'\n          : degTransforms.test(key)\n            ? 'deg'\n            : ''\n\n        inputs.push(toArray(value))\n        transforms.push(\n          key === 'rotate3d'\n            ? ([x, y, z, deg]: [number, number, number, Value]) => [\n                `rotate3d(${x},${y},${z},${addUnit(deg, unit)})`,\n                isValueIdentity(deg, 0),\n              ]\n            : (input: Value[]) => [\n                `${key}(${input.map(v => addUnit(v, unit)).join(',')})`,\n                isValueIdentity(input, key.startsWith('scale') ? 1 : 0),\n              ]\n        )\n      }\n    })\n\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms)\n    }\n\n    super(style)\n  }\n}\n\n/** @internal */\nclass FluidTransform extends FluidValue<string> {\n  protected _value: string | null = null\n\n  constructor(\n    readonly inputs: Inputs,\n    readonly transforms: Transforms\n  ) {\n    super()\n  }\n\n  get() {\n    return this._value || (this._value = this._get())\n  }\n\n  protected _get() {\n    let transform = ''\n    let identity = true\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0])\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      )\n      transform += ' ' + t\n      identity = identity && id\n    })\n    return identity ? 'none' : transform\n  }\n\n  // Start observing our inputs once we have an observer.\n  protected observerAdded(count: number) {\n    if (count == 1)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      )\n  }\n\n  // Stop observing our inputs once we have no observers.\n  protected observerRemoved(count: number) {\n    if (count == 0)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      )\n  }\n\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      this._value = null\n    }\n    callFluidObservers(this, event)\n  }\n}\n", "export type Primitives = keyof JSX.IntrinsicElements\nexport const primitives: Primitives[] = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'big',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'section',\n  'select',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n  // SVG\n  'circle',\n  'clipPath',\n  'defs',\n  'ellipse',\n  'foreignObject',\n  'g',\n  'image',\n  'line',\n  'linearGradient',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'svg',\n  'text',\n  'tspan',\n]\n", "import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nexport default memo(LinePointTooltip)\n", "import { memo } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nexport default memo(SliceTooltip)\n", "import PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    enableTouchCrosshair: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n    initialHiddenIds: [],\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n", "import { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport uniqueId from 'lodash/uniqueId'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ componentId, enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: `slice:${componentId}:${x}`,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [componentId, enableSlices, height, points, width])\n}\n\nexport const LINE_UNIQUE_ID_PREFIX = 'line'\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n    initialHiddenIds = LineDefaultProps.initialHiddenIds,\n}) => {\n    const [componentId] = useState(uniqueId(LINE_UNIQUE_ID_PREFIX))\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        componentId,\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n", "import { memo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nexport default memo(Areas)\n", "import { memo, useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nexport default memo(LinesItem)\n", "import { memo } from 'react'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nexport default memo(Lines)\n", "import { createElement, memo, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({\n    slice,\n    slices,\n    axis,\n    debug,\n    tooltip,\n    isCurrent,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onMouseEnter && onMouseEnter(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, setCurrent, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            onMouseMove && onMouseMove(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(slice, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave, slice]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(slice, event)\n        },\n        [slice, onClick]\n    )\n\n    const handeOnTouchStart = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onTouchStart && onTouchStart(slice, event)\n        },\n        [axis, onTouchStart, setCurrent, showTooltipFromEvent, slice, tooltip]\n    )\n\n    const handeOnTouchMove = useCallback(\n        event => {\n            // This event will be locked to the element that was touched originally\n            // We find the element that is currently being \"hovered over\" by getting the element at the touch point\n            const touchPoint = event.touches[0]\n            const touchingElement = document.elementFromPoint(\n                touchPoint.clientX,\n                touchPoint.clientY\n            )\n            // Is this a nivo ref?\n            const touchingSliceId = touchingElement?.getAttribute('data-ref')\n            if (touchingSliceId) {\n                // Is this a slice for this graph?\n                const slice = slices.find(slice => slice.id === touchingSliceId)\n                if (slice) {\n                    showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n                    setCurrent(slice)\n                }\n            }\n\n            // Note here, this will pass the original slice, not the one we found\n            // But this can be found with document.elementFromPoint()\n            onTouchMove && onTouchMove(slice, event)\n        },\n        [axis, onTouchMove, setCurrent, showTooltipFromEvent, slice, slices, tooltip]\n    )\n\n    const handleOnTouchEnd = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onTouchEnd && onTouchEnd(slice, event)\n        },\n        [hideTooltip, setCurrent, onTouchEnd, slice]\n    )\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            onTouchStart={handeOnTouchStart}\n            onTouchMove={handeOnTouchMove}\n            onTouchEnd={handleOnTouchEnd}\n            data-ref={slice.id}\n        />\n    )\n}\n\nexport default memo(SlicesItem)\n", "import { memo } from 'react'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({\n    slices,\n    axis,\n    debug,\n    height,\n    tooltip,\n    current,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            slices={slices}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n            onMouseEnter={onMouseEnter}\n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onClick={onClick}\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n        />\n    ))\n}\n\nexport default memo(Slices)\n", "import { memo } from 'react'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points\n        .slice(0)\n        .reverse()\n        .map(point => {\n            const mappedPoint = {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point) : null,\n            }\n\n            return mappedPoint\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nexport default memo(Points)\n", "import { createElement, memo, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    tooltip,\n    debug,\n    enableTouchCrosshair,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onMouseMove && onMouseMove(point, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    const handleTouchStart = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onTouchStart && onTouchStart(point, event)\n        },\n        [margin.left, margin.top, onTouchStart, showTooltipAt, tooltip]\n    )\n\n    const handleTouchMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            onTouchMove && onTouchMove(point, event)\n        },\n        [margin.left, margin.top, onTouchMove, showTooltipAt, tooltip]\n    )\n\n    const handleTouchEnd = useCallback(\n        (point, event) => {\n            hideTooltip()\n            onTouchEnd && onTouchEnd(point, event)\n        },\n        [onTouchEnd, hideTooltip]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            setCurrent={setCurrent}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n            enableTouchCrosshair={enableTouchCrosshair}\n            debug={debug}\n        />\n    )\n}\n\nexport default memo(Mesh)\n", "import { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec = { type: 'point' },\n        xFormat,\n        yScale: yScaleSpec = {\n            type: 'linear',\n            min: 0,\n            max: 'auto',\n        },\n        yFormat,\n        layers = [\n            'grid',\n            'markers',\n            'axes',\n            'areas',\n            'crosshair',\n            'lines',\n            'points',\n            'slices',\n            'mesh',\n            'legends',\n        ],\n        curve = 'linear',\n        areaBaselineValue = 0,\n\n        colors = { scheme: 'nivo' },\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom = {},\n        axisLeft = {},\n        enableGridX = true,\n        enableGridY = true,\n        gridXValues,\n        gridYValues,\n\n        lineWidth = 2,\n        enableArea = false,\n        areaOpacity = 0.2,\n        areaBlendMode = 'normal',\n\n        enablePoints = true,\n        pointSymbol,\n        pointSize = 6,\n        pointColor = { from: 'color' },\n        pointBorderWidth = 0,\n        pointBorderColor = { theme: 'background' },\n        enablePointLabel = false,\n        pointLabel = 'data.yFormatted',\n        pointLabelYOffset,\n\n        defs = [],\n        fill = [],\n\n        markers,\n\n        legends = [],\n\n        isInteractive = true,\n\n        useMesh = false,\n        debugMesh = false,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        onTouchStart,\n        onTouchMove,\n        onTouchEnd,\n\n        tooltip = PointTooltip,\n\n        enableSlices = false,\n        debugSlices = false,\n        sliceTooltip = SliceTooltip,\n\n        enableCrosshair = true,\n        crosshairType = 'bottom-left',\n        enableTouchCrosshair = false,\n\n        role = 'img',\n        initialHiddenIds = [],\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n        initialHiddenIds,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n                tooltip={tooltip}\n                enableTouchCrosshair={enableTouchCrosshair}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport default withContainer(Line)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n", "import { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { useLine } from './hooks'\nimport PointTooltip from './PointTooltip'\n\nconst LineCanvas = props => {\n    const canvasEl = useRef(null)\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n\n        data,\n        xScale: xScaleSpec = { type: 'point' },\n        xFormat,\n        yScale: yScaleSpec = {\n            type: 'linear',\n            min: 0,\n            max: 'auto',\n        },\n        yFormat,\n        curve = 'linear',\n\n        layers = [\n            'grid',\n            'markers',\n            'axes',\n            'areas',\n            'crosshair',\n            'lines',\n            'points',\n            'slices',\n            'mesh',\n            'legends',\n        ],\n\n        colors = { scheme: 'nivo' },\n        lineWidth = 2,\n\n        enableArea = false,\n        areaBaselineValue = 0,\n        areaOpacity = 0.2,\n\n        enablePoints = true,\n        pointSize = 6,\n        pointColor = { from: 'color' },\n        pointBorderWidth = 0,\n        pointBorderColor = { theme: 'background' },\n\n        enableGridX = true,\n        gridXValues,\n        enableGridY = true,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom = {},\n        axisLeft = {},\n\n        legends = [],\n\n        isInteractive = true,\n        debugMesh = false,\n        //onMouseEnter,\n        //onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip = PointTooltip,\n        canvasRef,\n    } = props\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                for (let i = series.length - 1; i >= 0; i--) {\n                    ctx.fillStyle = series[i].color\n                    ctx.beginPath()\n                    areaGenerator(series[i].data.map(d => d.position))\n                    ctx.fill()\n                }\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n", "import { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n"],
  "mappings": "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",
  "names": []
}
