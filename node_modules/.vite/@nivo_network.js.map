{
  "version": 3,
  "sources": ["../@nivo/network/node_modules/@react-spring/web/src/index.ts", "../@nivo/network/node_modules/@react-spring/web/src/applyAnimatedValues.ts", "../@nivo/network/node_modules/@react-spring/web/src/AnimatedStyle.ts", "../@nivo/network/node_modules/@react-spring/web/src/primitives.ts", "../d3-force/src/center.js", "../d3-quadtree/src/add.js", "../d3-quadtree/src/cover.js", "../d3-quadtree/src/data.js", "../d3-quadtree/src/extent.js", "../d3-quadtree/src/quad.js", "../d3-quadtree/src/find.js", "../d3-quadtree/src/remove.js", "../d3-quadtree/src/root.js", "../d3-quadtree/src/size.js", "../d3-quadtree/src/visit.js", "../d3-quadtree/src/visitAfter.js", "../d3-quadtree/src/x.js", "../d3-quadtree/src/y.js", "../d3-quadtree/src/quadtree.js", "../d3-force/src/constant.js", "../d3-force/src/jiggle.js", "../d3-force/src/link.js", "../d3-dispatch/src/dispatch.js", "../d3-timer/src/timer.js", "../d3-force/src/lcg.js", "../d3-force/src/simulation.js", "../d3-force/src/manyBody.js", "../@nivo/network/src/NetworkNode.tsx", "../@nivo/network/src/NetworkLink.tsx", "../@nivo/network/src/defaults.ts", "../@nivo/network/src/NetworkNodeTooltip.tsx", "../@nivo/network/src/renderCanvasNode.ts", "../@nivo/network/src/renderCanvasLink.ts", "../@nivo/network/src/hooks.ts", "../@nivo/network/src/NetworkLinks.tsx", "../@nivo/network/src/NetworkNodes.tsx", "../@nivo/network/src/NetworkNodeAnnotations.tsx", "../@nivo/network/src/Network.tsx", "../@nivo/network/src/ResponsiveNetwork.tsx", "../@nivo/network/src/NetworkCanvas.tsx", "../@nivo/network/src/ResponsiveNetworkCanvas.tsx"],
  "sourcesContent": ["import { Globals } from '@react-spring/core'\nimport { unstable_batchedUpdates } from 'react-dom'\nimport { createStringInterpolator, colors } from '@react-spring/shared'\nimport { createHost } from '@react-spring/animated'\nimport { applyAnimatedValues } from './applyAnimatedValues'\nimport { AnimatedStyle } from './AnimatedStyle'\nimport { WithAnimated } from './animated'\nimport { primitives } from './primitives'\n\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors,\n})\n\nconst host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: style => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props,\n})\n\nexport const animated = host.animated as WithAnimated\nexport { animated as a }\n\nexport * from './animated'\nexport * from '@react-spring/core'\n", "import { Lookup } from '@react-spring/types'\n\nconst isCustomPropRE = /^--/\n\ntype Value = string | number | boolean | null\n\nfunction dangerousStyleValue(name: string, value: Value) {\n  if (value == null || typeof value === 'boolean' || value === '') return ''\n  if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isCustomPropRE.test(name) &&\n    !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])\n  )\n    return value + 'px'\n  // Presumes implicit 'px' suffix for unitless numbers\n  return ('' + value).trim()\n}\n\nconst attributeCache: Lookup<string> = {}\n\ntype Instance = HTMLDivElement & { style?: Lookup }\n\nexport function applyAnimatedValues(instance: Instance, props: Lookup) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false\n  }\n\n  const isFilterElement =\n    instance.nodeName === 'filter' ||\n    (instance.parentNode && instance.parentNode.nodeName === 'filter')\n\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props!\n\n  const values = Object.values(attributes)\n  const names = Object.keys(attributes).map(name =>\n    isFilterElement || instance.hasAttribute(name)\n      ? name\n      : attributeCache[name] ||\n        (attributeCache[name] = name.replace(\n          /([A-Z])/g,\n          // Attributes are written in dash case\n          n => '-' + n.toLowerCase()\n        ))\n  )\n\n  if (children !== void 0) {\n    instance.textContent = children\n  }\n\n  // Apply CSS styles\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name])\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value)\n      } else {\n        instance.style[name] = value\n      }\n    }\n  }\n\n  // Apply DOM attributes\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i])\n  })\n\n  if (className !== void 0) {\n    instance.className = className\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute('viewBox', viewBox)\n  }\n}\n\nlet isUnitlessNumber: { [key: string]: true } = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true,\n}\n\nconst prefixKey = (prefix: string, key: string) =>\n  prefix + key.charAt(0).toUpperCase() + key.substring(1)\nconst prefixes = ['Webkit', 'Ms', 'Moz', 'O']\n\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach(prefix => (acc[prefixKey(prefix, prop)] = acc[prop]))\n  return acc\n}, isUnitlessNumber)\n", "import { AnimatedObject } from '@react-spring/animated'\nimport { Lookup, OneOrMore } from '@react-spring/types'\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  FluidEvent,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n} from '@react-spring/shared'\n\n/** The transform-functions\n * (https://developer.mozilla.org/fr/docs/Web/CSS/transform-function)\n * that you can pass as keys to your animated component style and that will be\n * animated. Perspective has been left out as it would conflict with the\n * non-transform perspective style.\n */\nconst domTransforms = /^(matrix|translate|scale|rotate|skew)/\n\n// These keys have \"px\" units by default\nconst pxTransforms = /^(translate)/\n\n// These keys have \"deg\" units by default\nconst degTransforms = /^(rotate|skew)/\n\ntype Value = number | string\n\n/** Add a unit to the value when the value is unit-less (eg: a number) */\nconst addUnit = (value: Value, unit: string): string | 0 =>\n  is.num(value) && value !== 0 ? value + unit : value\n\n/**\n * Checks if the input value matches the identity value.\n *\n *     isValueIdentity(0, 0)              // => true\n *     isValueIdentity('0px', 0)          // => true\n *     isValueIdentity([0, '0px', 0], 0)  // => true\n */\nconst isValueIdentity = (value: OneOrMore<Value>, id: number): boolean =>\n  is.arr(value)\n    ? value.every(v => isValueIdentity(v, id))\n    : is.num(value)\n      ? value === id\n      : parseFloat(value) === id\n\ntype Inputs = ReadonlyArray<Value | FluidValue<Value>>[]\ntype Transforms = ((value: any) => [string, boolean])[]\n\n/**\n * This AnimatedStyle will simplify animated components transforms by\n * interpolating all transform function passed as keys in the style object\n * including shortcuts such as x, y and z for translateX/Y/Z\n */\nexport class AnimatedStyle extends AnimatedObject {\n  constructor({ x, y, z, ...style }: Lookup) {\n    /**\n     * An array of arrays that contains the values (static or fluid)\n     * used by each transform function.\n     */\n    const inputs: Inputs = []\n    /**\n     * An array of functions that take a list of values (static or fluid)\n     * and returns (1) a CSS transform string and (2) a boolean that's true\n     * when the transform has no effect (eg: an identity transform).\n     */\n    const transforms: Transforms = []\n\n    // Combine x/y/z into translate3d\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0])\n      transforms.push((xyz: Value[]) => [\n        `translate3d(${xyz.map(v => addUnit(v, 'px')).join(',')})`, // prettier-ignore\n        isValueIdentity(xyz, 0),\n      ])\n    }\n\n    // Pluck any other transform-related props\n    eachProp(style, (value, key) => {\n      if (key === 'transform') {\n        inputs.push([value || ''])\n        transforms.push((transform: string) => [transform, transform === ''])\n      } else if (domTransforms.test(key)) {\n        delete style[key]\n        if (is.und(value)) return\n\n        const unit = pxTransforms.test(key)\n          ? 'px'\n          : degTransforms.test(key)\n            ? 'deg'\n            : ''\n\n        inputs.push(toArray(value))\n        transforms.push(\n          key === 'rotate3d'\n            ? ([x, y, z, deg]: [number, number, number, Value]) => [\n                `rotate3d(${x},${y},${z},${addUnit(deg, unit)})`,\n                isValueIdentity(deg, 0),\n              ]\n            : (input: Value[]) => [\n                `${key}(${input.map(v => addUnit(v, unit)).join(',')})`,\n                isValueIdentity(input, key.startsWith('scale') ? 1 : 0),\n              ]\n        )\n      }\n    })\n\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms)\n    }\n\n    super(style)\n  }\n}\n\n/** @internal */\nclass FluidTransform extends FluidValue<string> {\n  protected _value: string | null = null\n\n  constructor(\n    readonly inputs: Inputs,\n    readonly transforms: Transforms\n  ) {\n    super()\n  }\n\n  get() {\n    return this._value || (this._value = this._get())\n  }\n\n  protected _get() {\n    let transform = ''\n    let identity = true\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0])\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      )\n      transform += ' ' + t\n      identity = identity && id\n    })\n    return identity ? 'none' : transform\n  }\n\n  // Start observing our inputs once we have an observer.\n  protected observerAdded(count: number) {\n    if (count == 1)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      )\n  }\n\n  // Stop observing our inputs once we have no observers.\n  protected observerRemoved(count: number) {\n    if (count == 0)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      )\n  }\n\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      this._value = null\n    }\n    callFluidObservers(this, event)\n  }\n}\n", "export type Primitives = keyof JSX.IntrinsicElements\nexport const primitives: Primitives[] = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'big',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'section',\n  'select',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n  // SVG\n  'circle',\n  'clipPath',\n  'defs',\n  'ellipse',\n  'foreignObject',\n  'g',\n  'image',\n  'line',\n  'linearGradient',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'svg',\n  'text',\n  'tspan',\n]\n", "export default function(x, y) {\n  var nodes, strength = 1;\n\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  return force;\n}\n", "export default function(d) {\n  const x = +this._x.call(null, d),\n      y = +this._y.call(null, d);\n  return add(this.cover(x, y), x, y, d);\n}\n\nfunction add(tree, x, y, d) {\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      xm,\n      ym,\n      xp,\n      yp,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  var d, i, n = data.length,\n      x,\n      y,\n      xz = new Array(n),\n      yz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1 || y0 > y1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0).cover(x1, y1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], data[i]);\n  }\n\n  return this;\n}\n", "export default function(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1;\n\n  // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don\u2019t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n      i = (y < y0) << 1 | (x < x0);\n      parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z, y1 = y0 + z; break;\n        case 1: x0 = x1 - z, y1 = y0 + z; break;\n        case 2: x1 = x0 + z, y0 = y1 - z; break;\n        case 3: x0 = x1 - z, y0 = y1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n", "export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n", "export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n}\n", "export default function(node, x0, y0, x1, y1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.x1 = x1;\n  this.y1 = y1;\n}\n", "import Quad from \"./quad.js\";\n\nexport default function(x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n\n    // Stop searching if this quadrant can\u2019t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0) continue;\n\n    // Bisect the current quadrant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n\n      quads.push(\n        new Quad(node[3], xm, ym, x2, y2),\n        new Quad(node[2], x1, ym, xm, y2),\n        new Quad(node[1], xm, y1, x2, ym),\n        new Quad(node[0], x1, y1, xm, ym)\n      );\n\n      // Visit the closest quadrant first.\n      if (i = (y >= ym) << 1 | (x >= xm)) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn\u2019t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          d2 = dx * dx + dy * dy;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d;\n        x3 = x + d, y3 = y + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n", "export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1,\n      x,\n      y,\n      xm,\n      ym,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n", "export default function() {\n  return this._root;\n}\n", "export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n", "import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n    }\n  }\n  return this;\n}\n", "import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], next = [], q;\n  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\n  }\n  return this;\n}\n", "export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n", "export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n", "import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\nimport tree_y, {defaultY} from \"./y.js\";\n\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(4)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\n", "export default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "export default function(random) {\n  return (random() - 0.5) * 1e-6;\n}\n", "import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n", "var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n", "var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we\u2019ve set an alarm, if we haven\u2019t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n", "// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst a = 1664525;\nconst c = 1013904223;\nconst m = 4294967296; // 2^32\n\nexport default function() {\n  let s = 1;\n  return () => (s = (a * s + c) % m) / m;\n}\n", "import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\nimport lcg from \"./lcg.js\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    randomSource: function(_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n", "import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport {x, y} from \"./simulation.js\";\n\nexport default function() {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i, n = nodes.length, tree = quadtree(nodes, x, y).visitAfter(accumulate);\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0, q, c, weight = 0, x, y, i;\n\n    // For internal nodes, accumulate forces from child quadrants.\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n      quad.x = x / weight;\n      quad.y = y / weight;\n    }\n\n    // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n", "import { memo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { InputNode, NodeProps } from './types'\n\nconst NonMemoizedNetworkNode = <Node extends InputNode>({\n    node,\n    animated: animatedProps,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: NodeProps<Node>) => (\n    <animated.circle\n        data-testid={`node.${node.id}`}\n        transform={to([animatedProps.x, animatedProps.y, animatedProps.scale], (x, y, scale) => {\n            return `translate(${x},${y}) scale(${scale})`\n        })}\n        r={to([animatedProps.size], size => size / 2)}\n        fill={animatedProps.color}\n        strokeWidth={animatedProps.borderWidth}\n        stroke={animatedProps.borderColor}\n        opacity={animatedProps.opacity}\n        onClick={onClick ? event => onClick(node, event) : undefined}\n        onMouseEnter={onMouseEnter ? event => onMouseEnter(node, event) : undefined}\n        onMouseMove={onMouseMove ? event => onMouseMove(node, event) : undefined}\n        onMouseLeave={onMouseLeave ? event => onMouseLeave(node, event) : undefined}\n    />\n)\n\nexport const NetworkNode = memo(NonMemoizedNetworkNode) as typeof NonMemoizedNetworkNode\n", "import { animated } from '@react-spring/web'\nimport { InputLink, InputNode, LinkProps } from './types'\nimport { memo } from 'react'\n\nconst NonMemoizedNetworkLink = <Node extends InputNode, Link extends InputLink>({\n    link,\n    animated: animatedProps,\n    blendMode,\n}: LinkProps<Node, Link>) => (\n    <animated.line\n        data-testid={`link.${link.id}`}\n        stroke={animatedProps.color}\n        style={{ mixBlendMode: blendMode }}\n        strokeWidth={link.thickness}\n        strokeLinecap=\"round\"\n        opacity={animatedProps.opacity}\n        x1={animatedProps.x1}\n        y1={animatedProps.y1}\n        x2={animatedProps.x2}\n        y2={animatedProps.y2}\n    />\n)\n\nexport const NetworkLink = memo(NonMemoizedNetworkLink) as typeof NonMemoizedNetworkLink\n", "import { NetworkCommonProps, InputNode, LayerId, NetworkSvgProps, InputLink } from './types'\nimport { NetworkNode } from './NetworkNode'\nimport { renderCanvasNode } from './renderCanvasNode'\nimport { NetworkLink } from './NetworkLink'\nimport { renderCanvasLink } from './renderCanvasLink'\nimport { NetworkNodeTooltip } from './NetworkNodeTooltip'\n\nexport const commonDefaultProps: Omit<\n    NetworkCommonProps<InputNode, InputLink>,\n    | 'margin'\n    | 'theme'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['links', 'nodes', 'annotations'],\n\n    linkDistance: 30,\n    centeringStrength: 1,\n    repulsivity: 10,\n    distanceMin: 1,\n    distanceMax: Infinity,\n    iterations: 120,\n\n    nodeSize: 12,\n    activeNodeSize: 18,\n    inactiveNodeSize: 8,\n    nodeColor: '#000000',\n    nodeBorderWidth: 0,\n    nodeBorderColor: { from: 'color' },\n\n    linkThickness: 1,\n    linkColor: { from: 'source.color' },\n\n    isInteractive: true,\n    defaultActiveNodeIds: [],\n    nodeTooltip: NetworkNodeTooltip,\n\n    annotations: [],\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n\n    role: 'img',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: NetworkNode as NonNullable<\n        NetworkSvgProps<InputNode, InputLink>['nodeComponent']\n    >,\n    linkComponent: NetworkLink as NonNullable<\n        NetworkSvgProps<InputNode, InputLink>['linkComponent']\n    >,\n    linkBlendMode: 'normal' as NonNullable<NetworkSvgProps<InputNode, InputLink>['linkBlendMode']>,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    renderNode: renderCanvasNode,\n    renderLink: renderCanvasLink,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { InputNode, NodeTooltipProps } from './types'\n\nexport const NetworkNodeTooltip = <Node extends InputNode>({ node }: NodeTooltipProps<Node>) => (\n    <BasicTooltip id={node.id} enableChip={true} color={node.color} />\n)\n", "import { ComputedNode, InputNode } from './types'\n\nexport const renderCanvasNode = <Node extends InputNode>(\n    ctx: CanvasRenderingContext2D,\n    node: ComputedNode<Node>\n) => {\n    ctx.fillStyle = node.color\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fill()\n\n    if (node.borderWidth > 0) {\n        ctx.strokeStyle = node.borderColor\n        ctx.lineWidth = node.borderWidth\n        ctx.stroke()\n    }\n}\n", "import { InputNode, ComputedLink, InputLink } from './types'\n\nexport const renderCanvasLink = <Node extends InputNode, Link extends InputLink>(\n    ctx: CanvasRenderingContext2D,\n    link: ComputedLink<Node, Link>\n) => {\n    ctx.strokeStyle = link.color\n    ctx.lineWidth = link.thickness\n\n    ctx.beginPath()\n    ctx.moveTo(link.source.x, link.source.y)\n    ctx.lineTo(link.target.x, link.target.y)\n    ctx.stroke()\n}\n", "import { useState, useEffect, useMemo, useCallback } from 'react'\nimport { forceSimulation, forceManyBody, forceCenter, forceLink } from 'd3-force'\nimport { useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { commonDefaultProps } from './defaults'\nimport {\n    InputLink,\n    InputNode,\n    NetworkCommonProps,\n    DerivedProp,\n    ComputedNode,\n    ComputedLink,\n    TransientNode,\n    TransientLink,\n} from './types'\n\nconst useDerivedProp = <Target, Output extends string | number>(\n    instruction: DerivedProp<Target, Output>\n) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useComputeForces = <Node extends InputNode, Link extends InputLink>({\n    linkDistance,\n    centeringStrength,\n    repulsivity,\n    distanceMin,\n    distanceMax,\n    center,\n}: {\n    linkDistance: NetworkCommonProps<Node, Link>['linkDistance']\n    centeringStrength: NetworkCommonProps<Node, Link>['centeringStrength']\n    repulsivity: NetworkCommonProps<Node, Link>['repulsivity']\n    distanceMin: NetworkCommonProps<Node, Link>['distanceMin']\n    distanceMax: NetworkCommonProps<Node, Link>['distanceMax']\n    center: [number, number]\n}) => {\n    const getLinkDistance = useDerivedProp<Link, number>(linkDistance)\n\n    const centerX = center[0]\n    const centerY = center[1]\n\n    return useMemo(() => {\n        const linkForce = forceLink<TransientNode<Node>, TransientLink<Node, Link>>()\n            .distance(link => getLinkDistance(link.data))\n            .strength(centeringStrength)\n\n        const chargeForce = forceManyBody()\n            .strength(-repulsivity)\n            .distanceMin(distanceMin)\n            .distanceMax(distanceMax)\n\n        const centerForce = forceCenter(centerX, centerY)\n\n        return { link: linkForce, charge: chargeForce, center: centerForce }\n    }, [\n        getLinkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        centerX,\n        centerY,\n    ])\n}\n\nconst useNodeStyle = <Node extends InputNode, Link extends InputLink>({\n    size,\n    activeSize,\n    inactiveSize,\n    color,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    activeNodeIds,\n}: {\n    size: NetworkCommonProps<Node, Link>['nodeSize']\n    activeSize: NetworkCommonProps<Node, Link>['activeNodeSize']\n    inactiveSize: NetworkCommonProps<Node, Link>['inactiveNodeSize']\n    color: NetworkCommonProps<Node, Link>['nodeColor']\n    borderWidth: NetworkCommonProps<Node, Link>['nodeBorderWidth']\n    borderColor: NetworkCommonProps<Node, Link>['nodeBorderColor']\n    isInteractive: NetworkCommonProps<Node, Link>['isInteractive']\n    activeNodeIds: string[]\n}) => {\n    const theme = useTheme()\n\n    const getSize = useDerivedProp(size)\n    const getColor = useDerivedProp(color)\n    const getBorderWidth = useDerivedProp(borderWidth)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getNormalStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    const getActiveSize = useDerivedProp(activeSize)\n    const getActiveStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getActiveSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getActiveSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    const getInactiveSize = useDerivedProp(inactiveSize)\n    const getInactiveStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getInactiveSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getInactiveSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    return useCallback(\n        (node: TransientNode<Node>) => {\n            if (!isInteractive || activeNodeIds.length === 0) return getNormalStyle(node)\n            if (activeNodeIds.includes(node.id)) return getActiveStyle(node)\n            return getInactiveStyle(node)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeNodeIds]\n    )\n}\n\nexport const useNetwork = <Node extends InputNode = InputNode, Link extends InputLink = InputLink>({\n    center,\n    nodes,\n    links,\n    linkDistance = commonDefaultProps.linkDistance,\n    centeringStrength = commonDefaultProps.centeringStrength,\n    repulsivity = commonDefaultProps.repulsivity,\n    distanceMin = commonDefaultProps.distanceMin,\n    distanceMax = commonDefaultProps.distanceMax,\n    iterations = commonDefaultProps.iterations,\n    nodeSize = commonDefaultProps.nodeSize,\n    activeNodeSize = commonDefaultProps.activeNodeSize,\n    inactiveNodeSize = commonDefaultProps.inactiveNodeSize,\n    nodeColor = commonDefaultProps.nodeColor,\n    nodeBorderWidth = commonDefaultProps.nodeBorderWidth,\n    nodeBorderColor = commonDefaultProps.nodeBorderColor,\n    linkThickness = commonDefaultProps.linkThickness,\n    linkColor = commonDefaultProps.linkColor,\n    isInteractive = commonDefaultProps.isInteractive,\n    defaultActiveNodeIds = commonDefaultProps.defaultActiveNodeIds,\n}: {\n    center: [number, number]\n    nodes: Node[]\n    links: Link[]\n    linkDistance?: NetworkCommonProps<Node, Link>['linkDistance']\n    centeringStrength?: NetworkCommonProps<Node, Link>['centeringStrength']\n    repulsivity?: NetworkCommonProps<Node, Link>['repulsivity']\n    distanceMin?: NetworkCommonProps<Node, Link>['distanceMin']\n    distanceMax?: NetworkCommonProps<Node, Link>['distanceMax']\n    iterations?: NetworkCommonProps<Node, Link>['iterations']\n    nodeSize?: NetworkCommonProps<Node, Link>['nodeSize']\n    activeNodeSize?: NetworkCommonProps<Node, Link>['activeNodeSize']\n    inactiveNodeSize?: NetworkCommonProps<Node, Link>['inactiveNodeSize']\n    nodeColor?: NetworkCommonProps<Node, Link>['nodeColor']\n    nodeBorderWidth?: NetworkCommonProps<Node, Link>['nodeBorderWidth']\n    nodeBorderColor?: NetworkCommonProps<Node, Link>['nodeBorderColor']\n    linkThickness?: NetworkCommonProps<Node, Link>['linkThickness']\n    linkColor?: NetworkCommonProps<Node, Link>['linkColor']\n    isInteractive?: NetworkCommonProps<Node, Link>['isInteractive']\n    defaultActiveNodeIds?: NetworkCommonProps<Node, Link>['defaultActiveNodeIds']\n}) => {\n    // we're using `null` instead of empty array so that we can dissociate\n    // initial rendering from updates when using transitions.\n    const [transientNodes, setTransientNodes] = useState<null | TransientNode<Node>[]>(null)\n    const [transientLinks, setTransientLinks] = useState<null | TransientLink<Node, Link>[]>(null)\n\n    const forces = useComputeForces<Node, Link>({\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        center,\n    })\n\n    useEffect(() => {\n        // copy the nodes & links to avoid mutating the original ones.\n        const _transientNodes: TransientNode<Node>[] = nodes.map(node => ({\n            id: node.id,\n            data: { ...node },\n            // the properties below are populated by D3, via mutations\n            index: 0,\n            x: 0,\n            y: 0,\n            vx: 0,\n            vy: 0,\n        }))\n        const _transientLinks: TransientLink<Node, Link>[] = links.map(link => ({\n            data: { ...link },\n            // populated by D3, via mutation\n            index: 0,\n            // replace ids with objects, otherwise D3 does this automatically\n            // which is a bit annoying with typings because then `source` & `target`\n            // can be either strings (before the simulation) or an objects (after).\n            source: _transientNodes.find(node => node.id === link.source)!,\n            target: _transientNodes.find(node => node.id === link.target)!,\n        }))\n\n        const simulation = forceSimulation(_transientNodes)\n            .force('link', forces.link.links(_transientLinks))\n            .force('charge', forces.charge)\n            .force('center', forces.center)\n            .stop()\n\n        // this will set `index`, `x`, `y`, `vx`, `vy` for each node.\n        simulation.tick(iterations)\n\n        setTransientNodes(_transientNodes)\n        setTransientLinks(_transientLinks)\n\n        return () => {\n            simulation.stop()\n        }\n    }, [nodes, links, forces, iterations, setTransientNodes, setTransientLinks])\n\n    const [activeNodeIds, setActiveNodeIds] = useState<string[]>(defaultActiveNodeIds)\n\n    const getNodeStyle = useNodeStyle<Node, Link>({\n        size: nodeSize,\n        activeSize: activeNodeSize,\n        inactiveSize: inactiveNodeSize,\n        color: nodeColor,\n        borderWidth: nodeBorderWidth,\n        borderColor: nodeBorderColor,\n        isInteractive,\n        activeNodeIds,\n    })\n    const computedNodes: ComputedNode<Node>[] | null = useMemo(() => {\n        if (transientNodes === null) return null\n\n        return transientNodes.map(node => ({\n            ...node,\n            ...getNodeStyle(node),\n        }))\n    }, [transientNodes, getNodeStyle])\n\n    const theme = useTheme()\n    const getLinkThickness = useDerivedProp(linkThickness)\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    const computedLinks: ComputedLink<Node, Link>[] | null = useMemo(() => {\n        if (transientLinks === null || computedNodes === null) return null\n\n        return transientLinks.map(({ index, ...link }) => {\n            const linkWithComputedNodes: Omit<ComputedLink<Node, Link>, 'color' | 'thickness'> = {\n                id: `${link.source.id}.${link.target.id}`,\n                data: link.data,\n                index,\n                source: computedNodes.find(node => node.id === link.source.id)!,\n                target: computedNodes.find(node => node.id === link.target.id)!,\n            }\n\n            return {\n                ...linkWithComputedNodes,\n                thickness: getLinkThickness(linkWithComputedNodes),\n                color: getLinkColor(linkWithComputedNodes),\n            }\n        })\n    }, [transientLinks, computedNodes, getLinkThickness, getLinkColor])\n\n    return {\n        nodes: computedNodes,\n        links: computedLinks,\n        activeNodeIds,\n        setActiveNodeIds,\n    }\n}\n\nconst getNodeAnnotationPosition = <Node extends InputNode>(node: ComputedNode<Node>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = <Node extends InputNode>(node: ComputedNode<Node>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useNodeAnnotations = <Node extends InputNode>(\n    nodes: ComputedNode<Node>[],\n    annotations: AnnotationMatcher<ComputedNode<Node>>[]\n) =>\n    useAnnotations<ComputedNode<Node>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n", "import { createElement, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { ComputedLink, InputLink, InputNode, LinkComponent, NetworkSvgProps } from './types'\n\ninterface NetworkLinksProps<Node extends InputNode, Link extends InputLink> {\n    links: ComputedLink<Node, Link>[]\n    linkComponent: LinkComponent<Node, Link>\n    blendMode: NonNullable<NetworkSvgProps<Node, Link>['linkBlendMode']>\n}\n\nconst getEnterTransition =\n    <Node extends InputNode, Link extends InputLink>() =>\n    (link: ComputedLink<Node, Link>) => ({\n        x1: link.source.x,\n        y1: link.source.y,\n        x2: link.source.x,\n        y2: link.source.y,\n        color: link.color,\n        opacity: 0,\n    })\n\nconst getRegularTransition =\n    <Node extends InputNode, Link extends InputLink>() =>\n    (link: ComputedLink<Node, Link>) => ({\n        x1: link.source.x,\n        y1: link.source.y,\n        x2: link.target.x,\n        y2: link.target.y,\n        color: link.color,\n        opacity: 1,\n    })\n\nexport const NetworkLinks = <Node extends InputNode, Link extends InputLink>({\n    links,\n    linkComponent,\n    blendMode,\n}: NetworkLinksProps<Node, Link>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const [enterTransition, regularTransition] = useMemo(\n        () => [getEnterTransition<Node, Link>(), getRegularTransition<Node, Link>()],\n        []\n    )\n\n    const transition = useTransition<\n        ComputedLink<Node, Link>,\n        {\n            x1: number\n            y1: number\n            x2: number\n            y2: number\n            color: string\n            opacity: number\n        }\n    >(links, {\n        keys: link => link.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        expires: true,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, link) => {\n                return createElement(linkComponent, {\n                    key: link.id,\n                    link,\n                    animated: transitionProps,\n                    blendMode,\n                })\n            })}\n        </>\n    )\n}\n", "import { createElement, useCallback, useMemo, MouseEvent } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { InputNode, ComputedNode, NodeAnimatedProps, NetworkSvgProps, InputLink } from './types'\n\ninterface NetworkNodesProps<Node extends InputNode, Link extends InputLink> {\n    nodes: ComputedNode<Node>[]\n    nodeComponent: NonNullable<NetworkSvgProps<Node, Link>['nodeComponent']>\n    onMouseEnter: NetworkSvgProps<Node, Link>['onMouseEnter']\n    onMouseMove: NetworkSvgProps<Node, Link>['onMouseMove']\n    onMouseLeave: NetworkSvgProps<Node, Link>['onMouseLeave']\n    onClick: NetworkSvgProps<Node, Link>['onClick']\n    tooltip: NonNullable<NetworkSvgProps<Node, Link>['nodeTooltip']>\n    setActiveNodeIds: (nodeIds: string[]) => void\n    isInteractive: NonNullable<NetworkSvgProps<Node, Link>['isInteractive']>\n}\n\nconst getEnterTransition =\n    <Node extends InputNode>() =>\n    (node: ComputedNode<Node>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 0,\n        opacity: 0,\n    })\n\nconst getRegularTransition =\n    <N extends InputNode>() =>\n    (node: ComputedNode<N>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 1,\n        opacity: 1,\n    })\n\nconst getExitTransition =\n    <Node extends InputNode>() =>\n    (node: ComputedNode<Node>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 0,\n        opacity: 0,\n    })\n\nexport const NetworkNodes = <Node extends InputNode, Link extends InputLink>({\n    nodes,\n    nodeComponent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    setActiveNodeIds,\n    isInteractive,\n}: NetworkNodesProps<Node, Link>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const [enterTransition, regularTransition, exitTransition] = useMemo(\n        () => [getEnterTransition<Node>(), getRegularTransition<Node>(), getExitTransition<Node>()],\n        []\n    )\n\n    const transition = useTransition<ComputedNode<Node>, NodeAnimatedProps>(nodes, {\n        keys: node => node.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: exitTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            setActiveNodeIds([node.id])\n            onMouseEnter?.(node, event)\n        },\n        [showTooltipFromEvent, tooltip, setActiveNodeIds, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            hideTooltip()\n            setActiveNodeIds([])\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, setActiveNodeIds, onMouseLeave]\n    )\n\n    return (\n        <>\n            {transition((transitionProps, node) =>\n                createElement(nodeComponent, {\n                    key: node.id,\n                    node,\n                    animated: transitionProps,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? onClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n", "import { Annotation } from '@nivo/annotations'\nimport { ComputedNode, InputLink, InputNode, NetworkSvgProps } from './types'\nimport { useNodeAnnotations } from './hooks'\n\ninterface NetworkNodeAnnotationsProps<Node extends InputNode, Link extends InputLink> {\n    nodes: ComputedNode<Node>[]\n    annotations: NonNullable<NetworkSvgProps<Node, Link>['annotations']>\n}\n\nexport const NetworkNodeAnnotations = <Node extends InputNode, Link extends InputLink>({\n    nodes,\n    annotations,\n}: NetworkNodeAnnotationsProps<Node, Link>) => {\n    const boundAnnotations = useNodeAnnotations<Node>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { svgDefaultProps } from './defaults'\nimport { useNetwork } from './hooks'\nimport { NetworkLinks } from './NetworkLinks'\nimport { NetworkNodes } from './NetworkNodes'\nimport { NetworkNodeAnnotations } from './NetworkNodeAnnotations'\nimport {\n    InputNode,\n    LayerId,\n    NodeTooltip,\n    NetworkSvgProps,\n    InputLink,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkProps<Node extends InputNode, Link extends InputLink> = Omit<\n    NetworkSvgProps<Node, Link>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerNetwork = <Node extends InputNode, Link extends InputLink>({\n    width,\n    height,\n    margin: partialMargin,\n\n    data: { nodes: rawNodes, links: rawLinks },\n\n    linkDistance = svgDefaultProps.linkDistance,\n    centeringStrength = svgDefaultProps.centeringStrength,\n    repulsivity = svgDefaultProps.repulsivity,\n    distanceMin = svgDefaultProps.distanceMin,\n    distanceMax = svgDefaultProps.distanceMax,\n    iterations = svgDefaultProps.iterations,\n\n    layers = svgDefaultProps.layers,\n\n    nodeComponent = svgDefaultProps.nodeComponent as unknown as NonNullable<\n        NetworkSvgProps<Node, Link>['nodeComponent']\n    >,\n    nodeSize = svgDefaultProps.nodeSize,\n    activeNodeSize = svgDefaultProps.activeNodeSize,\n    inactiveNodeSize = svgDefaultProps.inactiveNodeSize,\n    nodeColor = svgDefaultProps.nodeColor,\n    nodeBorderWidth = svgDefaultProps.nodeBorderWidth,\n    nodeBorderColor = svgDefaultProps.nodeBorderColor,\n\n    linkComponent = svgDefaultProps.linkComponent as NonNullable<\n        NetworkSvgProps<Node, Link>['linkComponent']\n    >,\n    linkThickness = svgDefaultProps.linkThickness,\n    linkColor = svgDefaultProps.linkColor,\n    linkBlendMode = svgDefaultProps.linkBlendMode,\n\n    annotations = svgDefaultProps.annotations as NonNullable<\n        NetworkSvgProps<Node, Link>['annotations']\n    >,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    defaultActiveNodeIds = svgDefaultProps.defaultActiveNodeIds,\n    nodeTooltip = svgDefaultProps.nodeTooltip as NodeTooltip<Node>,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerNetworkProps<Node, Link>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, links, activeNodeIds, setActiveNodeIds } = useNetwork<Node, Link>({\n        center: [innerWidth / 2, innerHeight / 2],\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n        linkThickness,\n        linkColor,\n        isInteractive,\n        defaultActiveNodeIds,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        links: null,\n        nodes: null,\n        annotations: null,\n    }\n\n    if (layers.includes('links') && links !== null) {\n        layerById.links = (\n            <NetworkLinks<Node, Link>\n                key=\"links\"\n                links={links}\n                linkComponent={linkComponent}\n                blendMode={linkBlendMode}\n            />\n        )\n    }\n\n    if (layers.includes('nodes') && nodes !== null) {\n        layerById.nodes = (\n            <NetworkNodes<Node, Link>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={nodeTooltip}\n                setActiveNodeIds={setActiveNodeIds}\n                isInteractive={isInteractive}\n            />\n        )\n    }\n\n    if (layers.includes('annotations') && nodes !== null) {\n        layerById.annotations = (\n            <NetworkNodeAnnotations<Node, Link>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    const customLayerProps: CustomLayerProps<Node, Link> = useMemo(\n        () => ({\n            nodes: nodes || [],\n            links: links || [],\n            activeNodeIds,\n            setActiveNodeIds,\n        }),\n        [nodes, links, activeNodeIds, setActiveNodeIds]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Network = <Node extends InputNode = InputNode, Link extends InputLink = InputLink>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: NetworkSvgProps<Node, Link>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerNetwork<Node, Link> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { InputLink, InputNode, NetworkSvgProps } from './types'\nimport { Network } from './Network'\n\nexport const ResponsiveNetwork = <\n    Node extends InputNode = InputNode,\n    Link extends InputLink = InputLink\n>(\n    props: Omit<NetworkSvgProps<Node, Link>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Network<Node, Link> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n", "import {\n    ForwardedRef,\n    forwardRef,\n    useCallback,\n    useRef,\n    useEffect,\n    createElement,\n    MouseEvent,\n    useMemo,\n} from 'react'\nimport { getDistance, getRelativeCursor, Container, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useComputedAnnotations, renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { canvasDefaultProps } from './defaults'\nimport { useNetwork, useNodeAnnotations } from './hooks'\nimport {\n    NetworkCanvasProps,\n    InputNode,\n    ComputedNode,\n    NodeTooltip,\n    InputLink,\n    NetworkSvgProps,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkCanvasProps<Node extends InputNode, Link extends InputLink> = Omit<\n    NetworkCanvasProps<Node, Link>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst InnerNetworkCanvas = <Node extends InputNode, Link extends InputLink>({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    data: { nodes: rawNodes, links: rawLinks },\n\n    linkDistance = canvasDefaultProps.linkDistance,\n    centeringStrength = canvasDefaultProps.centeringStrength,\n    repulsivity = canvasDefaultProps.repulsivity,\n    distanceMin = canvasDefaultProps.distanceMin,\n    distanceMax = canvasDefaultProps.distanceMax,\n    iterations = canvasDefaultProps.iterations,\n\n    layers = canvasDefaultProps.layers,\n\n    renderNode = canvasDefaultProps.renderNode,\n    nodeSize = canvasDefaultProps.nodeSize,\n    activeNodeSize = canvasDefaultProps.activeNodeSize,\n    inactiveNodeSize = canvasDefaultProps.inactiveNodeSize,\n    nodeColor = canvasDefaultProps.nodeColor,\n    nodeBorderWidth = canvasDefaultProps.nodeBorderWidth,\n    nodeBorderColor = canvasDefaultProps.nodeBorderColor,\n\n    renderLink = canvasDefaultProps.renderLink,\n    linkThickness = canvasDefaultProps.linkThickness,\n    linkColor = canvasDefaultProps.linkColor,\n\n    annotations = canvasDefaultProps.annotations as NonNullable<\n        NetworkSvgProps<Node, Link>['annotations']\n    >,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    defaultActiveNodeIds = canvasDefaultProps.defaultActiveNodeIds,\n    nodeTooltip = canvasDefaultProps.nodeTooltip as NodeTooltip<Node>,\n    onClick,\n    canvasRef,\n}: InnerNetworkCanvasProps<Node, Link>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, links, activeNodeIds, setActiveNodeIds } = useNetwork<Node, Link>({\n        center: [innerWidth / 2, innerHeight / 2],\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n        linkThickness,\n        linkColor,\n        isInteractive,\n        defaultActiveNodeIds,\n    })\n\n    const boundAnnotations = useNodeAnnotations<Node>(nodes!, annotations)\n    const computedAnnotations = useComputedAnnotations<ComputedNode<Node>>({\n        annotations: boundAnnotations,\n    })\n\n    const customLayerProps: CustomLayerProps<Node, Link> = useMemo(\n        () => ({\n            nodes: nodes || [],\n            links: links || [],\n            activeNodeIds,\n            setActiveNodeIds,\n        }),\n        [nodes, links, activeNodeIds, setActiveNodeIds]\n    )\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'links' && links !== null) {\n                links.forEach(link => renderLink(ctx, link))\n            } else if (layer === 'nodes' && nodes !== null) {\n                nodes.forEach(node => renderNode(ctx, node))\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ComputedNode<Node>>(ctx, {\n                    annotations: computedAnnotations as any,\n                    theme,\n                })\n            } else if (typeof layer === 'function' && nodes !== null && links !== null) {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin.left,\n        margin.top,\n        pixelRatio,\n        layers,\n        theme,\n        nodes,\n        links,\n        renderNode,\n        renderLink,\n        computedAnnotations,\n        customLayerProps,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: MouseEvent) => {\n            if (!canvasEl.current || nodes === null) return undefined\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            return nodes.find(node => {\n                const distanceFromNode = getDistance(\n                    node.x,\n                    node.y,\n                    x - margin.left,\n                    y - margin.top\n                )\n                return distanceFromNode <= node.size / 2\n            })\n        },\n        [canvasEl, margin, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                showTooltipFromEvent(createElement(nodeTooltip, { node }), event)\n                setActiveNodeIds([node.id])\n            } else {\n                hideTooltip()\n                setActiveNodeIds([])\n            }\n        },\n        [getNodeFromMouseEvent, showTooltipFromEvent, nodeTooltip, hideTooltip, setActiveNodeIds]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setActiveNodeIds([])\n    }, [hideTooltip, setActiveNodeIds])\n\n    const handleClick = useCallback(\n        (event: MouseEvent) => {\n            if (!onClick) return\n\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n        />\n    )\n}\n\nexport const NetworkCanvas = forwardRef(\n    <Node extends InputNode = InputNode, Link extends InputLink = InputLink>(\n        {\n            theme,\n            isInteractive = canvasDefaultProps.isInteractive,\n            animate = canvasDefaultProps.animate,\n            motionConfig = canvasDefaultProps.motionConfig,\n            renderWrapper,\n            ...otherProps\n        }: NetworkCanvasProps<Node, Link>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n            <InnerNetworkCanvas<Node, Link>\n                isInteractive={isInteractive}\n                {...otherProps}\n                canvasRef={ref}\n            />\n        </Container>\n    )\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { NetworkCanvasProps, InputNode, InputLink } from './types'\nimport { NetworkCanvas } from './NetworkCanvas'\n\nexport const ResponsiveNetworkCanvas = forwardRef(function ResponsiveBarCanvas<\n    Node extends InputNode = InputNode,\n    Link extends InputLink = InputLink\n>(\n    props: Omit<NetworkCanvasProps<Node, Link>, 'height' | 'width'>,\n    ref: ForwardedRef<HTMLCanvasElement>\n) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <NetworkCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<\n                        NetworkCanvasProps<InputNode, InputLink>,\n                        'height' | 'width'\n                    >)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],
  "mappings": "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",
  "names": []
}
