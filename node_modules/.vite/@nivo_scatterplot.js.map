{
  "version": 3,
  "sources": ["../@nivo/scatterplot/node_modules/@react-spring/web/src/index.ts", "../@nivo/scatterplot/node_modules/@react-spring/web/src/applyAnimatedValues.ts", "../@nivo/scatterplot/node_modules/@react-spring/web/src/AnimatedStyle.ts", "../@nivo/scatterplot/node_modules/@react-spring/web/src/primitives.ts", "../@nivo/scatterplot/src/compute.ts", "../@nivo/scatterplot/src/hooks.ts", "../@nivo/scatterplot/src/Node.tsx", "../@nivo/scatterplot/src/props.tsx", "../@nivo/scatterplot/src/Tooltip.tsx", "../@nivo/scatterplot/src/ScatterPlotAnnotations.tsx", "../@nivo/scatterplot/src/Nodes.tsx", "../@nivo/scatterplot/src/Mesh.tsx", "../@nivo/scatterplot/src/ScatterPlot.tsx", "../@nivo/scatterplot/src/ResponsiveScatterPlot.tsx", "../@nivo/scatterplot/src/ScatterPlotCanvas.tsx", "../@nivo/scatterplot/src/ResponsiveScatterPlotCanvas.tsx"],
  "sourcesContent": ["import { Globals } from '@react-spring/core'\nimport { unstable_batchedUpdates } from 'react-dom'\nimport { createStringInterpolator, colors } from '@react-spring/shared'\nimport { createHost } from '@react-spring/animated'\nimport { applyAnimatedValues } from './applyAnimatedValues'\nimport { AnimatedStyle } from './AnimatedStyle'\nimport { WithAnimated } from './animated'\nimport { primitives } from './primitives'\n\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors,\n})\n\nconst host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: style => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props,\n})\n\nexport const animated = host.animated as WithAnimated\nexport { animated as a }\n\nexport * from './animated'\nexport * from '@react-spring/core'\n", "import { Lookup } from '@react-spring/types'\n\nconst isCustomPropRE = /^--/\n\ntype Value = string | number | boolean | null\n\nfunction dangerousStyleValue(name: string, value: Value) {\n  if (value == null || typeof value === 'boolean' || value === '') return ''\n  if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isCustomPropRE.test(name) &&\n    !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])\n  )\n    return value + 'px'\n  // Presumes implicit 'px' suffix for unitless numbers\n  return ('' + value).trim()\n}\n\nconst attributeCache: Lookup<string> = {}\n\ntype Instance = HTMLDivElement & { style?: Lookup }\n\nexport function applyAnimatedValues(instance: Instance, props: Lookup) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false\n  }\n\n  const isFilterElement =\n    instance.nodeName === 'filter' ||\n    (instance.parentNode && instance.parentNode.nodeName === 'filter')\n\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props!\n\n  const values = Object.values(attributes)\n  const names = Object.keys(attributes).map(name =>\n    isFilterElement || instance.hasAttribute(name)\n      ? name\n      : attributeCache[name] ||\n        (attributeCache[name] = name.replace(\n          /([A-Z])/g,\n          // Attributes are written in dash case\n          n => '-' + n.toLowerCase()\n        ))\n  )\n\n  if (children !== void 0) {\n    instance.textContent = children\n  }\n\n  // Apply CSS styles\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name])\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value)\n      } else {\n        instance.style[name] = value\n      }\n    }\n  }\n\n  // Apply DOM attributes\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i])\n  })\n\n  if (className !== void 0) {\n    instance.className = className\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute('viewBox', viewBox)\n  }\n}\n\nlet isUnitlessNumber: { [key: string]: true } = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true,\n}\n\nconst prefixKey = (prefix: string, key: string) =>\n  prefix + key.charAt(0).toUpperCase() + key.substring(1)\nconst prefixes = ['Webkit', 'Ms', 'Moz', 'O']\n\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach(prefix => (acc[prefixKey(prefix, prop)] = acc[prop]))\n  return acc\n}, isUnitlessNumber)\n", "import { AnimatedObject } from '@react-spring/animated'\nimport { Lookup, OneOrMore } from '@react-spring/types'\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  FluidEvent,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n} from '@react-spring/shared'\n\n/** The transform-functions\n * (https://developer.mozilla.org/fr/docs/Web/CSS/transform-function)\n * that you can pass as keys to your animated component style and that will be\n * animated. Perspective has been left out as it would conflict with the\n * non-transform perspective style.\n */\nconst domTransforms = /^(matrix|translate|scale|rotate|skew)/\n\n// These keys have \"px\" units by default\nconst pxTransforms = /^(translate)/\n\n// These keys have \"deg\" units by default\nconst degTransforms = /^(rotate|skew)/\n\ntype Value = number | string\n\n/** Add a unit to the value when the value is unit-less (eg: a number) */\nconst addUnit = (value: Value, unit: string): string | 0 =>\n  is.num(value) && value !== 0 ? value + unit : value\n\n/**\n * Checks if the input value matches the identity value.\n *\n *     isValueIdentity(0, 0)              // => true\n *     isValueIdentity('0px', 0)          // => true\n *     isValueIdentity([0, '0px', 0], 0)  // => true\n */\nconst isValueIdentity = (value: OneOrMore<Value>, id: number): boolean =>\n  is.arr(value)\n    ? value.every(v => isValueIdentity(v, id))\n    : is.num(value)\n      ? value === id\n      : parseFloat(value) === id\n\ntype Inputs = ReadonlyArray<Value | FluidValue<Value>>[]\ntype Transforms = ((value: any) => [string, boolean])[]\n\n/**\n * This AnimatedStyle will simplify animated components transforms by\n * interpolating all transform function passed as keys in the style object\n * including shortcuts such as x, y and z for translateX/Y/Z\n */\nexport class AnimatedStyle extends AnimatedObject {\n  constructor({ x, y, z, ...style }: Lookup) {\n    /**\n     * An array of arrays that contains the values (static or fluid)\n     * used by each transform function.\n     */\n    const inputs: Inputs = []\n    /**\n     * An array of functions that take a list of values (static or fluid)\n     * and returns (1) a CSS transform string and (2) a boolean that's true\n     * when the transform has no effect (eg: an identity transform).\n     */\n    const transforms: Transforms = []\n\n    // Combine x/y/z into translate3d\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0])\n      transforms.push((xyz: Value[]) => [\n        `translate3d(${xyz.map(v => addUnit(v, 'px')).join(',')})`, // prettier-ignore\n        isValueIdentity(xyz, 0),\n      ])\n    }\n\n    // Pluck any other transform-related props\n    eachProp(style, (value, key) => {\n      if (key === 'transform') {\n        inputs.push([value || ''])\n        transforms.push((transform: string) => [transform, transform === ''])\n      } else if (domTransforms.test(key)) {\n        delete style[key]\n        if (is.und(value)) return\n\n        const unit = pxTransforms.test(key)\n          ? 'px'\n          : degTransforms.test(key)\n            ? 'deg'\n            : ''\n\n        inputs.push(toArray(value))\n        transforms.push(\n          key === 'rotate3d'\n            ? ([x, y, z, deg]: [number, number, number, Value]) => [\n                `rotate3d(${x},${y},${z},${addUnit(deg, unit)})`,\n                isValueIdentity(deg, 0),\n              ]\n            : (input: Value[]) => [\n                `${key}(${input.map(v => addUnit(v, unit)).join(',')})`,\n                isValueIdentity(input, key.startsWith('scale') ? 1 : 0),\n              ]\n        )\n      }\n    })\n\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms)\n    }\n\n    super(style)\n  }\n}\n\n/** @internal */\nclass FluidTransform extends FluidValue<string> {\n  protected _value: string | null = null\n\n  constructor(\n    readonly inputs: Inputs,\n    readonly transforms: Transforms\n  ) {\n    super()\n  }\n\n  get() {\n    return this._value || (this._value = this._get())\n  }\n\n  protected _get() {\n    let transform = ''\n    let identity = true\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0])\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      )\n      transform += ' ' + t\n      identity = identity && id\n    })\n    return identity ? 'none' : transform\n  }\n\n  // Start observing our inputs once we have an observer.\n  protected observerAdded(count: number) {\n    if (count == 1)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      )\n  }\n\n  // Stop observing our inputs once we have no observers.\n  protected observerRemoved(count: number) {\n    if (count == 0)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      )\n  }\n\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      this._value = null\n    }\n    callFluidObservers(this, event)\n  }\n}\n", "export type Primitives = keyof JSX.IntrinsicElements\nexport const primitives: Primitives[] = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'big',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'section',\n  'select',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n  // SVG\n  'circle',\n  'clipPath',\n  'defs',\n  'ellipse',\n  'foreignObject',\n  'g',\n  'image',\n  'line',\n  'linearGradient',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'svg',\n  'text',\n  'tspan',\n]\n", "import get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport { scaleLinear } from 'd3-scale'\nimport { ComputedSerie } from '@nivo/scales'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n    ScatterPlotNodeDynamicSizeSpec,\n} from './types'\n\nconst isDynamicSizeSpec = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n): size is ScatterPlotNodeDynamicSizeSpec => isPlainObject(size)\n\nexport const getNodeSizeGenerator = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isDynamicSizeSpec<RawDatum>(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'symbolSize is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (datum: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>) =>\n            sizeScale(get(datum, size.key))\n    }\n\n    throw new Error('nodeSize is invalid, it should be either a function, a number or an object')\n}\n\nexport const computePoints = <RawDatum extends ScatterPlotDatum>({\n    series,\n    formatX,\n    formatY,\n    getNodeId,\n}: {\n    series: ComputedSerie<{ id: string | number }, RawDatum>[]\n    formatX: (value: RawDatum['x']) => string | number\n    formatY: (value: RawDatum['x']) => string | number\n    getNodeId: (d: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'>) => string\n}): Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] => {\n    const points: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach((d, serieIndex) => {\n            const point: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'> = {\n                index: points.length,\n                serieIndex,\n                serieId: serie.id,\n                x: d.position.x as number,\n                xValue: d.data.x,\n                formattedX: formatX(d.data.x),\n                y: d.position.y as number,\n                yValue: d.data.y,\n                formattedY: formatY(d.data.y),\n                data: d.data,\n            }\n\n            points.push({\n                ...point,\n                id: getNodeId(point),\n            })\n        })\n    })\n\n    return points\n}\n", "import { useMemo } from 'react'\nimport { useValueFormatter, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { useAnnotations } from '@nivo/annotations'\nimport { computePoints, getNodeSizeGenerator } from './compute'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDataProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n} from './types'\n\nconst useNodeSize = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => useMemo(() => getNodeSizeGenerator<RawDatum>(size), [size])\n\nexport const useScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScaleSpec,\n    xFormat,\n    yScaleSpec,\n    yFormat,\n    width,\n    height,\n    nodeId,\n    nodeSize,\n    colors,\n}: {\n    data: ScatterPlotDataProps<RawDatum>['data']\n    xScaleSpec: ScatterPlotCommonProps<RawDatum>['xScale']\n    xFormat?: ScatterPlotCommonProps<RawDatum>['xFormat']\n    yScaleSpec: ScatterPlotCommonProps<RawDatum>['yScale']\n    yFormat?: ScatterPlotCommonProps<RawDatum>['yFormat']\n    width: number\n    height: number\n    nodeId: ScatterPlotCommonProps<RawDatum>['nodeId']\n    nodeSize: ScatterPlotCommonProps<RawDatum>['nodeSize']\n    colors: ScatterPlotCommonProps<RawDatum>['colors']\n}) => {\n    const { series, xScale, yScale } = useMemo(\n        () =>\n            computeXYScalesForSeries<{ id: string | number }, RawDatum>(\n                data,\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getNodeId = usePropertyAccessor(nodeId)\n    const rawNodes = useMemo(\n        () => computePoints<RawDatum>({ series, formatX, formatY, getNodeId }),\n        [series, formatX, formatY, getNodeId]\n    )\n\n    const getNodeSize = useNodeSize<RawDatum>(nodeSize)\n\n    const getColor = useOrdinalColorScale(colors, 'serieId')\n\n    const nodes: ScatterPlotNodeData<RawDatum>[] = useMemo(\n        () =>\n            rawNodes.map(rawNode => ({\n                ...rawNode,\n                size: getNodeSize(rawNode),\n                color: getColor({ serieId: rawNode.serieId }),\n            })),\n        [rawNodes, getNodeSize, getColor]\n    )\n\n    const legendData = useMemo(\n        () =>\n            series.map(serie => ({\n                id: serie.id,\n                label: serie.id,\n                color: getColor({ serieId: serie.id }),\n            })),\n        [series, getColor]\n    )\n\n    return {\n        xScale,\n        yScale,\n        nodes,\n        legendData,\n    }\n}\n\nexport const useScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>(\n    items: ScatterPlotNodeData<RawDatum>[],\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n) =>\n    useAnnotations<ScatterPlotNodeData<RawDatum>>({\n        data: items,\n        annotations,\n        getPosition: (node: ScatterPlotNodeData<RawDatum>) => ({\n            x: node.x,\n            y: node.y,\n        }),\n        getDimensions: (node: ScatterPlotNodeData<RawDatum>) => ({\n            size: node.size,\n            width: node.size,\n            height: node.size,\n        }),\n    })\n", "import { useCallback, MouseEvent } from 'react'\nimport { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseEnter?.(node, event),\n        [node, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseMove?.(node, event),\n        [node, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseLeave?.(node, event),\n        [node, onMouseLeave]\n    )\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onClick?.(node, event),\n        [node, onClick]\n    )\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n", "import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) =>\n        `${serieId}.${index}`) as ScatterPlotCommonProps<ScatterPlotDatum>['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n", "import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => onClick?.(node, event),\n        [onClick]\n    )\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n", "import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n", "import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n", "import {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n    MouseEvent,\n} from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProps, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n    canvasRef,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProps<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProps<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProps<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProps<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n        boundAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = forwardRef(\n    <RawDatum extends ScatterPlotDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: ScatterPlotCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerScatterPlotCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { ForwardedRef, forwardRef } from 'react'\n\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = forwardRef(function ResponsiveScatterPlotCanvas<\n    RawDatum extends ScatterPlotDatum\n>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>,\n    ref: ForwardedRef<HTMLCanvasElement>\n) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <ScatterPlotCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<\n                        ScatterPlotCanvasProps<ScatterPlotDatum>,\n                        'height' | 'width'\n                    >)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],
  "mappings": "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",
  "names": []
}
