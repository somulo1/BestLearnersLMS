{
  "version": 3,
  "sources": ["../@nivo/radar/node_modules/@react-spring/web/src/index.ts", "../@nivo/radar/node_modules/@react-spring/web/src/applyAnimatedValues.ts", "../@nivo/radar/node_modules/@react-spring/web/src/AnimatedStyle.ts", "../@nivo/radar/node_modules/@react-spring/web/src/primitives.ts", "../@nivo/radar/src/RadarLayer.tsx", "../@nivo/radar/src/RadarGridLabels.tsx", "../@nivo/radar/src/RadarGridLevels.tsx", "../@nivo/radar/src/RadarGrid.tsx", "../@nivo/radar/src/RadarSlice.tsx", "../@nivo/radar/src/RadarSlices.tsx", "../@nivo/radar/src/RadarDots.tsx", "../@nivo/radar/src/props.ts", "../@nivo/radar/src/RadarGridLabel.tsx", "../@nivo/radar/src/RadarSliceTooltip.tsx", "../@nivo/radar/src/Radar.tsx", "../@nivo/radar/src/hooks.ts", "../@nivo/radar/src/ResponsiveRadar.tsx"],
  "sourcesContent": ["import { Globals } from '@react-spring/core'\nimport { unstable_batchedUpdates } from 'react-dom'\nimport { createStringInterpolator, colors } from '@react-spring/shared'\nimport { createHost } from '@react-spring/animated'\nimport { applyAnimatedValues } from './applyAnimatedValues'\nimport { AnimatedStyle } from './AnimatedStyle'\nimport { WithAnimated } from './animated'\nimport { primitives } from './primitives'\n\nGlobals.assign({\n  batchedUpdates: unstable_batchedUpdates,\n  createStringInterpolator,\n  colors,\n})\n\nconst host = createHost(primitives, {\n  applyAnimatedValues,\n  createAnimatedStyle: style => new AnimatedStyle(style),\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props,\n})\n\nexport const animated = host.animated as WithAnimated\nexport { animated as a }\n\nexport * from './animated'\nexport * from '@react-spring/core'\n", "import { Lookup } from '@react-spring/types'\n\nconst isCustomPropRE = /^--/\n\ntype Value = string | number | boolean | null\n\nfunction dangerousStyleValue(name: string, value: Value) {\n  if (value == null || typeof value === 'boolean' || value === '') return ''\n  if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isCustomPropRE.test(name) &&\n    !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])\n  )\n    return value + 'px'\n  // Presumes implicit 'px' suffix for unitless numbers\n  return ('' + value).trim()\n}\n\nconst attributeCache: Lookup<string> = {}\n\ntype Instance = HTMLDivElement & { style?: Lookup }\n\nexport function applyAnimatedValues(instance: Instance, props: Lookup) {\n  if (!instance.nodeType || !instance.setAttribute) {\n    return false\n  }\n\n  const isFilterElement =\n    instance.nodeName === 'filter' ||\n    (instance.parentNode && instance.parentNode.nodeName === 'filter')\n\n  const {\n    className,\n    style,\n    children,\n    scrollTop,\n    scrollLeft,\n    viewBox,\n    ...attributes\n  } = props!\n\n  const values = Object.values(attributes)\n  const names = Object.keys(attributes).map(name =>\n    isFilterElement || instance.hasAttribute(name)\n      ? name\n      : attributeCache[name] ||\n        (attributeCache[name] = name.replace(\n          /([A-Z])/g,\n          // Attributes are written in dash case\n          n => '-' + n.toLowerCase()\n        ))\n  )\n\n  if (children !== void 0) {\n    instance.textContent = children\n  }\n\n  // Apply CSS styles\n  for (const name in style) {\n    if (style.hasOwnProperty(name)) {\n      const value = dangerousStyleValue(name, style[name])\n      if (isCustomPropRE.test(name)) {\n        instance.style.setProperty(name, value)\n      } else {\n        instance.style[name] = value\n      }\n    }\n  }\n\n  // Apply DOM attributes\n  names.forEach((name, i) => {\n    instance.setAttribute(name, values[i])\n  })\n\n  if (className !== void 0) {\n    instance.className = className\n  }\n  if (scrollTop !== void 0) {\n    instance.scrollTop = scrollTop\n  }\n  if (scrollLeft !== void 0) {\n    instance.scrollLeft = scrollLeft\n  }\n  if (viewBox !== void 0) {\n    instance.setAttribute('viewBox', viewBox)\n  }\n}\n\nlet isUnitlessNumber: { [key: string]: true } = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true,\n}\n\nconst prefixKey = (prefix: string, key: string) =>\n  prefix + key.charAt(0).toUpperCase() + key.substring(1)\nconst prefixes = ['Webkit', 'Ms', 'Moz', 'O']\n\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {\n  prefixes.forEach(prefix => (acc[prefixKey(prefix, prop)] = acc[prop]))\n  return acc\n}, isUnitlessNumber)\n", "import { AnimatedObject } from '@react-spring/animated'\nimport { Lookup, OneOrMore } from '@react-spring/types'\nimport {\n  is,\n  each,\n  toArray,\n  eachProp,\n  FluidValue,\n  FluidEvent,\n  getFluidValue,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n} from '@react-spring/shared'\n\n/** The transform-functions\n * (https://developer.mozilla.org/fr/docs/Web/CSS/transform-function)\n * that you can pass as keys to your animated component style and that will be\n * animated. Perspective has been left out as it would conflict with the\n * non-transform perspective style.\n */\nconst domTransforms = /^(matrix|translate|scale|rotate|skew)/\n\n// These keys have \"px\" units by default\nconst pxTransforms = /^(translate)/\n\n// These keys have \"deg\" units by default\nconst degTransforms = /^(rotate|skew)/\n\ntype Value = number | string\n\n/** Add a unit to the value when the value is unit-less (eg: a number) */\nconst addUnit = (value: Value, unit: string): string | 0 =>\n  is.num(value) && value !== 0 ? value + unit : value\n\n/**\n * Checks if the input value matches the identity value.\n *\n *     isValueIdentity(0, 0)              // => true\n *     isValueIdentity('0px', 0)          // => true\n *     isValueIdentity([0, '0px', 0], 0)  // => true\n */\nconst isValueIdentity = (value: OneOrMore<Value>, id: number): boolean =>\n  is.arr(value)\n    ? value.every(v => isValueIdentity(v, id))\n    : is.num(value)\n      ? value === id\n      : parseFloat(value) === id\n\ntype Inputs = ReadonlyArray<Value | FluidValue<Value>>[]\ntype Transforms = ((value: any) => [string, boolean])[]\n\n/**\n * This AnimatedStyle will simplify animated components transforms by\n * interpolating all transform function passed as keys in the style object\n * including shortcuts such as x, y and z for translateX/Y/Z\n */\nexport class AnimatedStyle extends AnimatedObject {\n  constructor({ x, y, z, ...style }: Lookup) {\n    /**\n     * An array of arrays that contains the values (static or fluid)\n     * used by each transform function.\n     */\n    const inputs: Inputs = []\n    /**\n     * An array of functions that take a list of values (static or fluid)\n     * and returns (1) a CSS transform string and (2) a boolean that's true\n     * when the transform has no effect (eg: an identity transform).\n     */\n    const transforms: Transforms = []\n\n    // Combine x/y/z into translate3d\n    if (x || y || z) {\n      inputs.push([x || 0, y || 0, z || 0])\n      transforms.push((xyz: Value[]) => [\n        `translate3d(${xyz.map(v => addUnit(v, 'px')).join(',')})`, // prettier-ignore\n        isValueIdentity(xyz, 0),\n      ])\n    }\n\n    // Pluck any other transform-related props\n    eachProp(style, (value, key) => {\n      if (key === 'transform') {\n        inputs.push([value || ''])\n        transforms.push((transform: string) => [transform, transform === ''])\n      } else if (domTransforms.test(key)) {\n        delete style[key]\n        if (is.und(value)) return\n\n        const unit = pxTransforms.test(key)\n          ? 'px'\n          : degTransforms.test(key)\n            ? 'deg'\n            : ''\n\n        inputs.push(toArray(value))\n        transforms.push(\n          key === 'rotate3d'\n            ? ([x, y, z, deg]: [number, number, number, Value]) => [\n                `rotate3d(${x},${y},${z},${addUnit(deg, unit)})`,\n                isValueIdentity(deg, 0),\n              ]\n            : (input: Value[]) => [\n                `${key}(${input.map(v => addUnit(v, unit)).join(',')})`,\n                isValueIdentity(input, key.startsWith('scale') ? 1 : 0),\n              ]\n        )\n      }\n    })\n\n    if (inputs.length) {\n      style.transform = new FluidTransform(inputs, transforms)\n    }\n\n    super(style)\n  }\n}\n\n/** @internal */\nclass FluidTransform extends FluidValue<string> {\n  protected _value: string | null = null\n\n  constructor(\n    readonly inputs: Inputs,\n    readonly transforms: Transforms\n  ) {\n    super()\n  }\n\n  get() {\n    return this._value || (this._value = this._get())\n  }\n\n  protected _get() {\n    let transform = ''\n    let identity = true\n    each(this.inputs, (input, i) => {\n      const arg1 = getFluidValue(input[0])\n      const [t, id] = this.transforms[i](\n        is.arr(arg1) ? arg1 : input.map(getFluidValue)\n      )\n      transform += ' ' + t\n      identity = identity && id\n    })\n    return identity ? 'none' : transform\n  }\n\n  // Start observing our inputs once we have an observer.\n  protected observerAdded(count: number) {\n    if (count == 1)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && addFluidObserver(value, this)\n        )\n      )\n  }\n\n  // Stop observing our inputs once we have no observers.\n  protected observerRemoved(count: number) {\n    if (count == 0)\n      each(this.inputs, input =>\n        each(\n          input,\n          value => hasFluidValue(value) && removeFluidObserver(value, this)\n        )\n      )\n  }\n\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      this._value = null\n    }\n    callFluidObservers(this, event)\n  }\n}\n", "export type Primitives = keyof JSX.IntrinsicElements\nexport const primitives: Primitives[] = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'big',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'section',\n  'select',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n  // SVG\n  'circle',\n  'clipPath',\n  'defs',\n  'ellipse',\n  'foreignObject',\n  'g',\n  'image',\n  'line',\n  'linearGradient',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'svg',\n  'text',\n  'tspan',\n]\n", "import { useMemo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { lineRadial, CurveFactory } from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { useMotionConfig, useTheme, useAnimatedPath } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { RadarCommonProps, RadarSvgProps } from './types'\n\ninterface RadarLayerProps<D extends Record<string, unknown>> {\n    data: D[]\n    item: string\n    colorByKey: Record<string | number, string>\n    fillByKey: Record<string, string | null>\n    radiusScale: ScaleLinear<number, number>\n    rotation: number\n    angleStep: number\n    curveFactory: CurveFactory\n    borderWidth: RadarCommonProps<D>['borderWidth']\n    borderColor: RadarCommonProps<D>['borderColor']\n    fillOpacity: RadarCommonProps<D>['fillOpacity']\n    blendMode: RadarCommonProps<D>['blendMode']\n    onClick?: RadarSvgProps<D>['onClick']\n}\n\nexport const RadarLayer = <D extends Record<string, unknown>>({\n    data,\n    item: key,\n    colorByKey,\n    fillByKey,\n    radiusScale,\n    rotation,\n    angleStep,\n    curveFactory,\n    borderWidth,\n    borderColor,\n    fillOpacity,\n    blendMode,\n}: RadarLayerProps<D>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const lineGenerator = useMemo(() => {\n        return lineRadial<number>()\n            .radius(d => radiusScale(d))\n            .angle((_, i) => rotation + i * angleStep)\n            .curve(curveFactory)\n    }, [radiusScale, rotation, angleStep, curveFactory])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(lineGenerator(data.map(d => d[key] as number)) as string)\n    const animatedProps = useSpring<{ fill: string; stroke: string }>({\n        fill: colorByKey[key],\n        stroke: getBorderColor({ key, color: colorByKey[key] }),\n        config: springConfig,\n        immediate: !animate,\n    })\n    const fill = fillByKey[key] ?? animatedProps.fill\n\n    return (\n        <animated.path\n            key={key}\n            d={animatedPath}\n            fill={fill}\n            fillOpacity={fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={borderWidth}\n            style={{ mixBlendMode: blendMode }}\n        />\n    )\n}\n", "import { createElement } from 'react'\nimport { useSprings } from '@react-spring/web'\nimport { useMotionConfig, positionFromAngle, radiansToDegrees } from '@nivo/core'\nimport { GridLabelComponent } from './types'\n\nconst textAnchorFromAngle = (_angle: number) => {\n    const angle = radiansToDegrees(_angle) + 90\n\n    if (angle <= 10 || angle >= 350 || (angle >= 170 && angle <= 190)) return 'middle' as const\n    if (angle > 180) return 'end' as const\n    return 'start' as const\n}\n\ninterface RadarGridLabelsProps {\n    radius: number\n    angles: number[]\n    indices: string[]\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGridLabels = ({\n    radius,\n    angles,\n    indices,\n    label: labelComponent,\n    labelOffset,\n}: RadarGridLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = indices.map((index, i) => {\n        const position = positionFromAngle(angles[i], radius + labelOffset)\n        const textAnchor = textAnchorFromAngle(angles[i])\n\n        return {\n            id: index,\n            angle: radiansToDegrees(angles[i]),\n            anchor: textAnchor,\n            ...position,\n        }\n    })\n\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            transform: `translate(${label.x}, ${label.y})`,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return createElement(labelComponent, {\n                    key: label.id,\n                    id: label.id,\n                    anchor: label.anchor,\n                    angle: label.angle,\n                    x: label.x,\n                    y: label.y,\n                    animated: animatedProps,\n                })\n            })}\n        </>\n    )\n}\n", "import { memo, SVGProps, useMemo } from 'react'\nimport { lineRadial, curveLinearClosed } from 'd3-shape'\nimport { animated, useSpring, to } from '@react-spring/web'\nimport { useTheme, useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { RadarCommonProps } from './types'\n\ninterface RadarGridLevelCircularProps {\n    radius: number\n}\n\nconst RadarGridLevelCircular = memo(({ radius }: RadarGridLevelCircularProps) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        radius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            fill=\"none\"\n            r={to(animatedProps.radius, value => Math.max(value, 0))}\n            {...(theme.grid.line as Omit<SVGProps<SVGCircleElement>, 'ref'>)}\n        />\n    )\n})\n\ninterface RadarGridLevelLinearProps {\n    radius: number\n    rotation: number\n    angleStep: number\n    dataLength: number\n}\n\nconst RadarGridLevelLinear = ({\n    radius,\n    rotation,\n    angleStep,\n    dataLength,\n}: RadarGridLevelLinearProps) => {\n    const theme = useTheme()\n\n    const radarLineGenerator = useMemo(\n        () =>\n            lineRadial<number>()\n                .angle(i => rotation + i * angleStep)\n                .radius(radius)\n                .curve(curveLinearClosed),\n        [rotation, angleStep, radius]\n    )\n\n    const points = Array.from({ length: dataLength }, (_, i) => i)\n    const animatedPath = useAnimatedPath(radarLineGenerator(points) as string)\n\n    return (\n        <animated.path\n            fill=\"none\"\n            d={animatedPath}\n            {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n        />\n    )\n}\n\ninterface RadarGridLevelsProps<D extends Record<string, unknown>> {\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    rotation: number\n    angleStep: number\n    dataLength: number\n}\n\nexport const RadarGridLevels = <D extends Record<string, unknown>>({\n    shape,\n    ...props\n}: RadarGridLevelsProps<D>) => {\n    return shape === 'circular' ? (\n        <RadarGridLevelCircular radius={props.radius} />\n    ) : (\n        <RadarGridLevelLinear {...props} />\n    )\n}\n", "import { SVGProps, useMemo } from 'react'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { RadarGridLabels } from './RadarGridLabels'\nimport { RadarGridLevels } from './RadarGridLevels'\nimport { GridLabelComponent, RadarCommonProps } from './types'\n\ninterface RadarGridProps<D extends Record<string, unknown>> {\n    indices: string[]\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    levels: number\n    rotation: number\n    angleStep: number\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGrid = <D extends Record<string, unknown>>({\n    indices,\n    levels,\n    shape,\n    radius,\n    rotation,\n    angleStep,\n    label,\n    labelOffset,\n}: RadarGridProps<D>) => {\n    const theme = useTheme()\n    const { radii, angles } = useMemo(() => {\n        return {\n            radii: Array.from({ length: levels })\n                .map((_, i) => (radius / levels) * (i + 1))\n                .reverse(),\n            angles: Array.from({ length: indices.length }).map(\n                (_, i) => rotation + i * angleStep - Math.PI / 2\n            ),\n        }\n    }, [indices, levels, radius, rotation, angleStep])\n\n    return (\n        <>\n            {angles.map((angle, i) => {\n                const position = positionFromAngle(angle, radius)\n                return (\n                    <line\n                        key={`axis.${i}`}\n                        x1={0}\n                        y1={0}\n                        x2={position.x}\n                        y2={position.y}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                )\n            })}\n            {radii.map((radius, i) => (\n                <RadarGridLevels<D>\n                    key={`level.${i}`}\n                    shape={shape}\n                    radius={radius}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    dataLength={indices.length}\n                />\n            ))}\n            <RadarGridLabels\n                radius={radius}\n                angles={angles}\n                indices={indices}\n                labelOffset={labelOffset}\n                label={label}\n            />\n        </>\n    )\n}\n", "import { useMemo, useState, useCallback, createElement, MouseEvent } from 'react'\nimport { Arc } from 'd3-shape'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { RadarCommonProps, RadarDataProps, RadarSliceTooltipDatum, RadarSvgProps } from './types'\n\ninterface RadarSliceProps<D extends Record<string, unknown>> {\n    datum: D\n    keys: RadarDataProps<D>['keys']\n    index: string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: Record<string, string>\n    startAngle: number\n    endAngle: number\n    radius: number\n    arcGenerator: Arc<void, { startAngle: number; endAngle: number }>\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n    onClick?: RadarSvgProps<D>['onClick']\n}\n\nexport const RadarSlice = <D extends Record<string, unknown>>({\n    datum,\n    keys,\n    index,\n    formatValue,\n    colorByKey,\n    radius,\n    startAngle,\n    endAngle,\n    arcGenerator,\n    tooltip,\n    onClick,\n}: RadarSliceProps<D>) => {\n    const [isHover, setIsHover] = useState(false)\n    const theme = useTheme()\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onClick?.(datum, event),\n        [onClick, datum]\n    )\n\n    const tooltipData = useMemo(() => {\n        const data: RadarSliceTooltipDatum[] = keys.map(key => ({\n            color: colorByKey[key],\n            id: key,\n            value: datum[key] as number,\n            formattedValue: formatValue(datum[key] as number, key),\n        }))\n        data.sort((a, b) => a.value - b.value)\n        data.reverse()\n\n        return data\n    }, [datum, keys, formatValue, colorByKey])\n\n    const showItemTooltip = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            setIsHover(true)\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    index,\n                    data: tooltipData,\n                }),\n                event\n            )\n        },\n        [showTooltipFromEvent, tooltip, index, tooltipData]\n    )\n\n    const hideItemTooltip = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [hideTooltip, setIsHover])\n\n    const { path, tipX, tipY } = useMemo(() => {\n        const position = positionFromAngle(\n            startAngle + (endAngle - startAngle) * 0.5 - Math.PI / 2,\n            radius\n        )\n\n        return {\n            path: arcGenerator({ startAngle, endAngle }) as string,\n            tipX: position.x,\n            tipY: position.y,\n        }\n    }, [startAngle, endAngle, radius, arcGenerator])\n\n    return (\n        <>\n            {isHover && <line x1={0} y1={0} x2={tipX} y2={tipY} style={theme.crosshair.line} />}\n            <path\n                d={path}\n                fill=\"#F00\"\n                fillOpacity={0}\n                onMouseEnter={showItemTooltip}\n                onMouseMove={showItemTooltip}\n                onMouseLeave={hideItemTooltip}\n                onClick={handleClick}\n            />\n        </>\n    )\n}\n", "import { arc as d3Arc } from 'd3-shape'\nimport { RadarSlice } from './RadarSlice'\nimport { RadarColorMapping, RadarCommonProps, RadarDataProps, RadarSvgProps } from './types'\n\ninterface RadarSlicesProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    getIndex: (d: D) => string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: RadarColorMapping\n    radius: number\n    rotation: number\n    angleStep: number\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n    onClick?: RadarSvgProps<D>['onClick']\n}\n\nexport const RadarSlices = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    formatValue,\n    colorByKey,\n    radius,\n    rotation,\n    angleStep,\n    tooltip,\n    onClick,\n}: RadarSlicesProps<D>) => {\n    const arc = d3Arc<{ startAngle: number; endAngle: number }>().outerRadius(radius).innerRadius(0)\n\n    const halfAngleStep = angleStep * 0.5\n    let rootStartAngle = rotation - halfAngleStep\n\n    return (\n        <>\n            {data.map(d => {\n                const index = getIndex(d)\n                const startAngle = rootStartAngle\n                const endAngle = startAngle + angleStep\n\n                rootStartAngle += angleStep\n\n                return (\n                    <RadarSlice\n                        key={index}\n                        datum={d}\n                        keys={keys}\n                        index={index}\n                        formatValue={formatValue}\n                        colorByKey={colorByKey}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        radius={radius}\n                        arcGenerator={arc}\n                        tooltip={tooltip}\n                        onClick={onClick}\n                    />\n                )\n            })}\n        </>\n    )\n}\n", "import { useMemo } from 'react'\nimport { ScaleLinear } from 'd3-scale'\nimport { useTheme, positionFromAngle, DotsItem, usePropertyAccessor } from '@nivo/core'\nimport { getInheritedColorGenerator } from '@nivo/colors'\nimport { RadarCommonProps, RadarDataProps, PointProps, PointData, RadarColorMapping } from './types'\n\ninterface RadarDotsProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    radiusScale: ScaleLinear<number, number>\n    getIndex: (d: D) => string\n    colorByKey: RadarColorMapping\n    rotation: number\n    angleStep: number\n    symbol?: RadarCommonProps<D>['dotSymbol']\n    size: number\n    color: RadarCommonProps<D>['dotColor']\n    borderWidth: number\n    borderColor: RadarCommonProps<D>['dotBorderColor']\n    enableLabel: boolean\n    label: RadarCommonProps<D>['dotLabel']\n    formatValue: (value: number, context: string) => string\n    labelYOffset: number\n}\n\nexport const RadarDots = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    colorByKey,\n    radiusScale,\n    rotation,\n    angleStep,\n    symbol,\n    size = 6,\n    color = { from: 'color' },\n    borderWidth = 0,\n    borderColor = { from: 'color' },\n    enableLabel = false,\n    label = 'value',\n    formatValue,\n    labelYOffset,\n}: RadarDotsProps<D>) => {\n    const theme = useTheme()\n    const fillColor = getInheritedColorGenerator(color, theme)\n    const strokeColor = getInheritedColorGenerator(borderColor, theme)\n    const getLabel = usePropertyAccessor<PointData, string | number>(label)\n\n    const points: PointProps[] = useMemo(\n        () =>\n            data.reduce((acc, datum, i) => {\n                const index = getIndex(datum)\n                keys.forEach(key => {\n                    const value = datum[key] as number\n\n                    const pointData: PointData = {\n                        index,\n                        key,\n                        value,\n                        formattedValue: formatValue(value, key),\n                        color: colorByKey[key],\n                    }\n\n                    acc.push({\n                        key: `${key}.${index}`,\n                        label: enableLabel ? getLabel(pointData) : undefined,\n                        style: {\n                            fill: fillColor(pointData),\n                            stroke: strokeColor(pointData),\n                            ...positionFromAngle(\n                                rotation + angleStep * i - Math.PI / 2,\n                                radiusScale(datum[key] as number)\n                            ),\n                        },\n                        data: pointData,\n                    })\n                })\n\n                return acc\n            }, [] as PointProps[]),\n        [\n            data,\n            keys,\n            getIndex,\n            colorByKey,\n            enableLabel,\n            getLabel,\n            formatValue,\n            fillColor,\n            strokeColor,\n            rotation,\n            angleStep,\n            radiusScale,\n        ]\n    )\n\n    return (\n        <>\n            {points.map(point => (\n                <DotsItem\n                    key={point.key}\n                    x={point.style.x}\n                    y={point.style.y}\n                    symbol={symbol}\n                    size={size}\n                    color={point.style.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.style.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    datum={point.data}\n                />\n            ))}\n        </>\n    )\n}\n", "import { RadarGridLabel } from './RadarGridLabel'\nimport { RadarSliceTooltip } from './RadarSliceTooltip'\nimport { RadarLayerId } from './types'\n\nexport const svgDefaultProps = {\n    layers: ['grid', 'layers', 'slices', 'dots', 'legends'] as RadarLayerId[],\n\n    maxValue: 'auto' as const,\n\n    rotation: 0,\n\n    curve: 'linearClosed' as const,\n\n    borderWidth: 2,\n    borderColor: { from: 'color' },\n\n    gridLevels: 5,\n    gridShape: 'circular' as const,\n    gridLabelOffset: 16,\n    gridLabel: RadarGridLabel,\n\n    enableDots: true,\n    dotSize: 6,\n    dotColor: { from: 'color' },\n    dotBorderWidth: 0,\n    dotBorderColor: { from: 'color' },\n    enableDotLabel: false,\n    dotLabel: 'formattedValue',\n    dotLabelYOffset: -12,\n\n    colors: { scheme: 'nivo' as const },\n    fillOpacity: 0.25,\n    blendMode: 'normal' as const,\n\n    isInteractive: true,\n    sliceTooltip: RadarSliceTooltip,\n\n    legends: [],\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n\n    defs: [],\n    fill: [],\n}\n", "import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { GridLabelProps } from './types'\n\nexport const RadarGridLabel = ({ id, anchor, animated: animatedProps }: GridLabelProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <text style={theme.axis.ticks.text} dominantBaseline=\"central\" textAnchor={anchor}>\n                {id}\n            </text>\n        </animated.g>\n    )\n}\n", "import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RadarSliceTooltipProps } from './types'\n\nexport const RadarSliceTooltip = ({ index, data }: RadarSliceTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            data.map(datum => [\n                <Chip key={datum.id} color={datum.color} />,\n                datum.id,\n                datum.formattedValue,\n            ]),\n        [data]\n    )\n\n    return <TableTooltip title={<strong>{index}</strong>} rows={rows} />\n}\n", "import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { RadarLayer } from './RadarLayer'\nimport { RadarGrid } from './RadarGrid'\nimport { RadarSlices } from './RadarSlices'\nimport { RadarDots } from './RadarDots'\nimport { svgDefaultProps } from './props'\nimport { RadarLayerId, RadarSvgProps } from './types'\nimport { useRadar } from './hooks'\n\ntype InnerRadarProps<D extends Record<string, unknown>> = Omit<\n    RadarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    layers = svgDefaultProps.layers,\n    rotation: rotationDegrees = svgDefaultProps.rotation,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    curve = svgDefaultProps.curve,\n    margin: partialMargin,\n    width,\n    height,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    gridLevels = svgDefaultProps.gridLevels,\n    gridShape = svgDefaultProps.gridShape,\n    gridLabel = svgDefaultProps.gridLabel,\n    gridLabelOffset = svgDefaultProps.gridLabelOffset,\n    enableDots = svgDefaultProps.enableDots,\n    dotSymbol,\n    dotSize = svgDefaultProps.dotSize,\n    dotColor = svgDefaultProps.dotColor,\n    dotBorderWidth = svgDefaultProps.dotBorderWidth,\n    dotBorderColor = svgDefaultProps.dotBorderColor,\n    enableDotLabel = svgDefaultProps.enableDotLabel,\n    dotLabel = svgDefaultProps.dotLabel,\n    dotLabelYOffset = svgDefaultProps.dotLabelYOffset,\n    colors = svgDefaultProps.colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    blendMode = svgDefaultProps.blendMode,\n    isInteractive = svgDefaultProps.isInteractive,\n    sliceTooltip = svgDefaultProps.sliceTooltip,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    onClick,\n}: InnerRadarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        rotation,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        boundLegends,\n        customLayerProps,\n    } = useRadar<D>({\n        data,\n        keys,\n        indexBy,\n        rotationDegrees,\n        maxValue,\n        valueFormat,\n        curve,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        legends,\n        defs,\n        fill,\n    })\n\n    const layerById: Record<RadarLayerId, ReactNode> = {\n        grid: null,\n        layers: null,\n        slices: null,\n        dots: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <g key=\"grid\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarGrid<D>\n                    levels={gridLevels}\n                    shape={gridShape}\n                    radius={radius}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    indices={indices}\n                    label={gridLabel}\n                    labelOffset={gridLabelOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('layers')) {\n        layerById.layers = (\n            <g key=\"layers\" transform={`translate(${centerX}, ${centerY})`}>\n                {keys.map(key => (\n                    <RadarLayer<D>\n                        key={key}\n                        data={data}\n                        item={key}\n                        colorByKey={colorByKey}\n                        fillByKey={fillByKey}\n                        radiusScale={radiusScale}\n                        rotation={rotation}\n                        angleStep={angleStep}\n                        curveFactory={curveFactory}\n                        borderWidth={borderWidth}\n                        borderColor={borderColor}\n                        fillOpacity={fillOpacity}\n                        blendMode={blendMode}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    if (layers.includes('slices') && isInteractive) {\n        layerById.slices = (\n            <g key=\"slices\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarSlices<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    formatValue={formatValue}\n                    colorByKey={colorByKey}\n                    radius={radius}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    tooltip={sliceTooltip}\n                    onClick={onClick}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <g key=\"dots\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarDots<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    radiusScale={radiusScale}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    symbol={dotSymbol}\n                    size={dotSize}\n                    colorByKey={colorByKey}\n                    color={dotColor}\n                    borderWidth={dotBorderWidth}\n                    borderColor={dotBorderColor}\n                    enableLabel={enableDotLabel}\n                    label={dotLabel}\n                    formatValue={formatValue}\n                    labelYOffset={dotLabelYOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {boundLegends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Radar = <D extends Record<string, unknown>>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useCurveInterpolation,\n    usePropertyAccessor,\n    useValueFormatter,\n} from '@nivo/core'\nimport { degreesToRadians } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { svgDefaultProps } from './props'\nimport {\n    RadarColorMapping,\n    RadarCommonProps,\n    RadarDataProps,\n    RadarCustomLayerProps,\n    RadarSvgProps,\n    BoundLegendProps,\n} from './types'\n\nexport const useRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    rotationDegrees,\n    maxValue,\n    valueFormat,\n    curve,\n    width,\n    height,\n    colors = svgDefaultProps.colors,\n    legends,\n    defs,\n    fill,\n}: {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    indexBy: RadarDataProps<D>['indexBy']\n    rotationDegrees: RadarCommonProps<D>['rotation']\n    maxValue: RadarCommonProps<D>['maxValue']\n    valueFormat?: RadarCommonProps<D>['valueFormat']\n    curve: RadarCommonProps<D>['curve']\n    width: number\n    height: number\n    colors: RadarCommonProps<D>['colors']\n    legends: RadarCommonProps<D>['legends']\n    defs: RadarSvgProps<D>['defs']\n    fill: RadarSvgProps<D>['fill']\n}) => {\n    const getIndex = usePropertyAccessor<D, string>(indexBy)\n    const indices = useMemo(() => data.map(getIndex), [data, getIndex])\n    const formatValue = useValueFormatter<number, string>(valueFormat)\n    const rotation = degreesToRadians(rotationDegrees)\n\n    const getColor = useOrdinalColorScale<{ key: string; index: number }>(colors, 'key')\n    const colorByKey: RadarColorMapping = useMemo(\n        () =>\n            keys.reduce<RadarColorMapping>((mapping, key, index) => {\n                mapping[key] = getColor({ key, index })\n                return mapping\n            }, {}),\n        [keys, getColor]\n    )\n\n    const { boundDefs, fillByKey } = useMemo(() => {\n        // expand keys into structure expected by bindDefs\n        const keyData = keys.map(k => ({ key: k, color: colorByKey[k], data, fill: null }))\n        const boundDefs = bindDefs(defs, keyData, fill)\n        const fillByKey = keyData.reduce<Record<string, string | null>>((mapping, keyDatum) => {\n            const { key: keyName, fill } = keyDatum\n            mapping[keyName] = fill\n            return mapping\n        }, {})\n\n        return { boundDefs, fillByKey }\n    }, [keys, data, defs, fill, colorByKey])\n\n    const { radius, radiusScale, centerX, centerY, angleStep } = useMemo(() => {\n        const allValues: number[] = data.reduce(\n            (acc: number[], d) => [...acc, ...keys.map(key => d[key] as number)],\n            [] as number[]\n        )\n        const computedMaxValue = maxValue !== 'auto' ? maxValue : Math.max(...allValues)\n\n        const radius = Math.min(width, height) / 2\n        const radiusScale = scaleLinear<number, number>()\n            .range([0, radius])\n            .domain([0, computedMaxValue])\n\n        return {\n            radius,\n            radiusScale,\n            centerX: width / 2,\n            centerY: height / 2,\n            angleStep: (Math.PI * 2) / data.length,\n        }\n    }, [keys, data, maxValue, width, height])\n\n    const curveFactory = useCurveInterpolation(curve)\n\n    const customLayerProps: RadarCustomLayerProps<D> = useMemo(\n        () => ({\n            data,\n            keys,\n            indices,\n            colorByKey,\n            centerX,\n            centerY,\n            radiusScale,\n            angleStep,\n        }),\n        [data, keys, indices, colorByKey, centerX, centerY, radiusScale, angleStep]\n    )\n\n    const legendData = useMemo(\n        () => keys.map(key => ({ id: key, label: key, color: colorByKey[key] })),\n        [keys, colorByKey]\n    )\n\n    const boundLegends: BoundLegendProps[] = useMemo(\n        () =>\n            legends.map(({ data: customData, ...legend }) => {\n                const boundData = customData?.map(cd => {\n                    const findData = legendData.find(ld => ld.id === cd.id) || {}\n                    return { ...findData, ...cd }\n                })\n                return { ...legend, data: boundData || legendData }\n            }),\n        [legends, legendData]\n    )\n\n    return {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        rotation,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        legendData,\n        boundLegends,\n        customLayerProps,\n    }\n}\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { RadarSvgProps } from './types'\nimport { Radar } from './Radar'\n\nexport const ResponsiveRadar = <D extends Record<string, unknown>>(\n    props: Omit<RadarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Radar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": []
}
